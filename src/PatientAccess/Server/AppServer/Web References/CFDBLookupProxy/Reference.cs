//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace PatientAccess.CFDBLookupProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CFDBLookupServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class CFDBLookupService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFacilityDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildFacilitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllFacilitiesUnderLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationFacilityDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacilitiesForLevelParentsOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacilitiesForLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveFacilitiesListInteractiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorporateLevelListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorporateLevelAndFacilityListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CorporateLevelAndFacilityApplicationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CFDBApplicationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityPhonesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CFDBLookupService() {
            this.Url = global::PatientAccess.Properties.Settings.Default.PatientAccess_AppServer_CFDBLookupProxy_CFDBLookupService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFacilityDetailsCompletedEventHandler GetFacilityDetailsCompleted;
        
        /// <remarks/>
        public event GetChildFacilitiesCompletedEventHandler GetChildFacilitiesCompleted;
        
        /// <remarks/>
        public event AllFacilitiesUnderLevelCompletedEventHandler AllFacilitiesUnderLevelCompleted;
        
        /// <remarks/>
        public event GetApplicationFacilityDataCompletedEventHandler GetApplicationFacilityDataCompleted;
        
        /// <remarks/>
        public event FacilitiesForLevelParentsOnlyCompletedEventHandler FacilitiesForLevelParentsOnlyCompleted;
        
        /// <remarks/>
        public event FacilitiesForLevelCompletedEventHandler FacilitiesForLevelCompleted;
        
        /// <remarks/>
        public event GetFacilityListCompletedEventHandler GetFacilityListCompleted;
        
        /// <remarks/>
        public event GetFacilityList1CompletedEventHandler GetFacilityList1Completed;
        
        /// <remarks/>
        public event GetActiveFacilitiesListInteractiveCompletedEventHandler GetActiveFacilitiesListInteractiveCompleted;
        
        /// <remarks/>
        public event CorporateLevelListCompletedEventHandler CorporateLevelListCompleted;
        
        /// <remarks/>
        public event CorporateLevelAndFacilityListCompletedEventHandler CorporateLevelAndFacilityListCompleted;
        
        /// <remarks/>
        public event CorporateLevelAndFacilityApplicationListCompletedEventHandler CorporateLevelAndFacilityApplicationListCompleted;
        
        /// <remarks/>
        public event CFDBApplicationListCompletedEventHandler CFDBApplicationListCompleted;
        
        /// <remarks/>
        public event GetHistoryXMLCompletedEventHandler GetHistoryXMLCompleted;
        
        /// <remarks/>
        public event GetFacilityAddressesCompletedEventHandler GetFacilityAddressesCompleted;
        
        /// <remarks/>
        public event GetFacilityPhonesCompletedEventHandler GetFacilityPhonesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFacilityDetails(string HspCD, string FacilityID, string PartialName) {
            object[] results = this.Invoke("GetFacilityDetails", new object[] {
                        HspCD,
                        FacilityID,
                        PartialName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFacilityDetails(string HspCD, string FacilityID, string PartialName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFacilityDetails", new object[] {
                        HspCD,
                        FacilityID,
                        PartialName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetFacilityDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityDetailsAsync(string HspCD, string FacilityID, string PartialName) {
            this.GetFacilityDetailsAsync(HspCD, FacilityID, PartialName, null);
        }
        
        /// <remarks/>
        public void GetFacilityDetailsAsync(string HspCD, string FacilityID, string PartialName, object userState) {
            if ((this.GetFacilityDetailsOperationCompleted == null)) {
                this.GetFacilityDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityDetailsOperationCompleted);
            }
            this.InvokeAsync("GetFacilityDetails", new object[] {
                        HspCD,
                        FacilityID,
                        PartialName}, this.GetFacilityDetailsOperationCompleted, userState);
        }
        
        private void OnGetFacilityDetailsOperationCompleted(object arg) {
            if ((this.GetFacilityDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityDetailsCompleted(this, new GetFacilityDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChildFacilities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetChildFacilities(string ParentHspCD) {
            object[] results = this.Invoke("GetChildFacilities", new object[] {
                        ParentHspCD});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetChildFacilities(string ParentHspCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetChildFacilities", new object[] {
                        ParentHspCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetChildFacilities(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildFacilitiesAsync(string ParentHspCD) {
            this.GetChildFacilitiesAsync(ParentHspCD, null);
        }
        
        /// <remarks/>
        public void GetChildFacilitiesAsync(string ParentHspCD, object userState) {
            if ((this.GetChildFacilitiesOperationCompleted == null)) {
                this.GetChildFacilitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildFacilitiesOperationCompleted);
            }
            this.InvokeAsync("GetChildFacilities", new object[] {
                        ParentHspCD}, this.GetChildFacilitiesOperationCompleted, userState);
        }
        
        private void OnGetChildFacilitiesOperationCompleted(object arg) {
            if ((this.GetChildFacilitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildFacilitiesCompleted(this, new GetChildFacilitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("AllFacilitiesUnderLevel", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode AllFacilitiesUnderLevel([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrgTypeCD, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string LevelCD) {
            object[] results = this.Invoke("AllFacilitiesUnderLevel", new object[] {
                        OrgTypeCD,
                        LevelCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAllFacilitiesUnderLevel(string OrgTypeCD, string LevelCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AllFacilitiesUnderLevel", new object[] {
                        OrgTypeCD,
                        LevelCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndAllFacilitiesUnderLevel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AllFacilitiesUnderLevelAsync(string OrgTypeCD, string LevelCD) {
            this.AllFacilitiesUnderLevelAsync(OrgTypeCD, LevelCD, null);
        }
        
        /// <remarks/>
        public void AllFacilitiesUnderLevelAsync(string OrgTypeCD, string LevelCD, object userState) {
            if ((this.AllFacilitiesUnderLevelOperationCompleted == null)) {
                this.AllFacilitiesUnderLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllFacilitiesUnderLevelOperationCompleted);
            }
            this.InvokeAsync("AllFacilitiesUnderLevel", new object[] {
                        OrgTypeCD,
                        LevelCD}, this.AllFacilitiesUnderLevelOperationCompleted, userState);
        }
        
        private void OnAllFacilitiesUnderLevelOperationCompleted(object arg) {
            if ((this.AllFacilitiesUnderLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllFacilitiesUnderLevelCompleted(this, new AllFacilitiesUnderLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("GetApplicationFacilityData", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode GetApplicationFacilityData([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] int AppID, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string HspCode, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string FacilityStatusCD, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string FacilityTypeCD) {
            object[] results = this.Invoke("GetApplicationFacilityData", new object[] {
                        AppID,
                        HspCode,
                        FacilityStatusCD,
                        FacilityTypeCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationFacilityData(int AppID, string HspCode, string FacilityStatusCD, string FacilityTypeCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationFacilityData", new object[] {
                        AppID,
                        HspCode,
                        FacilityStatusCD,
                        FacilityTypeCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetApplicationFacilityData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationFacilityDataAsync(int AppID, string HspCode, string FacilityStatusCD, string FacilityTypeCD) {
            this.GetApplicationFacilityDataAsync(AppID, HspCode, FacilityStatusCD, FacilityTypeCD, null);
        }
        
        /// <remarks/>
        public void GetApplicationFacilityDataAsync(int AppID, string HspCode, string FacilityStatusCD, string FacilityTypeCD, object userState) {
            if ((this.GetApplicationFacilityDataOperationCompleted == null)) {
                this.GetApplicationFacilityDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationFacilityDataOperationCompleted);
            }
            this.InvokeAsync("GetApplicationFacilityData", new object[] {
                        AppID,
                        HspCode,
                        FacilityStatusCD,
                        FacilityTypeCD}, this.GetApplicationFacilityDataOperationCompleted, userState);
        }
        
        private void OnGetApplicationFacilityDataOperationCompleted(object arg) {
            if ((this.GetApplicationFacilityDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationFacilityDataCompleted(this, new GetApplicationFacilityDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FacilitiesForLevelParentsOnly", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode FacilitiesForLevelParentsOnly([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrgTypeCD, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string LevelCD) {
            object[] results = this.Invoke("FacilitiesForLevelParentsOnly", new object[] {
                        OrgTypeCD,
                        LevelCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFacilitiesForLevelParentsOnly(string OrgTypeCD, string LevelCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FacilitiesForLevelParentsOnly", new object[] {
                        OrgTypeCD,
                        LevelCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndFacilitiesForLevelParentsOnly(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FacilitiesForLevelParentsOnlyAsync(string OrgTypeCD, string LevelCD) {
            this.FacilitiesForLevelParentsOnlyAsync(OrgTypeCD, LevelCD, null);
        }
        
        /// <remarks/>
        public void FacilitiesForLevelParentsOnlyAsync(string OrgTypeCD, string LevelCD, object userState) {
            if ((this.FacilitiesForLevelParentsOnlyOperationCompleted == null)) {
                this.FacilitiesForLevelParentsOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacilitiesForLevelParentsOnlyOperationCompleted);
            }
            this.InvokeAsync("FacilitiesForLevelParentsOnly", new object[] {
                        OrgTypeCD,
                        LevelCD}, this.FacilitiesForLevelParentsOnlyOperationCompleted, userState);
        }
        
        private void OnFacilitiesForLevelParentsOnlyOperationCompleted(object arg) {
            if ((this.FacilitiesForLevelParentsOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacilitiesForLevelParentsOnlyCompleted(this, new FacilitiesForLevelParentsOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FacilitiesForLevel", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode FacilitiesForLevel([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrgTypeCD, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string LevelCD) {
            object[] results = this.Invoke("FacilitiesForLevel", new object[] {
                        OrgTypeCD,
                        LevelCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFacilitiesForLevel(string OrgTypeCD, string LevelCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FacilitiesForLevel", new object[] {
                        OrgTypeCD,
                        LevelCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndFacilitiesForLevel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void FacilitiesForLevelAsync(string OrgTypeCD, string LevelCD) {
            this.FacilitiesForLevelAsync(OrgTypeCD, LevelCD, null);
        }
        
        /// <remarks/>
        public void FacilitiesForLevelAsync(string OrgTypeCD, string LevelCD, object userState) {
            if ((this.FacilitiesForLevelOperationCompleted == null)) {
                this.FacilitiesForLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacilitiesForLevelOperationCompleted);
            }
            this.InvokeAsync("FacilitiesForLevel", new object[] {
                        OrgTypeCD,
                        LevelCD}, this.FacilitiesForLevelOperationCompleted, userState);
        }
        
        private void OnFacilitiesForLevelOperationCompleted(object arg) {
            if ((this.FacilitiesForLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacilitiesForLevelCompleted(this, new FacilitiesForLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFacilityList(object[] typeCodes, object[] statusCodes) {
            object[] results = this.Invoke("GetFacilityList", new object[] {
                        typeCodes,
                        statusCodes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFacilityList(object[] typeCodes, object[] statusCodes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFacilityList", new object[] {
                        typeCodes,
                        statusCodes}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetFacilityList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityListAsync(object[] typeCodes, object[] statusCodes) {
            this.GetFacilityListAsync(typeCodes, statusCodes, null);
        }
        
        /// <remarks/>
        public void GetFacilityListAsync(object[] typeCodes, object[] statusCodes, object userState) {
            if ((this.GetFacilityListOperationCompleted == null)) {
                this.GetFacilityListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityListOperationCompleted);
            }
            this.InvokeAsync("GetFacilityList", new object[] {
                        typeCodes,
                        statusCodes}, this.GetFacilityListOperationCompleted, userState);
        }
        
        private void OnGetFacilityListOperationCompleted(object arg) {
            if ((this.GetFacilityListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityListCompleted(this, new GetFacilityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetFacilityList1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityListInteractive", RequestElementName="GetFacilityListInteractive", RequestNamespace="http://tempuri.org/", ResponseElementName="GetFacilityListInteractiveResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetFacilityListInteractiveResult")]
        public System.Xml.XmlNode GetFacilityList(string typeCodes, string statusCodes) {
            object[] results = this.Invoke("GetFacilityList1", new object[] {
                        typeCodes,
                        statusCodes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFacilityList1(string typeCodes, string statusCodes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFacilityList1", new object[] {
                        typeCodes,
                        statusCodes}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetFacilityList1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityList1Async(string typeCodes, string statusCodes) {
            this.GetFacilityList1Async(typeCodes, statusCodes, null);
        }
        
        /// <remarks/>
        public void GetFacilityList1Async(string typeCodes, string statusCodes, object userState) {
            if ((this.GetFacilityList1OperationCompleted == null)) {
                this.GetFacilityList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityList1OperationCompleted);
            }
            this.InvokeAsync("GetFacilityList1", new object[] {
                        typeCodes,
                        statusCodes}, this.GetFacilityList1OperationCompleted, userState);
        }
        
        private void OnGetFacilityList1OperationCompleted(object arg) {
            if ((this.GetFacilityList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityList1Completed(this, new GetFacilityList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveFacilitiesListInteractive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetActiveFacilitiesListInteractive(string typeCodes) {
            object[] results = this.Invoke("GetActiveFacilitiesListInteractive", new object[] {
                        typeCodes});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActiveFacilitiesListInteractive(string typeCodes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiveFacilitiesListInteractive", new object[] {
                        typeCodes}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetActiveFacilitiesListInteractive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveFacilitiesListInteractiveAsync(string typeCodes) {
            this.GetActiveFacilitiesListInteractiveAsync(typeCodes, null);
        }
        
        /// <remarks/>
        public void GetActiveFacilitiesListInteractiveAsync(string typeCodes, object userState) {
            if ((this.GetActiveFacilitiesListInteractiveOperationCompleted == null)) {
                this.GetActiveFacilitiesListInteractiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveFacilitiesListInteractiveOperationCompleted);
            }
            this.InvokeAsync("GetActiveFacilitiesListInteractive", new object[] {
                        typeCodes}, this.GetActiveFacilitiesListInteractiveOperationCompleted, userState);
        }
        
        private void OnGetActiveFacilitiesListInteractiveOperationCompleted(object arg) {
            if ((this.GetActiveFacilitiesListInteractiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveFacilitiesListInteractiveCompleted(this, new GetActiveFacilitiesListInteractiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CorporateLevelList", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode CorporateLevelList([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrganizationTypeCD) {
            object[] results = this.Invoke("CorporateLevelList", new object[] {
                        OrganizationTypeCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCorporateLevelList(string OrganizationTypeCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CorporateLevelList", new object[] {
                        OrganizationTypeCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndCorporateLevelList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CorporateLevelListAsync(string OrganizationTypeCD) {
            this.CorporateLevelListAsync(OrganizationTypeCD, null);
        }
        
        /// <remarks/>
        public void CorporateLevelListAsync(string OrganizationTypeCD, object userState) {
            if ((this.CorporateLevelListOperationCompleted == null)) {
                this.CorporateLevelListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorporateLevelListOperationCompleted);
            }
            this.InvokeAsync("CorporateLevelList", new object[] {
                        OrganizationTypeCD}, this.CorporateLevelListOperationCompleted, userState);
        }
        
        private void OnCorporateLevelListOperationCompleted(object arg) {
            if ((this.CorporateLevelListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorporateLevelListCompleted(this, new CorporateLevelListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CorporateLevelAndFacilityList", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode CorporateLevelAndFacilityList([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrganizationTypeCD) {
            object[] results = this.Invoke("CorporateLevelAndFacilityList", new object[] {
                        OrganizationTypeCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCorporateLevelAndFacilityList(string OrganizationTypeCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CorporateLevelAndFacilityList", new object[] {
                        OrganizationTypeCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndCorporateLevelAndFacilityList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CorporateLevelAndFacilityListAsync(string OrganizationTypeCD) {
            this.CorporateLevelAndFacilityListAsync(OrganizationTypeCD, null);
        }
        
        /// <remarks/>
        public void CorporateLevelAndFacilityListAsync(string OrganizationTypeCD, object userState) {
            if ((this.CorporateLevelAndFacilityListOperationCompleted == null)) {
                this.CorporateLevelAndFacilityListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorporateLevelAndFacilityListOperationCompleted);
            }
            this.InvokeAsync("CorporateLevelAndFacilityList", new object[] {
                        OrganizationTypeCD}, this.CorporateLevelAndFacilityListOperationCompleted, userState);
        }
        
        private void OnCorporateLevelAndFacilityListOperationCompleted(object arg) {
            if ((this.CorporateLevelAndFacilityListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorporateLevelAndFacilityListCompleted(this, new CorporateLevelAndFacilityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CorporateLevelAndFacilityApplicationList", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode CorporateLevelAndFacilityApplicationList([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string OrganizationTypeCD, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string AppIDorName, [System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string ShowAffiliationFrom) {
            object[] results = this.Invoke("CorporateLevelAndFacilityApplicationList", new object[] {
                        OrganizationTypeCD,
                        AppIDorName,
                        ShowAffiliationFrom});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCorporateLevelAndFacilityApplicationList(string OrganizationTypeCD, string AppIDorName, string ShowAffiliationFrom, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CorporateLevelAndFacilityApplicationList", new object[] {
                        OrganizationTypeCD,
                        AppIDorName,
                        ShowAffiliationFrom}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndCorporateLevelAndFacilityApplicationList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CorporateLevelAndFacilityApplicationListAsync(string OrganizationTypeCD, string AppIDorName, string ShowAffiliationFrom) {
            this.CorporateLevelAndFacilityApplicationListAsync(OrganizationTypeCD, AppIDorName, ShowAffiliationFrom, null);
        }
        
        /// <remarks/>
        public void CorporateLevelAndFacilityApplicationListAsync(string OrganizationTypeCD, string AppIDorName, string ShowAffiliationFrom, object userState) {
            if ((this.CorporateLevelAndFacilityApplicationListOperationCompleted == null)) {
                this.CorporateLevelAndFacilityApplicationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCorporateLevelAndFacilityApplicationListOperationCompleted);
            }
            this.InvokeAsync("CorporateLevelAndFacilityApplicationList", new object[] {
                        OrganizationTypeCD,
                        AppIDorName,
                        ShowAffiliationFrom}, this.CorporateLevelAndFacilityApplicationListOperationCompleted, userState);
        }
        
        private void OnCorporateLevelAndFacilityApplicationListOperationCompleted(object arg) {
            if ((this.CorporateLevelAndFacilityApplicationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CorporateLevelAndFacilityApplicationListCompleted(this, new CorporateLevelAndFacilityApplicationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CFDBApplicationList", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode CFDBApplicationList() {
            object[] results = this.Invoke("CFDBApplicationList", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCFDBApplicationList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CFDBApplicationList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndCFDBApplicationList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CFDBApplicationListAsync() {
            this.CFDBApplicationListAsync(null);
        }
        
        /// <remarks/>
        public void CFDBApplicationListAsync(object userState) {
            if ((this.CFDBApplicationListOperationCompleted == null)) {
                this.CFDBApplicationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCFDBApplicationListOperationCompleted);
            }
            this.InvokeAsync("CFDBApplicationList", new object[0], this.CFDBApplicationListOperationCompleted, userState);
        }
        
        private void OnCFDBApplicationListOperationCompleted(object arg) {
            if ((this.CFDBApplicationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CFDBApplicationListCompleted(this, new CFDBApplicationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("GetHistoryXML", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode GetHistoryXML([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] int historyID) {
            object[] results = this.Invoke("GetHistoryXML", new object[] {
                        historyID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHistoryXML(int historyID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHistoryXML", new object[] {
                        historyID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetHistoryXML(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoryXMLAsync(int historyID) {
            this.GetHistoryXMLAsync(historyID, null);
        }
        
        /// <remarks/>
        public void GetHistoryXMLAsync(int historyID, object userState) {
            if ((this.GetHistoryXMLOperationCompleted == null)) {
                this.GetHistoryXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryXMLOperationCompleted);
            }
            this.InvokeAsync("GetHistoryXML", new object[] {
                        historyID}, this.GetHistoryXMLOperationCompleted, userState);
        }
        
        private void OnGetHistoryXMLOperationCompleted(object arg) {
            if ((this.GetHistoryXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryXMLCompleted(this, new GetHistoryXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("GetFacilityAddresses", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode GetFacilityAddresses([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string HspCD) {
            object[] results = this.Invoke("GetFacilityAddresses", new object[] {
                        HspCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFacilityAddresses(string HspCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFacilityAddresses", new object[] {
                        HspCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetFacilityAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityAddressesAsync(string HspCD) {
            this.GetFacilityAddressesAsync(HspCD, null);
        }
        
        /// <remarks/>
        public void GetFacilityAddressesAsync(string HspCD, object userState) {
            if ((this.GetFacilityAddressesOperationCompleted == null)) {
                this.GetFacilityAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityAddressesOperationCompleted);
            }
            this.InvokeAsync("GetFacilityAddresses", new object[] {
                        HspCD}, this.GetFacilityAddressesOperationCompleted, userState);
        }
        
        private void OnGetFacilityAddressesOperationCompleted(object arg) {
            if ((this.GetFacilityAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityAddressesCompleted(this, new GetFacilityAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("GetFacilityPhones", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")]
        public System.Xml.XmlNode GetFacilityPhones([System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/")] string HspCD) {
            object[] results = this.Invoke("GetFacilityPhones", new object[] {
                        HspCD});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFacilityPhones(string HspCD, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFacilityPhones", new object[] {
                        HspCD}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetFacilityPhones(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityPhonesAsync(string HspCD) {
            this.GetFacilityPhonesAsync(HspCD, null);
        }
        
        /// <remarks/>
        public void GetFacilityPhonesAsync(string HspCD, object userState) {
            if ((this.GetFacilityPhonesOperationCompleted == null)) {
                this.GetFacilityPhonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityPhonesOperationCompleted);
            }
            this.InvokeAsync("GetFacilityPhones", new object[] {
                        HspCD}, this.GetFacilityPhonesOperationCompleted, userState);
        }
        
        private void OnGetFacilityPhonesOperationCompleted(object arg) {
            if ((this.GetFacilityPhonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityPhonesCompleted(this, new GetFacilityPhonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFacilityDetailsCompletedEventHandler(object sender, GetFacilityDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetChildFacilitiesCompletedEventHandler(object sender, GetChildFacilitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildFacilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildFacilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllFacilitiesUnderLevelCompletedEventHandler(object sender, AllFacilitiesUnderLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllFacilitiesUnderLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllFacilitiesUnderLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetApplicationFacilityDataCompletedEventHandler(object sender, GetApplicationFacilityDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationFacilityDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationFacilityDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FacilitiesForLevelParentsOnlyCompletedEventHandler(object sender, FacilitiesForLevelParentsOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacilitiesForLevelParentsOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacilitiesForLevelParentsOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FacilitiesForLevelCompletedEventHandler(object sender, FacilitiesForLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacilitiesForLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacilitiesForLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFacilityListCompletedEventHandler(object sender, GetFacilityListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFacilityList1CompletedEventHandler(object sender, GetFacilityList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetActiveFacilitiesListInteractiveCompletedEventHandler(object sender, GetActiveFacilitiesListInteractiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveFacilitiesListInteractiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveFacilitiesListInteractiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CorporateLevelListCompletedEventHandler(object sender, CorporateLevelListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorporateLevelListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorporateLevelListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CorporateLevelAndFacilityListCompletedEventHandler(object sender, CorporateLevelAndFacilityListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorporateLevelAndFacilityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorporateLevelAndFacilityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CorporateLevelAndFacilityApplicationListCompletedEventHandler(object sender, CorporateLevelAndFacilityApplicationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CorporateLevelAndFacilityApplicationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CorporateLevelAndFacilityApplicationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CFDBApplicationListCompletedEventHandler(object sender, CFDBApplicationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CFDBApplicationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CFDBApplicationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetHistoryXMLCompletedEventHandler(object sender, GetHistoryXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFacilityAddressesCompletedEventHandler(object sender, GetFacilityAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFacilityPhonesCompletedEventHandler(object sender, GetFacilityPhonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityPhonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityPhonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591