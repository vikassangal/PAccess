//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Extensions.AdamSecurityService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecurityServiceSoap", Namespace="http://tempuri.org/")]
    public partial class SecurityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPrivilegeForPortalOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegesForPortalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPrivilegesForCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPrivilegeForOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPrivilegesForImpersonateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrivilegeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePrivilegeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersForAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersForAppRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersForAppRoleFacilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsersForFacilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppToAppAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppToAppAccessDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppNamedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplicationHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleNamedOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacilitiesForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCredentialsLegacyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCredentialsLegacyOperationCompleted;
        
        private System.Threading.SendOrPostCallback LastLogonByUserLegacyOperationCompleted;
        
        private System.Threading.SendOrPostCallback LastLogoutByUserLegacyOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogPasswordChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPrivilegeForLegacyOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadLegacyIDsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadSecurityAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadSecurityAccessForAppOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SecurityService() {
            this.Url = global::PatientAccess.Properties.Settings.Default.PatientAccess_AppServer_AdamSecurityService_SecurityService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event AuthenticateTokenCompletedEventHandler AuthenticateTokenCompleted;
        
        /// <remarks/>
        public event UserPrivilegeForPortalCompletedEventHandler UserPrivilegeForPortalCompleted;
        
        /// <remarks/>
        public event PrivilegesForPortalUserCompletedEventHandler PrivilegesForPortalUserCompleted;
        
        /// <remarks/>
        public event UserPrivilegesForCacheCompletedEventHandler UserPrivilegesForCacheCompleted;
        
        /// <remarks/>
        public event UserPrivilegeForCompletedEventHandler UserPrivilegeForCompleted;
        
        /// <remarks/>
        public event UserPrivilegesForImpersonateCompletedEventHandler UserPrivilegesForImpersonateCompleted;
        
        /// <remarks/>
        public event AddPrivilegeCompletedEventHandler AddPrivilegeCompleted;
        
        /// <remarks/>
        public event DeletePrivilegeCompletedEventHandler DeletePrivilegeCompleted;
        
        /// <remarks/>
        public event UsersForAppCompletedEventHandler UsersForAppCompleted;
        
        /// <remarks/>
        public event UsersForAppRoleCompletedEventHandler UsersForAppRoleCompleted;
        
        /// <remarks/>
        public event UsersForAppRoleFacilityCompletedEventHandler UsersForAppRoleFacilityCompleted;
        
        /// <remarks/>
        public event UsersForFacilityCompletedEventHandler UsersForFacilityCompleted;
        
        /// <remarks/>
        public event AppToAppAccessCompletedEventHandler AppToAppAccessCompleted;
        
        /// <remarks/>
        public event AppToAppAccessDetailCompletedEventHandler AppToAppAccessDetailCompleted;
        
        /// <remarks/>
        public event AppAccessCompletedEventHandler AppAccessCompleted;
        
        /// <remarks/>
        public event AppNamedCompletedEventHandler AppNamedCompleted;
        
        /// <remarks/>
        public event ApplicationHierarchyCompletedEventHandler ApplicationHierarchyCompleted;
        
        /// <remarks/>
        public event AppRolesCompletedEventHandler AppRolesCompleted;
        
        /// <remarks/>
        public event AppsForUserCompletedEventHandler AppsForUserCompleted;
        
        /// <remarks/>
        public event RoleAccessCompletedEventHandler RoleAccessCompleted;
        
        /// <remarks/>
        public event RoleNamedCompletedEventHandler RoleNamedCompleted;
        
        /// <remarks/>
        public event FacilitiesForUserCompletedEventHandler FacilitiesForUserCompleted;
        
        /// <remarks/>
        public event SetCredentialsLegacyCompletedEventHandler SetCredentialsLegacyCompleted;
        
        /// <remarks/>
        public event DeleteCredentialsLegacyCompletedEventHandler DeleteCredentialsLegacyCompleted;
        
        /// <remarks/>
        public event LastLogonByUserLegacyCompletedEventHandler LastLogonByUserLegacyCompleted;
        
        /// <remarks/>
        public event LastLogoutByUserLegacyCompletedEventHandler LastLogoutByUserLegacyCompleted;
        
        /// <remarks/>
        public event LogPasswordChangeCompletedEventHandler LogPasswordChangeCompleted;
        
        /// <remarks/>
        public event UserPrivilegeForLegacyCompletedEventHandler UserPrivilegeForLegacyCompleted;
        
        /// <remarks/>
        public event LoadLegacyIDsForUserCompletedEventHandler LoadLegacyIDsForUserCompleted;
        
        /// <remarks/>
        public event LoadSecurityAccessCompletedEventHandler LoadSecurityAccessCompleted;
        
        /// <remarks/>
        public event LoadSecurityAccessForAppCompletedEventHandler LoadSecurityAccessForAppCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthenticateUser(string upn, string password, string appGuid, string accessKey) {
            object[] results = this.Invoke("AuthenticateUser", new object[] {
                        upn,
                        password,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthenticateUser(string upn, string password, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthenticateUser", new object[] {
                        upn,
                        password,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAuthenticateUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string upn, string password, string appGuid, string accessKey) {
            this.AuthenticateUserAsync(upn, password, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string upn, string password, string appGuid, string accessKey, object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[] {
                        upn,
                        password,
                        appGuid,
                        accessKey}, this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthenticateToken(string upn, string token, string appGuid, string accessKey) {
            object[] results = this.Invoke("AuthenticateToken", new object[] {
                        upn,
                        token,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthenticateToken(string upn, string token, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthenticateToken", new object[] {
                        upn,
                        token,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAuthenticateToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateTokenAsync(string upn, string token, string appGuid, string accessKey) {
            this.AuthenticateTokenAsync(upn, token, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AuthenticateTokenAsync(string upn, string token, string appGuid, string accessKey, object userState) {
            if ((this.AuthenticateTokenOperationCompleted == null)) {
                this.AuthenticateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateTokenOperationCompleted);
            }
            this.InvokeAsync("AuthenticateToken", new object[] {
                        upn,
                        token,
                        appGuid,
                        accessKey}, this.AuthenticateTokenOperationCompleted, userState);
        }
        
        private void OnAuthenticateTokenOperationCompleted(object arg) {
            if ((this.AuthenticateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateTokenCompleted(this, new AuthenticateTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserPrivilegeForPortal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserPrivilegeForPortal(string upn, string password, string appNames, string appGuid, string accessKey) {
            object[] results = this.Invoke("UserPrivilegeForPortal", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserPrivilegeForPortal(string upn, string password, string appNames, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserPrivilegeForPortal", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUserPrivilegeForPortal(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserPrivilegeForPortalAsync(string upn, string password, string appNames, string appGuid, string accessKey) {
            this.UserPrivilegeForPortalAsync(upn, password, appNames, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UserPrivilegeForPortalAsync(string upn, string password, string appNames, string appGuid, string accessKey, object userState) {
            if ((this.UserPrivilegeForPortalOperationCompleted == null)) {
                this.UserPrivilegeForPortalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPrivilegeForPortalOperationCompleted);
            }
            this.InvokeAsync("UserPrivilegeForPortal", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey}, this.UserPrivilegeForPortalOperationCompleted, userState);
        }
        
        private void OnUserPrivilegeForPortalOperationCompleted(object arg) {
            if ((this.UserPrivilegeForPortalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPrivilegeForPortalCompleted(this, new UserPrivilegeForPortalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrivilegesForPortalUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrivilegesForPortalUser(string upn, string password, string privilegeType, string appGuid, string accessKey) {
            object[] results = this.Invoke("PrivilegesForPortalUser", new object[] {
                        upn,
                        password,
                        privilegeType,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrivilegesForPortalUser(string upn, string password, string privilegeType, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PrivilegesForPortalUser", new object[] {
                        upn,
                        password,
                        privilegeType,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPrivilegesForPortalUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegesForPortalUserAsync(string upn, string password, string privilegeType, string appGuid, string accessKey) {
            this.PrivilegesForPortalUserAsync(upn, password, privilegeType, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void PrivilegesForPortalUserAsync(string upn, string password, string privilegeType, string appGuid, string accessKey, object userState) {
            if ((this.PrivilegesForPortalUserOperationCompleted == null)) {
                this.PrivilegesForPortalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegesForPortalUserOperationCompleted);
            }
            this.InvokeAsync("PrivilegesForPortalUser", new object[] {
                        upn,
                        password,
                        privilegeType,
                        appGuid,
                        accessKey}, this.PrivilegesForPortalUserOperationCompleted, userState);
        }
        
        private void OnPrivilegesForPortalUserOperationCompleted(object arg) {
            if ((this.PrivilegesForPortalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegesForPortalUserCompleted(this, new PrivilegesForPortalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserPrivilegesForCache", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserPrivilegesForCache(string upn, string password, string appNames, string appGuid, string accessKey) {
            object[] results = this.Invoke("UserPrivilegesForCache", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserPrivilegesForCache(string upn, string password, string appNames, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserPrivilegesForCache", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUserPrivilegesForCache(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserPrivilegesForCacheAsync(string upn, string password, string appNames, string appGuid, string accessKey) {
            this.UserPrivilegesForCacheAsync(upn, password, appNames, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UserPrivilegesForCacheAsync(string upn, string password, string appNames, string appGuid, string accessKey, object userState) {
            if ((this.UserPrivilegesForCacheOperationCompleted == null)) {
                this.UserPrivilegesForCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPrivilegesForCacheOperationCompleted);
            }
            this.InvokeAsync("UserPrivilegesForCache", new object[] {
                        upn,
                        password,
                        appNames,
                        appGuid,
                        accessKey}, this.UserPrivilegesForCacheOperationCompleted, userState);
        }
        
        private void OnUserPrivilegesForCacheOperationCompleted(object arg) {
            if ((this.UserPrivilegesForCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPrivilegesForCacheCompleted(this, new UserPrivilegesForCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserPrivilegeFor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserPrivilegeFor(string upn, string appName, string appRoleName, string appGuid, string accessKey) {
            object[] results = this.Invoke("UserPrivilegeFor", new object[] {
                        upn,
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserPrivilegeFor(string upn, string appName, string appRoleName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserPrivilegeFor", new object[] {
                        upn,
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUserPrivilegeFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserPrivilegeForAsync(string upn, string appName, string appRoleName, string appGuid, string accessKey) {
            this.UserPrivilegeForAsync(upn, appName, appRoleName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UserPrivilegeForAsync(string upn, string appName, string appRoleName, string appGuid, string accessKey, object userState) {
            if ((this.UserPrivilegeForOperationCompleted == null)) {
                this.UserPrivilegeForOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPrivilegeForOperationCompleted);
            }
            this.InvokeAsync("UserPrivilegeFor", new object[] {
                        upn,
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey}, this.UserPrivilegeForOperationCompleted, userState);
        }
        
        private void OnUserPrivilegeForOperationCompleted(object arg) {
            if ((this.UserPrivilegeForCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPrivilegeForCompleted(this, new UserPrivilegeForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserPrivilegesForImpersonate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserPrivilegesForImpersonate(string impersonateUPN, string upn, string password, string appNames, string appRoleNames, string appGuid, string accessKey) {
            object[] results = this.Invoke("UserPrivilegesForImpersonate", new object[] {
                        impersonateUPN,
                        upn,
                        password,
                        appNames,
                        appRoleNames,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserPrivilegesForImpersonate(string impersonateUPN, string upn, string password, string appNames, string appRoleNames, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserPrivilegesForImpersonate", new object[] {
                        impersonateUPN,
                        upn,
                        password,
                        appNames,
                        appRoleNames,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUserPrivilegesForImpersonate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserPrivilegesForImpersonateAsync(string impersonateUPN, string upn, string password, string appNames, string appRoleNames, string appGuid, string accessKey) {
            this.UserPrivilegesForImpersonateAsync(impersonateUPN, upn, password, appNames, appRoleNames, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UserPrivilegesForImpersonateAsync(string impersonateUPN, string upn, string password, string appNames, string appRoleNames, string appGuid, string accessKey, object userState) {
            if ((this.UserPrivilegesForImpersonateOperationCompleted == null)) {
                this.UserPrivilegesForImpersonateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPrivilegesForImpersonateOperationCompleted);
            }
            this.InvokeAsync("UserPrivilegesForImpersonate", new object[] {
                        impersonateUPN,
                        upn,
                        password,
                        appNames,
                        appRoleNames,
                        appGuid,
                        accessKey}, this.UserPrivilegesForImpersonateOperationCompleted, userState);
        }
        
        private void OnUserPrivilegesForImpersonateOperationCompleted(object arg) {
            if ((this.UserPrivilegesForImpersonateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPrivilegesForImpersonateCompleted(this, new UserPrivilegesForImpersonateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPrivilege", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPrivilege(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("AddPrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPrivilege(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddPrivilege(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPrivilegeAsync(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey) {
            this.AddPrivilegeAsync(uniqueID, appRoleName, hspCD, levelCD, permissionCD, orgTypeCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AddPrivilegeAsync(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey, object userState) {
            if ((this.AddPrivilegeOperationCompleted == null)) {
                this.AddPrivilegeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrivilegeOperationCompleted);
            }
            this.InvokeAsync("AddPrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey}, this.AddPrivilegeOperationCompleted, userState);
        }
        
        private void OnAddPrivilegeOperationCompleted(object arg) {
            if ((this.AddPrivilegeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrivilegeCompleted(this, new AddPrivilegeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePrivilege", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeletePrivilege(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("DeletePrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePrivilege(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeletePrivilege(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePrivilegeAsync(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey) {
            this.DeletePrivilegeAsync(uniqueID, appRoleName, hspCD, levelCD, permissionCD, orgTypeCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void DeletePrivilegeAsync(string uniqueID, string appRoleName, string hspCD, string levelCD, string permissionCD, string orgTypeCD, string appGuid, string accessKey, object userState) {
            if ((this.DeletePrivilegeOperationCompleted == null)) {
                this.DeletePrivilegeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePrivilegeOperationCompleted);
            }
            this.InvokeAsync("DeletePrivilege", new object[] {
                        uniqueID,
                        appRoleName,
                        hspCD,
                        levelCD,
                        permissionCD,
                        orgTypeCD,
                        appGuid,
                        accessKey}, this.DeletePrivilegeOperationCompleted, userState);
        }
        
        private void OnDeletePrivilegeOperationCompleted(object arg) {
            if ((this.DeletePrivilegeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePrivilegeCompleted(this, new DeletePrivilegeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersForApp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UsersForApp(string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("UsersForApp", new object[] {
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUsersForApp(string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UsersForApp", new object[] {
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUsersForApp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UsersForAppAsync(string appName, string appGuid, string accessKey) {
            this.UsersForAppAsync(appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UsersForAppAsync(string appName, string appGuid, string accessKey, object userState) {
            if ((this.UsersForAppOperationCompleted == null)) {
                this.UsersForAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersForAppOperationCompleted);
            }
            this.InvokeAsync("UsersForApp", new object[] {
                        appName,
                        appGuid,
                        accessKey}, this.UsersForAppOperationCompleted, userState);
        }
        
        private void OnUsersForAppOperationCompleted(object arg) {
            if ((this.UsersForAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersForAppCompleted(this, new UsersForAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersForAppRole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UsersForAppRole(string appName, string appRoleName, string appGuid, string accessKey) {
            object[] results = this.Invoke("UsersForAppRole", new object[] {
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUsersForAppRole(string appName, string appRoleName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UsersForAppRole", new object[] {
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUsersForAppRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UsersForAppRoleAsync(string appName, string appRoleName, string appGuid, string accessKey) {
            this.UsersForAppRoleAsync(appName, appRoleName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UsersForAppRoleAsync(string appName, string appRoleName, string appGuid, string accessKey, object userState) {
            if ((this.UsersForAppRoleOperationCompleted == null)) {
                this.UsersForAppRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersForAppRoleOperationCompleted);
            }
            this.InvokeAsync("UsersForAppRole", new object[] {
                        appName,
                        appRoleName,
                        appGuid,
                        accessKey}, this.UsersForAppRoleOperationCompleted, userState);
        }
        
        private void OnUsersForAppRoleOperationCompleted(object arg) {
            if ((this.UsersForAppRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersForAppRoleCompleted(this, new UsersForAppRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersForAppRoleFacility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UsersForAppRoleFacility(string appName, string appRoleName, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("UsersForAppRoleFacility", new object[] {
                        appName,
                        appRoleName,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUsersForAppRoleFacility(string appName, string appRoleName, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UsersForAppRoleFacility", new object[] {
                        appName,
                        appRoleName,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUsersForAppRoleFacility(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UsersForAppRoleFacilityAsync(string appName, string appRoleName, string hspCD, string appGuid, string accessKey) {
            this.UsersForAppRoleFacilityAsync(appName, appRoleName, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UsersForAppRoleFacilityAsync(string appName, string appRoleName, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.UsersForAppRoleFacilityOperationCompleted == null)) {
                this.UsersForAppRoleFacilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersForAppRoleFacilityOperationCompleted);
            }
            this.InvokeAsync("UsersForAppRoleFacility", new object[] {
                        appName,
                        appRoleName,
                        hspCD,
                        appGuid,
                        accessKey}, this.UsersForAppRoleFacilityOperationCompleted, userState);
        }
        
        private void OnUsersForAppRoleFacilityOperationCompleted(object arg) {
            if ((this.UsersForAppRoleFacilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersForAppRoleFacilityCompleted(this, new UsersForAppRoleFacilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsersForFacility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UsersForFacility(string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("UsersForFacility", new object[] {
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUsersForFacility(string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UsersForFacility", new object[] {
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUsersForFacility(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UsersForFacilityAsync(string hspCD, string appGuid, string accessKey) {
            this.UsersForFacilityAsync(hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UsersForFacilityAsync(string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.UsersForFacilityOperationCompleted == null)) {
                this.UsersForFacilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsersForFacilityOperationCompleted);
            }
            this.InvokeAsync("UsersForFacility", new object[] {
                        hspCD,
                        appGuid,
                        accessKey}, this.UsersForFacilityOperationCompleted, userState);
        }
        
        private void OnUsersForFacilityOperationCompleted(object arg) {
            if ((this.UsersForFacilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsersForFacilityCompleted(this, new UsersForFacilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppToAppAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppToAppAccess(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppToAppAccess", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppToAppAccess(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppToAppAccess", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppToAppAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppToAppAccessAsync(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey) {
            this.AppToAppAccessAsync(callingAppGUID, calledAppGUID, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppToAppAccessAsync(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey, object userState) {
            if ((this.AppToAppAccessOperationCompleted == null)) {
                this.AppToAppAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppToAppAccessOperationCompleted);
            }
            this.InvokeAsync("AppToAppAccess", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey}, this.AppToAppAccessOperationCompleted, userState);
        }
        
        private void OnAppToAppAccessOperationCompleted(object arg) {
            if ((this.AppToAppAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppToAppAccessCompleted(this, new AppToAppAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppToAppAccessDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppToAppAccessDetail(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppToAppAccessDetail", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppToAppAccessDetail(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppToAppAccessDetail", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppToAppAccessDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppToAppAccessDetailAsync(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey) {
            this.AppToAppAccessDetailAsync(callingAppGUID, calledAppGUID, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppToAppAccessDetailAsync(string callingAppGUID, string calledAppGUID, string appGuid, string accessKey, object userState) {
            if ((this.AppToAppAccessDetailOperationCompleted == null)) {
                this.AppToAppAccessDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppToAppAccessDetailOperationCompleted);
            }
            this.InvokeAsync("AppToAppAccessDetail", new object[] {
                        callingAppGUID,
                        calledAppGUID,
                        appGuid,
                        accessKey}, this.AppToAppAccessDetailOperationCompleted, userState);
        }
        
        private void OnAppToAppAccessDetailOperationCompleted(object arg) {
            if ((this.AppToAppAccessDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppToAppAccessDetailCompleted(this, new AppToAppAccessDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppAccess(string upn, string password, string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppAccess", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppAccess(string upn, string password, string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppAccess", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppAccessAsync(string upn, string password, string appName, string appGuid, string accessKey) {
            this.AppAccessAsync(upn, password, appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppAccessAsync(string upn, string password, string appName, string appGuid, string accessKey, object userState) {
            if ((this.AppAccessOperationCompleted == null)) {
                this.AppAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppAccessOperationCompleted);
            }
            this.InvokeAsync("AppAccess", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey}, this.AppAccessOperationCompleted, userState);
        }
        
        private void OnAppAccessOperationCompleted(object arg) {
            if ((this.AppAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppAccessCompleted(this, new AppAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppNamed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppNamed(string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppNamed", new object[] {
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppNamed(string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppNamed", new object[] {
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppNamed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppNamedAsync(string appName, string appGuid, string accessKey) {
            this.AppNamedAsync(appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppNamedAsync(string appName, string appGuid, string accessKey, object userState) {
            if ((this.AppNamedOperationCompleted == null)) {
                this.AppNamedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppNamedOperationCompleted);
            }
            this.InvokeAsync("AppNamed", new object[] {
                        appName,
                        appGuid,
                        accessKey}, this.AppNamedOperationCompleted, userState);
        }
        
        private void OnAppNamedOperationCompleted(object arg) {
            if ((this.AppNamedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppNamedCompleted(this, new AppNamedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApplicationHierarchy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApplicationHierarchy(string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("ApplicationHierarchy", new object[] {
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginApplicationHierarchy(string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ApplicationHierarchy", new object[] {
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndApplicationHierarchy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplicationHierarchyAsync(string appName, string appGuid, string accessKey) {
            this.ApplicationHierarchyAsync(appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void ApplicationHierarchyAsync(string appName, string appGuid, string accessKey, object userState) {
            if ((this.ApplicationHierarchyOperationCompleted == null)) {
                this.ApplicationHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplicationHierarchyOperationCompleted);
            }
            this.InvokeAsync("ApplicationHierarchy", new object[] {
                        appName,
                        appGuid,
                        accessKey}, this.ApplicationHierarchyOperationCompleted, userState);
        }
        
        private void OnApplicationHierarchyOperationCompleted(object arg) {
            if ((this.ApplicationHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplicationHierarchyCompleted(this, new ApplicationHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppRoles(string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppRoles", new object[] {
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppRoles(string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppRoles", new object[] {
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppRolesAsync(string appName, string appGuid, string accessKey) {
            this.AppRolesAsync(appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppRolesAsync(string appName, string appGuid, string accessKey, object userState) {
            if ((this.AppRolesOperationCompleted == null)) {
                this.AppRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppRolesOperationCompleted);
            }
            this.InvokeAsync("AppRoles", new object[] {
                        appName,
                        appGuid,
                        accessKey}, this.AppRolesOperationCompleted, userState);
        }
        
        private void OnAppRolesOperationCompleted(object arg) {
            if ((this.AppRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppRolesCompleted(this, new AppRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppsForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppsForUser(string upn, string appGuid, string accessKey) {
            object[] results = this.Invoke("AppsForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppsForUser(string upn, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppsForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppsForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppsForUserAsync(string upn, string appGuid, string accessKey) {
            this.AppsForUserAsync(upn, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void AppsForUserAsync(string upn, string appGuid, string accessKey, object userState) {
            if ((this.AppsForUserOperationCompleted == null)) {
                this.AppsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppsForUserOperationCompleted);
            }
            this.InvokeAsync("AppsForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey}, this.AppsForUserOperationCompleted, userState);
        }
        
        private void OnAppsForUserOperationCompleted(object arg) {
            if ((this.AppsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppsForUserCompleted(this, new AppsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RoleAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RoleAccess(string upn, string password, string appRoleName, string appGuid, string accessKey) {
            object[] results = this.Invoke("RoleAccess", new object[] {
                        upn,
                        password,
                        appRoleName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRoleAccess(string upn, string password, string appRoleName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RoleAccess", new object[] {
                        upn,
                        password,
                        appRoleName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRoleAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RoleAccessAsync(string upn, string password, string appRoleName, string appGuid, string accessKey) {
            this.RoleAccessAsync(upn, password, appRoleName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void RoleAccessAsync(string upn, string password, string appRoleName, string appGuid, string accessKey, object userState) {
            if ((this.RoleAccessOperationCompleted == null)) {
                this.RoleAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleAccessOperationCompleted);
            }
            this.InvokeAsync("RoleAccess", new object[] {
                        upn,
                        password,
                        appRoleName,
                        appGuid,
                        accessKey}, this.RoleAccessOperationCompleted, userState);
        }
        
        private void OnRoleAccessOperationCompleted(object arg) {
            if ((this.RoleAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleAccessCompleted(this, new RoleAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RoleNamed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RoleNamed(string roleName, string appGuid, string accessKey) {
            object[] results = this.Invoke("RoleNamed", new object[] {
                        roleName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRoleNamed(string roleName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RoleNamed", new object[] {
                        roleName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRoleNamed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RoleNamedAsync(string roleName, string appGuid, string accessKey) {
            this.RoleNamedAsync(roleName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void RoleNamedAsync(string roleName, string appGuid, string accessKey, object userState) {
            if ((this.RoleNamedOperationCompleted == null)) {
                this.RoleNamedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleNamedOperationCompleted);
            }
            this.InvokeAsync("RoleNamed", new object[] {
                        roleName,
                        appGuid,
                        accessKey}, this.RoleNamedOperationCompleted, userState);
        }
        
        private void OnRoleNamedOperationCompleted(object arg) {
            if ((this.RoleNamedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleNamedCompleted(this, new RoleNamedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FacilitiesForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FacilitiesForUser(string upn, string appGuid, string accessKey) {
            object[] results = this.Invoke("FacilitiesForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFacilitiesForUser(string upn, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FacilitiesForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndFacilitiesForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FacilitiesForUserAsync(string upn, string appGuid, string accessKey) {
            this.FacilitiesForUserAsync(upn, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void FacilitiesForUserAsync(string upn, string appGuid, string accessKey, object userState) {
            if ((this.FacilitiesForUserOperationCompleted == null)) {
                this.FacilitiesForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacilitiesForUserOperationCompleted);
            }
            this.InvokeAsync("FacilitiesForUser", new object[] {
                        upn,
                        appGuid,
                        accessKey}, this.FacilitiesForUserOperationCompleted, userState);
        }
        
        private void OnFacilitiesForUserOperationCompleted(object arg) {
            if ((this.FacilitiesForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacilitiesForUserCompleted(this, new FacilitiesForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCredentialsLegacy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetCredentialsLegacy(string systemUserID, string systemPassword, string legacyUserID, string legacyUserPassword, string upn, string password, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("SetCredentialsLegacy", new object[] {
                        systemUserID,
                        systemPassword,
                        legacyUserID,
                        legacyUserPassword,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetCredentialsLegacy(string systemUserID, string systemPassword, string legacyUserID, string legacyUserPassword, string upn, string password, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetCredentialsLegacy", new object[] {
                        systemUserID,
                        systemPassword,
                        legacyUserID,
                        legacyUserPassword,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSetCredentialsLegacy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetCredentialsLegacyAsync(string systemUserID, string systemPassword, string legacyUserID, string legacyUserPassword, string upn, string password, string hspCD, string appGuid, string accessKey) {
            this.SetCredentialsLegacyAsync(systemUserID, systemPassword, legacyUserID, legacyUserPassword, upn, password, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void SetCredentialsLegacyAsync(string systemUserID, string systemPassword, string legacyUserID, string legacyUserPassword, string upn, string password, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.SetCredentialsLegacyOperationCompleted == null)) {
                this.SetCredentialsLegacyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCredentialsLegacyOperationCompleted);
            }
            this.InvokeAsync("SetCredentialsLegacy", new object[] {
                        systemUserID,
                        systemPassword,
                        legacyUserID,
                        legacyUserPassword,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, this.SetCredentialsLegacyOperationCompleted, userState);
        }
        
        private void OnSetCredentialsLegacyOperationCompleted(object arg) {
            if ((this.SetCredentialsLegacyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCredentialsLegacyCompleted(this, new SetCredentialsLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCredentialsLegacy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteCredentialsLegacy(string systemUserID, string legacyUserID, string upn, string password, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("DeleteCredentialsLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCredentialsLegacy(string systemUserID, string legacyUserID, string upn, string password, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCredentialsLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeleteCredentialsLegacy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCredentialsLegacyAsync(string systemUserID, string legacyUserID, string upn, string password, string hspCD, string appGuid, string accessKey) {
            this.DeleteCredentialsLegacyAsync(systemUserID, legacyUserID, upn, password, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void DeleteCredentialsLegacyAsync(string systemUserID, string legacyUserID, string upn, string password, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.DeleteCredentialsLegacyOperationCompleted == null)) {
                this.DeleteCredentialsLegacyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCredentialsLegacyOperationCompleted);
            }
            this.InvokeAsync("DeleteCredentialsLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, this.DeleteCredentialsLegacyOperationCompleted, userState);
        }
        
        private void OnDeleteCredentialsLegacyOperationCompleted(object arg) {
            if ((this.DeleteCredentialsLegacyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCredentialsLegacyCompleted(this, new DeleteCredentialsLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LastLogonByUserLegacy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LastLogonByUserLegacy(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("LastLogonByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLastLogonByUserLegacy(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LastLogonByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLastLogonByUserLegacy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LastLogonByUserLegacyAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            this.LastLogonByUserLegacyAsync(systemUserID, legacyUserID, lastLogonDate, upn, password, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void LastLogonByUserLegacyAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.LastLogonByUserLegacyOperationCompleted == null)) {
                this.LastLogonByUserLegacyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLastLogonByUserLegacyOperationCompleted);
            }
            this.InvokeAsync("LastLogonByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, this.LastLogonByUserLegacyOperationCompleted, userState);
        }
        
        private void OnLastLogonByUserLegacyOperationCompleted(object arg) {
            if ((this.LastLogonByUserLegacyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LastLogonByUserLegacyCompleted(this, new LastLogonByUserLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LastLogoutByUserLegacy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LastLogoutByUserLegacy(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("LastLogoutByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLastLogoutByUserLegacy(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LastLogoutByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLastLogoutByUserLegacy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LastLogoutByUserLegacyAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            this.LastLogoutByUserLegacyAsync(systemUserID, legacyUserID, lastLogonDate, upn, password, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void LastLogoutByUserLegacyAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.LastLogoutByUserLegacyOperationCompleted == null)) {
                this.LastLogoutByUserLegacyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLastLogoutByUserLegacyOperationCompleted);
            }
            this.InvokeAsync("LastLogoutByUserLegacy", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, this.LastLogoutByUserLegacyOperationCompleted, userState);
        }
        
        private void OnLastLogoutByUserLegacyOperationCompleted(object arg) {
            if ((this.LastLogoutByUserLegacyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LastLogoutByUserLegacyCompleted(this, new LastLogoutByUserLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogPasswordChange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogPasswordChange(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            object[] results = this.Invoke("LogPasswordChange", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogPasswordChange(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogPasswordChange", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLogPasswordChange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogPasswordChangeAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey) {
            this.LogPasswordChangeAsync(systemUserID, legacyUserID, lastLogonDate, upn, password, hspCD, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void LogPasswordChangeAsync(string systemUserID, string legacyUserID, string lastLogonDate, string upn, string password, string hspCD, string appGuid, string accessKey, object userState) {
            if ((this.LogPasswordChangeOperationCompleted == null)) {
                this.LogPasswordChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogPasswordChangeOperationCompleted);
            }
            this.InvokeAsync("LogPasswordChange", new object[] {
                        systemUserID,
                        legacyUserID,
                        lastLogonDate,
                        upn,
                        password,
                        hspCD,
                        appGuid,
                        accessKey}, this.LogPasswordChangeOperationCompleted, userState);
        }
        
        private void OnLogPasswordChangeOperationCompleted(object arg) {
            if ((this.LogPasswordChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogPasswordChangeCompleted(this, new LogPasswordChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserPrivilegeForLegacy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserPrivilegeForLegacy(string upn, string password, string appName, string appGuid, string accessKey) {
            object[] results = this.Invoke("UserPrivilegeForLegacy", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserPrivilegeForLegacy(string upn, string password, string appName, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserPrivilegeForLegacy", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUserPrivilegeForLegacy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserPrivilegeForLegacyAsync(string upn, string password, string appName, string appGuid, string accessKey) {
            this.UserPrivilegeForLegacyAsync(upn, password, appName, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void UserPrivilegeForLegacyAsync(string upn, string password, string appName, string appGuid, string accessKey, object userState) {
            if ((this.UserPrivilegeForLegacyOperationCompleted == null)) {
                this.UserPrivilegeForLegacyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPrivilegeForLegacyOperationCompleted);
            }
            this.InvokeAsync("UserPrivilegeForLegacy", new object[] {
                        upn,
                        password,
                        appName,
                        appGuid,
                        accessKey}, this.UserPrivilegeForLegacyOperationCompleted, userState);
        }
        
        private void OnUserPrivilegeForLegacyOperationCompleted(object arg) {
            if ((this.UserPrivilegeForLegacyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPrivilegeForLegacyCompleted(this, new UserPrivilegeForLegacyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadLegacyIDsForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadLegacyIDsForUser(string upn, string password, string lookupUser, string appNames, string appGuid, string accessKey) {
            object[] results = this.Invoke("LoadLegacyIDsForUser", new object[] {
                        upn,
                        password,
                        lookupUser,
                        appNames,
                        appGuid,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoadLegacyIDsForUser(string upn, string password, string lookupUser, string appNames, string appGuid, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoadLegacyIDsForUser", new object[] {
                        upn,
                        password,
                        lookupUser,
                        appNames,
                        appGuid,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLoadLegacyIDsForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadLegacyIDsForUserAsync(string upn, string password, string lookupUser, string appNames, string appGuid, string accessKey) {
            this.LoadLegacyIDsForUserAsync(upn, password, lookupUser, appNames, appGuid, accessKey, null);
        }
        
        /// <remarks/>
        public void LoadLegacyIDsForUserAsync(string upn, string password, string lookupUser, string appNames, string appGuid, string accessKey, object userState) {
            if ((this.LoadLegacyIDsForUserOperationCompleted == null)) {
                this.LoadLegacyIDsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadLegacyIDsForUserOperationCompleted);
            }
            this.InvokeAsync("LoadLegacyIDsForUser", new object[] {
                        upn,
                        password,
                        lookupUser,
                        appNames,
                        appGuid,
                        accessKey}, this.LoadLegacyIDsForUserOperationCompleted, userState);
        }
        
        private void OnLoadLegacyIDsForUserOperationCompleted(object arg) {
            if ((this.LoadLegacyIDsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadLegacyIDsForUserCompleted(this, new LoadLegacyIDsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadSecurityAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadSecurityAccess(string uniqueID, string upn, string eventTypeCD, string appGUID, string accessKey) {
            object[] results = this.Invoke("LoadSecurityAccess", new object[] {
                        uniqueID,
                        upn,
                        eventTypeCD,
                        appGUID,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoadSecurityAccess(string uniqueID, string upn, string eventTypeCD, string appGUID, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoadSecurityAccess", new object[] {
                        uniqueID,
                        upn,
                        eventTypeCD,
                        appGUID,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLoadSecurityAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadSecurityAccessAsync(string uniqueID, string upn, string eventTypeCD, string appGUID, string accessKey) {
            this.LoadSecurityAccessAsync(uniqueID, upn, eventTypeCD, appGUID, accessKey, null);
        }
        
        /// <remarks/>
        public void LoadSecurityAccessAsync(string uniqueID, string upn, string eventTypeCD, string appGUID, string accessKey, object userState) {
            if ((this.LoadSecurityAccessOperationCompleted == null)) {
                this.LoadSecurityAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSecurityAccessOperationCompleted);
            }
            this.InvokeAsync("LoadSecurityAccess", new object[] {
                        uniqueID,
                        upn,
                        eventTypeCD,
                        appGUID,
                        accessKey}, this.LoadSecurityAccessOperationCompleted, userState);
        }
        
        private void OnLoadSecurityAccessOperationCompleted(object arg) {
            if ((this.LoadSecurityAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSecurityAccessCompleted(this, new LoadSecurityAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadSecurityAccessForApp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadSecurityAccessForApp(string uniqueID, string upn, string appName, string eventTypeCD, string appGUID, string accessKey) {
            object[] results = this.Invoke("LoadSecurityAccessForApp", new object[] {
                        uniqueID,
                        upn,
                        appName,
                        eventTypeCD,
                        appGUID,
                        accessKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoadSecurityAccessForApp(string uniqueID, string upn, string appName, string eventTypeCD, string appGUID, string accessKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoadSecurityAccessForApp", new object[] {
                        uniqueID,
                        upn,
                        appName,
                        eventTypeCD,
                        appGUID,
                        accessKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLoadSecurityAccessForApp(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadSecurityAccessForAppAsync(string uniqueID, string upn, string appName, string eventTypeCD, string appGUID, string accessKey) {
            this.LoadSecurityAccessForAppAsync(uniqueID, upn, appName, eventTypeCD, appGUID, accessKey, null);
        }
        
        /// <remarks/>
        public void LoadSecurityAccessForAppAsync(string uniqueID, string upn, string appName, string eventTypeCD, string appGUID, string accessKey, object userState) {
            if ((this.LoadSecurityAccessForAppOperationCompleted == null)) {
                this.LoadSecurityAccessForAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadSecurityAccessForAppOperationCompleted);
            }
            this.InvokeAsync("LoadSecurityAccessForApp", new object[] {
                        uniqueID,
                        upn,
                        appName,
                        eventTypeCD,
                        appGUID,
                        accessKey}, this.LoadSecurityAccessForAppOperationCompleted, userState);
        }
        
        private void OnLoadSecurityAccessForAppOperationCompleted(object arg) {
            if ((this.LoadSecurityAccessForAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadSecurityAccessForAppCompleted(this, new LoadSecurityAccessForAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AuthenticateTokenCompletedEventHandler(object sender, AuthenticateTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserPrivilegeForPortalCompletedEventHandler(object sender, UserPrivilegeForPortalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPrivilegeForPortalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPrivilegeForPortalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PrivilegesForPortalUserCompletedEventHandler(object sender, PrivilegesForPortalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegesForPortalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegesForPortalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserPrivilegesForCacheCompletedEventHandler(object sender, UserPrivilegesForCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPrivilegesForCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPrivilegesForCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserPrivilegeForCompletedEventHandler(object sender, UserPrivilegeForCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPrivilegeForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPrivilegeForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserPrivilegesForImpersonateCompletedEventHandler(object sender, UserPrivilegesForImpersonateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPrivilegesForImpersonateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPrivilegesForImpersonateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddPrivilegeCompletedEventHandler(object sender, AddPrivilegeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPrivilegeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPrivilegeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeletePrivilegeCompletedEventHandler(object sender, DeletePrivilegeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePrivilegeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePrivilegeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UsersForAppCompletedEventHandler(object sender, UsersForAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersForAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersForAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UsersForAppRoleCompletedEventHandler(object sender, UsersForAppRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersForAppRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersForAppRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UsersForAppRoleFacilityCompletedEventHandler(object sender, UsersForAppRoleFacilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersForAppRoleFacilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersForAppRoleFacilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UsersForFacilityCompletedEventHandler(object sender, UsersForFacilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsersForFacilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsersForFacilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppToAppAccessCompletedEventHandler(object sender, AppToAppAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppToAppAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppToAppAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppToAppAccessDetailCompletedEventHandler(object sender, AppToAppAccessDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppToAppAccessDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppToAppAccessDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppAccessCompletedEventHandler(object sender, AppAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppNamedCompletedEventHandler(object sender, AppNamedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppNamedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppNamedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ApplicationHierarchyCompletedEventHandler(object sender, ApplicationHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicationHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplicationHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppRolesCompletedEventHandler(object sender, AppRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AppsForUserCompletedEventHandler(object sender, AppsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RoleAccessCompletedEventHandler(object sender, RoleAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RoleNamedCompletedEventHandler(object sender, RoleNamedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleNamedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleNamedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FacilitiesForUserCompletedEventHandler(object sender, FacilitiesForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacilitiesForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacilitiesForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetCredentialsLegacyCompletedEventHandler(object sender, SetCredentialsLegacyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCredentialsLegacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCredentialsLegacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteCredentialsLegacyCompletedEventHandler(object sender, DeleteCredentialsLegacyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCredentialsLegacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCredentialsLegacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LastLogonByUserLegacyCompletedEventHandler(object sender, LastLogonByUserLegacyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LastLogonByUserLegacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LastLogonByUserLegacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LastLogoutByUserLegacyCompletedEventHandler(object sender, LastLogoutByUserLegacyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LastLogoutByUserLegacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LastLogoutByUserLegacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogPasswordChangeCompletedEventHandler(object sender, LogPasswordChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogPasswordChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogPasswordChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserPrivilegeForLegacyCompletedEventHandler(object sender, UserPrivilegeForLegacyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPrivilegeForLegacyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPrivilegeForLegacyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LoadLegacyIDsForUserCompletedEventHandler(object sender, LoadLegacyIDsForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadLegacyIDsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadLegacyIDsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LoadSecurityAccessCompletedEventHandler(object sender, LoadSecurityAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSecurityAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadSecurityAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LoadSecurityAccessForAppCompletedEventHandler(object sender, LoadSecurityAccessForAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadSecurityAccessForAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadSecurityAccessForAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591