<?xml version="1.0" encoding="utf-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd" logicalFilePath="SqlServer\Install\Functions\Utility.StringToArray.xml">
  <changeSet id="1" author="Jon.Lent">
    <comment>
      Create Utility.StringToArray()      
    </comment>
    <createProcedure><![CDATA[
      /*
        TSQL String Array Workbench
        16 March 2008
        by Robyn Page and Phil Factor
        http://www.simple-talk.com/sql/t-sql-programming/tsql-string-array-workbench/
      
        This function returns an XML version of a list with the sequence number
        and the value of each element as an XML fragment StringToArray() takes a 
        varchar(max) list with whatever delimiter you wish. The second value is 
        the delimiter      
      */
      CREATE FUNCTION Utility.StringToArray( @StringArray VARCHAR(8000), 
                                             @Delimiter VARCHAR(10) = ',' )
      RETURNS XML
      AS 
      BEGIN
        
        DECLARE @results TABLE
           (
            seqno INT IDENTITY(1, 1),-- the sequence is meaningful here
            Item VARCHAR(MAX)
           )
        DECLARE @Next INT
        DECLARE @lenStringArray INT
        DECLARE @lenDelimiter INT
        DECLARE @ii INT
        DECLARE @xml XML

        SELECT   @ii = 0, @lenStringArray = LEN(REPLACE(@StringArray, ' ', '|')),
                 @lenDelimiter = LEN(REPLACE(@Delimiter, ' ', '|'))

        WHILE @ii <= @lenStringArray+1--while there is another list element
           BEGIN
              SELECT   @next = CHARINDEX(@Delimiter, @StringArray + @Delimiter,
                                        @ii)
              INSERT   INTO @Results
                       (Item)
                       SELECT   SUBSTRING(@StringArray, @ii, @Next - @ii)
              SELECT   @ii = @Next + @lenDelimiter
           END	
        SELECT   @xml = ( SELECT seqno,
                              item
                       FROM   @results
                     FOR
                       XML PATH('element'),
                           TYPE,
                           ELEMENTS,
                           ROOT('stringarray')
                     )
        RETURN @xml
      END;
    ]]></createProcedure>
    <sql>
      GRANT EXECUTE ON Utility.StringToArray TO db_apionly;
    </sql>
    <rollback>
      REVOKE EXECUTE ON Utility.StringToArray FROM db_apionly;
      DROP PROCEDURE Utility.StringToArray;
    </rollback>
  </changeSet>
</databaseChangeLog>