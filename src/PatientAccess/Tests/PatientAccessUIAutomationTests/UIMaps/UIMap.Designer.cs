// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PatientAccess
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertThatLogonWasSuccessful - Use 'AssertThatLogonWasSuccessfulExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertThatLogonWasSuccessful()
        {
            #region Variable Declarations
            WinWindow uIPatientAccessWindow = this.UIPatientAccessWindow;
            #endregion

            // Verify that 'Patient Access' window's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AssertThatLogonWasSuccessfulExpectedValues.UIPatientAccessWindowEnabled, uIPatientAccessWindow.Enabled);

            // Verify that 'Patient Access' window's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertThatLogonWasSuccessfulExpectedValues.UIPatientAccessWindowExists, uIPatientAccessWindow.Exists);

            // Verify that 'Patient Access' window's property 'Restored' equals 'True'
            Assert.AreEqual(this.AssertThatLogonWasSuccessfulExpectedValues.UIPatientAccessWindowRestored, uIPatientAccessWindow.Restored);
        }
        
        /// <summary>
        /// Logon - Use 'LogonParams' to pass parameters into this method.
        /// </summary>
        public void Logon()
        {
            #region Variable Declarations
            WinEdit uITxtUserNameEdit = this.UIPatientAccessLogOnWindow.UITxtUserNameWindow.UITxtUserNameEdit;
            WinEdit uITxtPasswordEdit = this.UIPatientAccessLogOnWindow.UITxtPasswordWindow.UITxtPasswordEdit;
            WinButton uILogOnButton = this.UIPatientAccessLogOnWindow.UILogOnWindow.UILogOnButton;
            #endregion

            // Type 'patientaccess.user03' in 'txtUserName' text box
            uITxtUserNameEdit.Text = this.LogonParams.UITxtUserNameEditText;

            // Type '{Tab}' in 'txtUserName' text box
            Keyboard.SendKeys(uITxtUserNameEdit, this.LogonParams.UITxtUserNameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'txtPassword' text box
            Keyboard.SendKeys(uITxtPasswordEdit, this.LogonParams.UITxtPasswordEditSendKeys, true);

            // Click '&Log On' button
            Mouse.Click(uILogOnButton, new Point(60, 12));
        }
        
        /// <summary>
        /// VerifyLogonScreenIsVisible
        /// </summary>
        public void VerifyLogonScreenIsVisible()
        {
            #region Variable Declarations
            WinTitleBar uIPatientAccessLogOnTitleBar = this.UIPatientAccessLogOnWindow.UIPatientAccessLogOnTitleBar;
            #endregion

            // Click 'Patient Access Log On' title bar
            Mouse.Click(uIPatientAccessLogOnTitleBar, new Point(108, 13));
        }
        
        /// <summary>
        /// ClickShortRegistration
        /// </summary>
        public void ClickShortRegistration()
        {
            #region Variable Declarations
            WinMenuItem uIRegisterDiagnosticOuMenuItem = this.UIPatientAccessWindow.UIPatientAccessViewMenuBar.UIRegisterMenuItem.UIRegisterDiagnosticOuMenuItem;
            #endregion

            // Click 'Register' -> 'Register Diagnostic Outpatient (Short Reg)' menu item
            Mouse.Click(uIRegisterDiagnosticOuMenuItem, new Point(62, 9));
        }
        
        /// <summary>
        /// SearchToCreateNewPatient - Use 'SearchToCreateNewPatientParams' to pass parameters into this method.
        /// </summary>
        public void SearchToCreateNewPatient()
        {
            #region Variable Declarations
            WinEdit uIMtbAccountEdit = this.UIPatientAccessWindow.UIMtbAccountWindow.UIMtbAccountEdit;
            WinButton uISearchButton = this.UIPatientAccessWindow.UISearchWindow.UISearchButton;
            #endregion

            // Type '1' in 'mtbAccount' text box
            uIMtbAccountEdit.Text = this.SearchToCreateNewPatientParams.UIMtbAccountEditText;

            // Click 'Sear&ch' button
            Mouse.Click(uISearchButton, new Point(48, 13));
        }
        
        /// <summary>
        /// ClickCreateNewPatient
        /// </summary>
        public void ClickCreateNewPatient()
        {
            #region Variable Declarations
            WinButton uICreateNewPatientButton = this.UIPatientAccessWindow.UICreateNewPatientWindow.UICreateNewPatientButton;
            #endregion

            // Click 'Cre&ate New Patient...' button
            Mouse.Click(uICreateNewPatientButton, new Point(97, 11));
        }
        
        /// <summary>
        /// AssertThatTheShortAccountViewWasLoaded - Use 'AssertThatTheShortAccountViewWasLoadedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertThatTheShortAccountViewWasLoaded()
        {
            #region Variable Declarations
            WinClient uIShortAccountViewClient = this.UIPatientAccessWindow.UIShortAccountViewWindow.UIShortAccountViewClient;
            #endregion

            // Verify that 'ShortAccountView' client's property 'ControlName' equals 'ShortAccountView'
            Assert.AreEqual(this.AssertThatTheShortAccountViewWasLoadedExpectedValues.UIShortAccountViewClientControlName, uIShortAccountViewClient.ControlName);

            // Verify that 'ShortAccountView' client's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertThatTheShortAccountViewWasLoadedExpectedValues.UIShortAccountViewClientExists, uIShortAccountViewClient.Exists);

            // Verify that 'ShortAccountView' client's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AssertThatTheShortAccountViewWasLoadedExpectedValues.UIShortAccountViewClientEnabled, uIShortAccountViewClient.Enabled);
        }
        
        /// <summary>
        /// CancelActivity
        /// </summary>
        public void CancelActivity()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPatientAccessWindow.UICancelWindow.UICancelButton;
            WinButton uIYesButton = this.UILeavinganIncompleteAWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(60, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(69, 8));
        }
        
        /// <summary>
        /// AssertThatTheCreateNewPatientButtonIsVisible - Use 'AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertThatTheCreateNewPatientButtonIsVisible()
        {
            #region Variable Declarations
            WinButton uICreateNewPatientButton = this.UIPatientAccessWindow.UICreateNewPatientWindow.UICreateNewPatientButton;
            #endregion

            // Verify that 'Cre&ate New Patient...' button's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues.UICreateNewPatientButtonExists, uICreateNewPatientButton.Exists);

            // Verify that 'Cre&ate New Patient...' button's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues.UICreateNewPatientButtonEnabled, uICreateNewPatientButton.Enabled);
        }
        
        /// <summary>
        /// ClickOnHelpAboutAndDismissTheDialog
        /// </summary>
        public void ClickOnHelpAboutAndDismissTheDialog()
        {
            #region Variable Declarations
            WinMenuItem uIAboutPatientAccessMenuItem = this.UIPatientAccessWindow.UIPatientAccessViewMenuBar.UIHelpMenuItem.UIAboutPatientAccessMenuItem;
            WinButton uIOKButton = this.UIAboutPatientAccessWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Help' -> 'About Patient Access' menu item
            Mouse.Click(uIAboutPatientAccessMenuItem, new Point(21, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 9));
        }
        
        /// <summary>
        /// ClickOnReportsPhysiciansAndCloseTheDialog
        /// </summary>
        public void ClickOnReportsPhysiciansAndCloseTheDialog()
        {
            #region Variable Declarations
            WinMenuItem uIPhysiciansMenuItem = this.UIPatientAccessWindow.UIPatientAccessViewMenuBar.UIReportsMenuItem.UIPhysiciansMenuItem;
            WinButton uICloseButton = this.UIPhysicianWindow.UICloseWindow.UICloseButton;
            #endregion

            // Click 'Reports' -> 'Physicians' menu item
            Mouse.Click(uIPhysiciansMenuItem, new Point(39, 14));

            // Click 'Clo&se' button
            Mouse.Click(uICloseButton, new Point(55, 9));
        }
        
        /// <summary>
        /// ClickOnRegisterPrintFaceSheetAndCloseTheDialog
        /// </summary>
        public void ClickOnRegisterPrintFaceSheetAndCloseTheDialog()
        {
            #region Variable Declarations
            WinMenuItem uIPrintFaceSheetMenuItem = this.UIPatientAccessWindow.UIPatientAccessViewMenuBar.UIRegisterMenuItem.UIPrintFaceSheetMenuItem;
            WinButton uICancelButton = this.UIViewAccountSearchbyPWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Register' -> 'Print Face Sheet' menu item
            Mouse.Click(uIPrintFaceSheetMenuItem, new Point(42, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(55, 12));
        }
        
        #region Properties
        public virtual AssertThatLogonWasSuccessfulExpectedValues AssertThatLogonWasSuccessfulExpectedValues
        {
            get
            {
                if ((this.mAssertThatLogonWasSuccessfulExpectedValues == null))
                {
                    this.mAssertThatLogonWasSuccessfulExpectedValues = new AssertThatLogonWasSuccessfulExpectedValues();
                }
                return this.mAssertThatLogonWasSuccessfulExpectedValues;
            }
        }
        
        public virtual LogonParams LogonParams
        {
            get
            {
                if ((this.mLogonParams == null))
                {
                    this.mLogonParams = new LogonParams();
                }
                return this.mLogonParams;
            }
        }
        
        public virtual SearchToCreateNewPatientParams SearchToCreateNewPatientParams
        {
            get
            {
                if ((this.mSearchToCreateNewPatientParams == null))
                {
                    this.mSearchToCreateNewPatientParams = new SearchToCreateNewPatientParams();
                }
                return this.mSearchToCreateNewPatientParams;
            }
        }
        
        public virtual AssertThatTheShortAccountViewWasLoadedExpectedValues AssertThatTheShortAccountViewWasLoadedExpectedValues
        {
            get
            {
                if ((this.mAssertThatTheShortAccountViewWasLoadedExpectedValues == null))
                {
                    this.mAssertThatTheShortAccountViewWasLoadedExpectedValues = new AssertThatTheShortAccountViewWasLoadedExpectedValues();
                }
                return this.mAssertThatTheShortAccountViewWasLoadedExpectedValues;
            }
        }
        
        public virtual AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues
        {
            get
            {
                if ((this.mAssertThatTheCreateNewPatientButtonIsVisibleExpectedValues == null))
                {
                    this.mAssertThatTheCreateNewPatientButtonIsVisibleExpectedValues = new AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues();
                }
                return this.mAssertThatTheCreateNewPatientButtonIsVisibleExpectedValues;
            }
        }
        
        public UIPatientAccessLogOnWindow UIPatientAccessLogOnWindow
        {
            get
            {
                if ((this.mUIPatientAccessLogOnWindow == null))
                {
                    this.mUIPatientAccessLogOnWindow = new UIPatientAccessLogOnWindow();
                }
                return this.mUIPatientAccessLogOnWindow;
            }
        }
        
        public UIPatientAccessWindow UIPatientAccessWindow
        {
            get
            {
                if ((this.mUIPatientAccessWindow == null))
                {
                    this.mUIPatientAccessWindow = new UIPatientAccessWindow();
                }
                return this.mUIPatientAccessWindow;
            }
        }
        
        public UILeavinganIncompleteAWindow UILeavinganIncompleteAWindow
        {
            get
            {
                if ((this.mUILeavinganIncompleteAWindow == null))
                {
                    this.mUILeavinganIncompleteAWindow = new UILeavinganIncompleteAWindow();
                }
                return this.mUILeavinganIncompleteAWindow;
            }
        }
        
        public UIAboutPatientAccessWindow UIAboutPatientAccessWindow
        {
            get
            {
                if ((this.mUIAboutPatientAccessWindow == null))
                {
                    this.mUIAboutPatientAccessWindow = new UIAboutPatientAccessWindow();
                }
                return this.mUIAboutPatientAccessWindow;
            }
        }
        
        public UIPhysicianWindow UIPhysicianWindow
        {
            get
            {
                if ((this.mUIPhysicianWindow == null))
                {
                    this.mUIPhysicianWindow = new UIPhysicianWindow();
                }
                return this.mUIPhysicianWindow;
            }
        }
        
        public UIViewAccountSearchbyPWindow UIViewAccountSearchbyPWindow
        {
            get
            {
                if ((this.mUIViewAccountSearchbyPWindow == null))
                {
                    this.mUIViewAccountSearchbyPWindow = new UIViewAccountSearchbyPWindow();
                }
                return this.mUIViewAccountSearchbyPWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertThatLogonWasSuccessfulExpectedValues mAssertThatLogonWasSuccessfulExpectedValues;
        
        private LogonParams mLogonParams;
        
        private SearchToCreateNewPatientParams mSearchToCreateNewPatientParams;
        
        private AssertThatTheShortAccountViewWasLoadedExpectedValues mAssertThatTheShortAccountViewWasLoadedExpectedValues;
        
        private AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues mAssertThatTheCreateNewPatientButtonIsVisibleExpectedValues;
        
        private UIPatientAccessLogOnWindow mUIPatientAccessLogOnWindow;
        
        private UIPatientAccessWindow mUIPatientAccessWindow;
        
        private UILeavinganIncompleteAWindow mUILeavinganIncompleteAWindow;
        
        private UIAboutPatientAccessWindow mUIAboutPatientAccessWindow;
        
        private UIPhysicianWindow mUIPhysicianWindow;
        
        private UIViewAccountSearchbyPWindow mUIViewAccountSearchbyPWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertThatLogonWasSuccessful'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertThatLogonWasSuccessfulExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Patient Access' window's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIPatientAccessWindowEnabled = true;
        
        /// <summary>
        /// Verify that 'Patient Access' window's property 'Exists' equals 'True'
        /// </summary>
        public bool UIPatientAccessWindowExists = true;
        
        /// <summary>
        /// Verify that 'Patient Access' window's property 'Restored' equals 'True'
        /// </summary>
        public bool UIPatientAccessWindowRestored = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Logon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LogonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'patientaccess.user03' in 'txtUserName' text box
        /// </summary>
        public string UITxtUserNameEditText = "patientaccess.user03";
        
        /// <summary>
        /// Type '{Tab}' in 'txtUserName' text box
        /// </summary>
        public string UITxtUserNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'txtPassword' text box
        /// </summary>
        public string UITxtPasswordEditSendKeys = "N6UZ59fugHDOi8MvEAr39n7xKKy0WL7Q";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchToCreateNewPatient'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class SearchToCreateNewPatientParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'mtbAccount' text box
        /// </summary>
        public string UIMtbAccountEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertThatTheShortAccountViewWasLoaded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertThatTheShortAccountViewWasLoadedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'ShortAccountView' client's property 'ControlName' equals 'ShortAccountView'
        /// </summary>
        public string UIShortAccountViewClientControlName = "ShortAccountView";
        
        /// <summary>
        /// Verify that 'ShortAccountView' client's property 'Exists' equals 'True'
        /// </summary>
        public bool UIShortAccountViewClientExists = true;
        
        /// <summary>
        /// Verify that 'ShortAccountView' client's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIShortAccountViewClientEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertThatTheCreateNewPatientButtonIsVisible'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertThatTheCreateNewPatientButtonIsVisibleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Cre&ate New Patient...' button's property 'Exists' equals 'True'
        /// </summary>
        public bool UICreateNewPatientButtonExists = true;
        
        /// <summary>
        /// Verify that 'Cre&ate New Patient...' button's property 'Enabled' equals 'True'
        /// </summary>
        public bool UICreateNewPatientButtonEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPatientAccessLogOnWindow : WinWindow
    {
        
        public UIPatientAccessLogOnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Patient Access Log On";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Patient Access Log On");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIPatientAccessLogOnTitleBar
        {
            get
            {
                if ((this.mUIPatientAccessLogOnTitleBar == null))
                {
                    this.mUIPatientAccessLogOnTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIPatientAccessLogOnTitleBar.WindowTitles.Add("Patient Access Log On");
                    #endregion
                }
                return this.mUIPatientAccessLogOnTitleBar;
            }
        }
        
        public UITxtUserNameWindow UITxtUserNameWindow
        {
            get
            {
                if ((this.mUITxtUserNameWindow == null))
                {
                    this.mUITxtUserNameWindow = new UITxtUserNameWindow(this);
                }
                return this.mUITxtUserNameWindow;
            }
        }
        
        public UITxtPasswordWindow UITxtPasswordWindow
        {
            get
            {
                if ((this.mUITxtPasswordWindow == null))
                {
                    this.mUITxtPasswordWindow = new UITxtPasswordWindow(this);
                }
                return this.mUITxtPasswordWindow;
            }
        }
        
        public UILogOnWindow UILogOnWindow
        {
            get
            {
                if ((this.mUILogOnWindow == null))
                {
                    this.mUILogOnWindow = new UILogOnWindow(this);
                }
                return this.mUILogOnWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIPatientAccessLogOnTitleBar;
        
        private UITxtUserNameWindow mUITxtUserNameWindow;
        
        private UITxtPasswordWindow mUITxtPasswordWindow;
        
        private UILogOnWindow mUILogOnWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITxtUserNameWindow : WinWindow
    {
        
        public UITxtUserNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtUserName";
            this.WindowTitles.Add("Patient Access Log On");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtUserNameEdit
        {
            get
            {
                if ((this.mUITxtUserNameEdit == null))
                {
                    this.mUITxtUserNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtUserNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User ID:";
                    this.mUITxtUserNameEdit.WindowTitles.Add("Patient Access Log On");
                    #endregion
                }
                return this.mUITxtUserNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtUserNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITxtPasswordWindow : WinWindow
    {
        
        public UITxtPasswordWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtPassword";
            this.WindowTitles.Add("Patient Access Log On");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtPasswordEdit
        {
            get
            {
                if ((this.mUITxtPasswordEdit == null))
                {
                    this.mUITxtPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password:";
                    this.mUITxtPasswordEdit.WindowTitles.Add("Patient Access Log On");
                    #endregion
                }
                return this.mUITxtPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILogOnWindow : WinWindow
    {
        
        public UILogOnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOk";
            this.WindowTitles.Add("Patient Access Log On");
            #endregion
        }
        
        #region Properties
        public WinButton UILogOnButton
        {
            get
            {
                if ((this.mUILogOnButton == null))
                {
                    this.mUILogOnButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILogOnButton.SearchProperties[WinButton.PropertyNames.Name] = "Log On";
                    this.mUILogOnButton.WindowTitles.Add("Patient Access Log On");
                    #endregion
                }
                return this.mUILogOnButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILogOnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPatientAccessWindow : WinWindow
    {
        
        public UIPatientAccessWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Patient Access";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIPatientAccessTitleBar
        {
            get
            {
                if ((this.mUIPatientAccessTitleBar == null))
                {
                    this.mUIPatientAccessTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIPatientAccessTitleBar.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIPatientAccessTitleBar;
            }
        }
        
        public UIPatientAccessViewMenuBar UIPatientAccessViewMenuBar
        {
            get
            {
                if ((this.mUIPatientAccessViewMenuBar == null))
                {
                    this.mUIPatientAccessViewMenuBar = new UIPatientAccessViewMenuBar(this);
                }
                return this.mUIPatientAccessViewMenuBar;
            }
        }
        
        public UIMtbAccountWindow UIMtbAccountWindow
        {
            get
            {
                if ((this.mUIMtbAccountWindow == null))
                {
                    this.mUIMtbAccountWindow = new UIMtbAccountWindow(this);
                }
                return this.mUIMtbAccountWindow;
            }
        }
        
        public UISearchWindow UISearchWindow
        {
            get
            {
                if ((this.mUISearchWindow == null))
                {
                    this.mUISearchWindow = new UISearchWindow(this);
                }
                return this.mUISearchWindow;
            }
        }
        
        public UICreateNewPatientWindow UICreateNewPatientWindow
        {
            get
            {
                if ((this.mUICreateNewPatientWindow == null))
                {
                    this.mUICreateNewPatientWindow = new UICreateNewPatientWindow(this);
                }
                return this.mUICreateNewPatientWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIAnnouncementsViewWindow UIAnnouncementsViewWindow
        {
            get
            {
                if ((this.mUIAnnouncementsViewWindow == null))
                {
                    this.mUIAnnouncementsViewWindow = new UIAnnouncementsViewWindow(this);
                }
                return this.mUIAnnouncementsViewWindow;
            }
        }
        
        public UITcViewTabPagesWindow UITcViewTabPagesWindow
        {
            get
            {
                if ((this.mUITcViewTabPagesWindow == null))
                {
                    this.mUITcViewTabPagesWindow = new UITcViewTabPagesWindow(this);
                }
                return this.mUITcViewTabPagesWindow;
            }
        }
        
        public UIShortAccountViewWindow UIShortAccountViewWindow
        {
            get
            {
                if ((this.mUIShortAccountViewWindow == null))
                {
                    this.mUIShortAccountViewWindow = new UIShortAccountViewWindow(this);
                }
                return this.mUIShortAccountViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIPatientAccessTitleBar;
        
        private UIPatientAccessViewMenuBar mUIPatientAccessViewMenuBar;
        
        private UIMtbAccountWindow mUIMtbAccountWindow;
        
        private UISearchWindow mUISearchWindow;
        
        private UICreateNewPatientWindow mUICreateNewPatientWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIAnnouncementsViewWindow mUIAnnouncementsViewWindow;
        
        private UITcViewTabPagesWindow mUITcViewTabPagesWindow;
        
        private UIShortAccountViewWindow mUIShortAccountViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPatientAccessViewMenuBar : WinMenuBar
    {
        
        public UIPatientAccessViewMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public UIRegisterMenuItem UIRegisterMenuItem
        {
            get
            {
                if ((this.mUIRegisterMenuItem == null))
                {
                    this.mUIRegisterMenuItem = new UIRegisterMenuItem(this);
                }
                return this.mUIRegisterMenuItem;
            }
        }
        
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIRegisterMenuItem1
        {
            get
            {
                if ((this.mUIRegisterMenuItem1 == null))
                {
                    this.mUIRegisterMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRegisterMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Register";
                    this.mUIRegisterMenuItem1.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIRegisterMenuItem1;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIReportsMenuItem UIReportsMenuItem
        {
            get
            {
                if ((this.mUIReportsMenuItem == null))
                {
                    this.mUIReportsMenuItem = new UIReportsMenuItem(this);
                }
                return this.mUIReportsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRegisterMenuItem mUIRegisterMenuItem;
        
        private WinMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIRegisterMenuItem1;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIReportsMenuItem mUIReportsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRegisterMenuItem : WinMenuItem
    {
        
        public UIRegisterMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Register";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRegisterDiagnosticOuMenuItem
        {
            get
            {
                if ((this.mUIRegisterDiagnosticOuMenuItem == null))
                {
                    this.mUIRegisterDiagnosticOuMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRegisterDiagnosticOuMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Register Diagnostic Outpatient (Short Reg)";
                    this.mUIRegisterDiagnosticOuMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRegisterDiagnosticOuMenuItem.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIRegisterDiagnosticOuMenuItem;
            }
        }
        
        public WinMenuItem UIRegisterDiagnosticOuMenuItem1
        {
            get
            {
                if ((this.mUIRegisterDiagnosticOuMenuItem1 == null))
                {
                    this.mUIRegisterDiagnosticOuMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRegisterDiagnosticOuMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Register Diagnostic Outpatient (Short Reg)";
                    this.mUIRegisterDiagnosticOuMenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRegisterDiagnosticOuMenuItem1.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIRegisterDiagnosticOuMenuItem1;
            }
        }
        
        public WinMenuItem UIPrintFaceSheetMenuItem
        {
            get
            {
                if ((this.mUIPrintFaceSheetMenuItem == null))
                {
                    this.mUIPrintFaceSheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPrintFaceSheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Print Face Sheet";
                    this.mUIPrintFaceSheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPrintFaceSheetMenuItem.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIPrintFaceSheetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRegisterDiagnosticOuMenuItem;
        
        private WinMenuItem mUIRegisterDiagnosticOuMenuItem1;
        
        private WinMenuItem mUIPrintFaceSheetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutPatientAccessMenuItem
        {
            get
            {
                if ((this.mUIAboutPatientAccessMenuItem == null))
                {
                    this.mUIAboutPatientAccessMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutPatientAccessMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About Patient Access";
                    this.mUIAboutPatientAccessMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutPatientAccessMenuItem.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIAboutPatientAccessMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutPatientAccessMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIReportsMenuItem : WinMenuItem
    {
        
        public UIReportsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Reports";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIPhysiciansMenuItem
        {
            get
            {
                if ((this.mUIPhysiciansMenuItem == null))
                {
                    this.mUIPhysiciansMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPhysiciansMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Physicians";
                    this.mUIPhysiciansMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPhysiciansMenuItem.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIPhysiciansMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIPhysiciansMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMtbAccountWindow : WinWindow
    {
        
        public UIMtbAccountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "mtbAccount";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinEdit UIMtbAccountEdit
        {
            get
            {
                if ((this.mUIMtbAccountEdit == null))
                {
                    this.mUIMtbAccountEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIMtbAccountEdit.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIMtbAccountEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIMtbAccountEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISearchWindow : WinWindow
    {
        
        public UISearchWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSearch";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WinButton.PropertyNames.Name] = "Search";
                    this.mUISearchButton.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISearchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICreateNewPatientWindow : WinWindow
    {
        
        public UICreateNewPatientWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCreateNewPatient";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateNewPatientButton
        {
            get
            {
                if ((this.mUICreateNewPatientButton == null))
                {
                    this.mUICreateNewPatientButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateNewPatientButton.SearchProperties[WinButton.PropertyNames.Name] = "Create New Patient...";
                    this.mUICreateNewPatientButton.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUICreateNewPatientButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateNewPatientButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAnnouncementsViewWindow : WinWindow
    {
        
        public UIAnnouncementsViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "announcementsView";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinClient UIAnnouncementsViewClient
        {
            get
            {
                if ((this.mUIAnnouncementsViewClient == null))
                {
                    this.mUIAnnouncementsViewClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAnnouncementsViewClient.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIAnnouncementsViewClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAnnouncementsViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITcViewTabPagesWindow : WinWindow
    {
        
        public UITcViewTabPagesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tcViewTabPages";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinTabList UITcViewTabPagesTabList
        {
            get
            {
                if ((this.mUITcViewTabPagesTabList == null))
                {
                    this.mUITcViewTabPagesTabList = new WinTabList(this);
                    #region Search Criteria
                    this.mUITcViewTabPagesTabList.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUITcViewTabPagesTabList;
            }
        }
        #endregion
        
        #region Fields
        private WinTabList mUITcViewTabPagesTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIShortAccountViewWindow : WinWindow
    {
        
        public UIShortAccountViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ShortAccountView";
            this.WindowTitles.Add("Patient Access");
            #endregion
        }
        
        #region Properties
        public WinClient UIShortAccountViewClient
        {
            get
            {
                if ((this.mUIShortAccountViewClient == null))
                {
                    this.mUIShortAccountViewClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIShortAccountViewClient.WindowTitles.Add("Patient Access");
                    #endregion
                }
                return this.mUIShortAccountViewClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIShortAccountViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILeavinganIncompleteAWindow : WinWindow
    {
        
        public UILeavinganIncompleteAWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Leaving an Incomplete Activity";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Leaving an Incomplete Activity");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Leaving an Incomplete Activity");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Leaving an Incomplete Activity");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAboutPatientAccessWindow : WinWindow
    {
        
        public UIAboutPatientAccessWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About Patient Access";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("About Patient Access");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOK";
            this.WindowTitles.Add("About Patient Access");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About Patient Access");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPhysicianWindow : WinWindow
    {
        
        public UIPhysicianWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Physician";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Physician");
            #endregion
        }
        
        #region Properties
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICloseWindow mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CloseButton";
            this.WindowTitles.Add("Physician");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Physician");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIViewAccountSearchbyPWindow : WinWindow
    {
        
        public UIViewAccountSearchbyPWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "View Account - Search by Patient";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("View Account - Search by Patient");
            #endregion
        }
        
        #region Properties
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("View Account - Search by Patient");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("View Account - Search by Patient");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
}
