<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics.Win.v5.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds">
            <summary>
            Enumeration of property identifications for the <see cref="T:Infragistics.Win.Printing.UltraPrintDocument"/> and <see cref="T:Infragistics.Win.Printing.PageSection"/> classes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Appearance">
            <summary>
            <see cref="P:Infragistics.Win.Printing.PageSection.Appearance"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.BorderStyle">
            <summary>
            <see cref="P:Infragistics.Win.Printing.PageSection.BorderStyle"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.BorderSides">
            <summary>
            <see cref="P:Infragistics.Win.Printing.PageSection.BorderSides"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Padding">
            <summary>
            <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Margins">
            <summary>
            <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.TextLeft">
            <summary>
            <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextLeft"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.TextRight">
            <summary>
            <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextRight"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.TextCenter">
            <summary>
            <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextCenter"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.ReverseTextOnEvenPages">
            <summary>
            <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Page">
            <summary>
            <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.PageBody">
            <summary>
            <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Footer">
            <summary>
            <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.Header">
            <summary>
            <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Printing.UltraPrintDocumentPropertyIds.PrintColorStyle">
            <summary>
            <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PrintColorStyle"/> property
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PageSectionPrintEventArgs">
            <summary>
            Base class for an <see cref="T:Infragistics.Win.Printing.UltraPrintDocument"/> event involving a <see cref="T:Infragistics.Win.Printing.PageSection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSectionPrintEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PageSectionPrintEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.Document">
            <summary>
            Returns the document that is being rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.Graphics">
            <summary>
            Returns the graphics object into which the page should be rendered
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.PageSettings">
            <summary>
            Returns the <see cref="T:System.Drawing.Printing.PageSettings"/> associated with the current page being printed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.RectOverall">
            <summary>
            Returns the area available for the section.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.RectInsideBorders">
            <summary>
            Returns the area of the section within its borders
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.RectInsideMargins">
            <summary>
            Returns the area of the section within its margins
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.RectInsidePadding">
            <summary>
            Returns the area of the section inside the borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.SectionRect">
            <summary>
            Returns the area within the available area that represents the section.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSectionPrintEventArgs.AvailableRect">
            <summary>
            Returns the area available for rendering.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PagePrintingEventArgs">
            <summary>
            Event arguments class for the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PagePrintingEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PagePrintingEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintingEventArgs.Cancel">
            <summary>
            Returns or sets whether the print operation should be cancelled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintingEventArgs.Handled">
            <summary>
            Returns or sets whether the default rendering should occur for the page background and border.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PagePrintedEventArgs">
            <summary>
            Event arguments class for the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinted"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PagePrintedEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PageSectionPrintEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="headerRect"></param>
            <param name="footerRect"></param>
            <param name="pageBodyRect"></param>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.Document">
            <summary>
            Returns the document that is being rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.Graphics">
            <summary>
            Returns the graphics object into which the page should be rendered
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.PageSettings">
            <summary>
            Returns the <see cref="T:System.Drawing.Printing.PageSettings"/> associated with the current page being printed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.HeaderRect">
            <summary>
            Returns the area of the page containing the header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.FooterRect">
            <summary>
            Returns the area of the page containing the footer.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.PageBodyRect">
            <summary>
            Returns the area of the page containing the page body.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.HasMorePages">
            <summary>
            Returns or sets whether there are more pages to print.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.ReprintPage">
            <summary>
            Returns or sets whether the current page should be reprinted.
            </summary>
            <remarks>
            <p class="body">This is usually only set true if the <b>Handled</b> property of the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/> was set to true. In this way, a page may be inserted into the print operation.</p>
            <p class="note">The class that derives from or utilizes the <see cref="T:Infragistics.Win.Printing.UltraPrintDocument"/> to render is responsible for supporting this capability and as such may not be available in all cases.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Printing.PagePrintedEventArgs.Cancel">
            <summary>
            Returns or sets whether the print operation should be cancelled.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs">
            <summary>
            Event arguments class for the printing events involving a <see cref="T:Infragistics.Win.Printing.HeaderFooterPageSection"/> that occur before a section has been printed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.HeaderFooterPageSection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs.Handled">
            <summary>
            Returns or sets whether the default rendering should occur for the page background and border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs.Section">
            <summary>
            Returns the header or footer section being rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs.SectionRect">
            <summary>
            Returns the area within the available area that represents the section.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs">
            <summary>
            Event arguments class for the print events involving a <see cref="T:Infragistics.Win.Printing.HeaderFooterPageSection"/> that occur after the section has been printed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.HeaderFooterPageSection,System.Drawing.Rectangle)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
            <param name="sectionRect">The area where the section was rendered.</param>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs.Section">
            <summary>
            Returns the header or footer section being rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs.SectionRect">
            <summary>
            Returns the area within the available area that represents the section.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PageBodyPrintingEventArgs">
            <summary>
            Event arguments class for the UltraPrintDocument <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageBodyPrintingEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PageBodyPrintingEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
        </member>
        <member name="P:Infragistics.Win.Printing.PageBodyPrintingEventArgs.Section">
            <summary>
            Returns the section representing the page body.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageBodyPrintingEventArgs.Handled">
            <summary>
            Returns or sets whether the default rendering should occur for the page background and border.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PageBodyPrintedEventArgs">
            <summary>
            Event arguments class for the UltraPrintDocument <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinted"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageBodyPrintedEventArgs.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Drawing.Graphics,System.Drawing.Printing.PageSettings,System.Drawing.Rectangle,Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PageBodyPrintedEventArgs"/>
            </summary>
            <param name="document">Associated document that is being printed</param>
            <param name="graphics">Graphics object into which the page should be rendered</param>
            <param name="pageSettings">Object that provides information about the settings for the current page</param>
            <param name="availableRect">Area available for the section</param>
            <param name="section">Section that is being rendered</param>
        </member>
        <member name="P:Infragistics.Win.Printing.PageBodyPrintedEventArgs.Section">
            <summary>
            Returns the section representing the page body.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PagePrintingEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting"/> event
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.PagePrintingEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.PagePrintedEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinted"/> event
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.PagePrintedEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.HeaderFooterPrintingEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinting"/> and <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinting"/> events
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.HeaderFooterPrintedEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinted"/> and <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinted"/> events
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.PageBodyPrintingEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/> event
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.PageBodyPrintingEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.PageBodyPrintedEventHandler">
            <summary>
            Delegate for handling the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinted"/> event
            </summary>
            <seealso cref="T:Infragistics.Win.Printing.PageBodyPrintedEventArgs"/>
        </member>
        <member name="T:Infragistics.Win.Printing.HeaderFooterPageSection">
            <summary>
            Print document section representing a header or footer.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Printing.PageSection">
            <summary>
            Represents an area of the print document.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.#ctor(Infragistics.Win.Printing.UltraPrintDocument)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.PageSection"/>
            </summary>
            <param name="document">Owning print document</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization to initialize a new <see cref="T:Infragistics.Win.Printing.PageSection"/> object
            with the serialized property values.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ShouldSerializeAppearance">
            <summary>
            <p class="body">Returns a Boolean value that determines whether the <see cref="P:Infragistics.Win.Printing.PageSection.Appearance"/> property is set to its default value.</p>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.Printing.PageSection.Appearance"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ShouldSerializePadding">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> have been changed.
            </summary>
            <returns>Returns true if any properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> have been changed.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ResetPadding">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ShouldSerializeMargins">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> have been changed.
            </summary>
            <returns>Returns true if any properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> have been changed.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ResetMargins">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on a subobject of the instance has changed.
            </summary>
            <param name="propChangeInfo">Arguments containing information about the change</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.PrintSection(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Prints the section into the specified graphics object.
            </summary>
            <param name="g">Graphics object into which the section should be rendered</param>
            <param name="sectionRect">Area where the section should be rendered</param>
            <param name="clientRect">Containing client area</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ShouldSerialize">
            <summary>
            Indicates if any of the properties of the section differ from their default values.
            </summary>
            <returns>True if any of the properties of the section have been changed.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.Reset">
            <summary>
            Resets the properties of the section to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the section.
            </summary>
            <param name="appearance">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.OnDeserialization(System.Object)">
            <summary>
            Invoked after the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for the this parameter is not currently implemented.</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.InitializeFrom(Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes the object with the settings of the specified object.
            </summary>
            <param name="source">Section whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.Printing.PageSection.OnDispose">
            <summary>
            Invoked when the Dispose method of the object is invoked.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.Appearance">
            <summary>
            Returns or sets the appearance used to render the section.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.HasAppearance">
            <summary>
            Returns a Boolean value that indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.BorderStyle">
            <summary>
            Returns or sets the borderstyle rendered around the section.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.BorderSides">
            <summary>
            Returns or sets which sides of the section border will be rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.Padding">
            <summary>
            Returns or sets the amount of space between the border and the sections contents.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.HasPadding">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> object has been allocated.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.Document">
            <summary>
            Returns the owning print document.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.Margins">
            <summary>
            Returns or sets the amount of space between the containing area and the border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.PageSection.HasMargins">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> object has been allocated.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.#ctor(Infragistics.Win.Printing.UltraPrintDocument,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.HeaderFooterPageSection"/>
            </summary>
            <param name="document">Owning print document</param>
            <param name="isHeader">True if this is a header section; otherwise false to indicate this is a footer section</param>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization to initialize a new <see cref="T:Infragistics.Win.Printing.HeaderFooterPageSection"/> object
            with the serialized property values.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.ShouldSerialize">
            <summary>
            Indicates if any of the properties of the section differ from their default values.
            </summary>
            <returns>True if any of the properties of the section have been changed.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.Reset">
            <summary>
            Resets the properties of the section to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.PrintSection(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Prints the section into the specified graphics object.
            </summary>
            <param name="g">Graphics object into which the section should be rendered</param>
            <param name="sectionRect">Area where the section should be rendered</param>
            <param name="clientRect">Containing client area</param>
            <returns>The area where the section was rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Printing.HeaderFooterPageSection.InitializeFrom(Infragistics.Win.Printing.PageSection)">
            <summary>
            Initializes the object with the settings of the specified object.
            </summary>
            <param name="source">Section whose properties should be copied</param>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages">
            <summary>
            Returns or sets whether the header and footer text is reversed when even pages are printed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextLeft">
            <summary>
            Returns or sets the string displayed on the left side of the section.
            </summary>
            <remarks>
            <p class="body">The <b>TextLeft</b> is used to provide a custom header or footer text on the left side of the page.</p>
            <list type="table">
            <listheader><term>Replaceable Escape Tags:</term></listheader>
            <item><term>[Page #]</term><description>Inserts the current page number</description></item>
            <item><term>[Date Printed]</term><description>Inserts the date when the print operation began.</description></item>
            <item><term>[User Name]</term><description>Inserts the user name as available from <see cref="P:System.Environment.UserName"/></description></item>
            <item><term>[Time Printed]</term><description>Inserts the time when the print operation began</description></item>
            </list>
            <p class="note">Note: If the <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/> is set to true, this string will be rendered on the opposite side when the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageNumber"/> is an even value.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextCenter"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextRight"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextCenter">
            <summary>
            Returns or sets the string displayed in the middle of the section.
            </summary>
            <remarks>
            <p class="body">The <b>TextCenter</b> is used to provide custom centered header or footer text.</p>
            <list type="table">
            <listheader><term>Replaceable Escape Tags:</term></listheader>
            <item><term>[Page #]</term><description>Inserts the current page number</description></item>
            <item><term>[Date Printed]</term><description>Inserts the date when the print operation began.</description></item>
            <item><term>[User Name]</term><description>Inserts the user name as available from <see cref="P:System.Environment.UserName"/></description></item>
            <item><term>[Time Printed]</term><description>Inserts the time when the print operation began</description></item>
            </list>
            </remarks>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextLeft"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextRight"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextRight">
            <summary>
            Returns or sets the string displayed on the right side of the section.
            </summary>
            <remarks>
            <p class="body">The <b>TextRight</b> is used to provide a custom header or footer text on the right side of the page.</p>
            <list type="table">
            <listheader><term>Replaceable Escape Tags:</term></listheader>
            <item><term>[Page #]</term><description>Inserts the current page number</description></item>
            <item><term>[Date Printed]</term><description>Inserts the date when the print operation began.</description></item>
            <item><term>[User Name]</term><description>Inserts the user name as available from <see cref="P:System.Environment.UserName"/></description></item>
            <item><term>[Time Printed]</term><description>Inserts the time when the print operation began</description></item>
            </list>
            <p class="note">Note: If the <see cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/> is set to true, this string will be rendered on the opposite side when the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageNumber"/> is an even value.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextCenter"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.TextRight"/>
            <seealso cref="P:Infragistics.Win.Printing.HeaderFooterPageSection.ReverseTextOnEvenPages"/>
        </member>
        <member name="P:Infragistics.Win.Printing.HeaderFooterPageSection.Height">
            <summary>
            Returns or sets the fixed height of the section.
            </summary>
            <remarks>
            <p class="note"><b>Note</b>, when left to its default value of -1, the height will be based on the height required to show the section text and border.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.Printing.UltraPrintDocument">
            <summary>
            Base class for rendering a print document with a page header and/or footer.
            </summary>
            <remarks>
            <p class="body">The <b>UltraPrintDocument</b> is a specialized <see cref="T:System.Drawing.Printing.PrintDocument"/> that adds 
            built-in support for custom page headers and footers (see the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> and <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/>).</p>
            <p class="body">Property settings may be saved using the <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.IO.Stream)"/> and <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.IO.Stream)"/> methods. These 
            serialized settings may then be loaded using the <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)"/> and <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)"/> methods respectively.</p>
            <p class="body"></p>
            <p class="note">Property settings of the base <b>PrintDocument</b> class, including the <see cref="P:System.Drawing.Printing.PrintDocument.DefaultPageSettings"/> 
            are not serialized when using the <b>SaveAsXml</b> and <b>SaveAsBinary</b> methods.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/>
            <seealso cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/>
            <seealso cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/>
            <seealso cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.UltraPrintDocument"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Printing.UltraPrintDocument"/>
            </summary>
            <param name="container">An IContainer representing the container of the <b>UltraPrintDocument</b></param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ShouldSerializePage">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/> have been set.
            </summary>
            <returns>True if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/> have been set.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ResetPage">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ShouldSerializeHeader">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> have been set.
            </summary>
            <returns>True if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> have been set.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ResetHeader">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ShouldSerializeFooter">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> have been set.
            </summary>
            <returns>True if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> have been set.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ResetFooter">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ShouldSerializePageBody">
            <summary>
            Indicates if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/> have been set.
            </summary>
            <returns>True if any of the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/> have been set.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ResetPageBody">
            <summary>
            Resets the properties of the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/> to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ShouldSerializeAppearance">
            <summary>
            <p class="body">Returns a Boolean value that determines whether the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Appearance"/> property is set to its default value.</p>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Appearance"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on a subobject has changed.
            </summary>
            <param name="propChangeInfo">Contains information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.NotifyDesignEnvironmentOfChange">
            <summary>
            <p class="body">In design mode notifies the <see cref="T:System.ComponentModel.Design.IComponentChangeService"/> that the component has changed so that it can mark the component dirty.</p>
            <p class="body">At runtime this method does nothing.</p>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.NotifyPropChange(System.Enum)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.NotifyPropChange(System.Enum,Infragistics.Shared.PropChangeInfo)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
            <param name="propId">An ID that denotes the property.</param>
            <param name="trigger">Optional. Used during a prop change notification to create a complete context chain of what triggered the change. </param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPrintEnded">
            <summary>
            Invoked when the print operation has ended.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPropertyChanged(Infragistics.Win.PropertyChangedEventArgs)">
            <summary>
            Invokes the PropertyChanged event. This event is fired to notify listeners of a property changes on the component or a subobject.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPagePrinting(Infragistics.Win.Printing.PagePrintingEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.PagePrintingEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPagePrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPagePrinting</b> in a derived class, be sure to call the base class's <b>OnPagePrinting</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.PagePrintingEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPagePrinted(Infragistics.Win.Printing.PagePrintedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinted"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.PagePrintedEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPagePrinted</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPagePrinted</b> in a derived class, be sure to call the base class's <b>OnPagePrinted</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.PagePrintedEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinted"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageBodyPrinting(Infragistics.Win.Printing.PageBodyPrintingEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.PageBodyPrintingEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageBodyPrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageBodyPrinting</b> in a derived class, be sure to call the base class's <b>OnPageBodyPrinting</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.PageBodyPrintingEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageBodyPrinted(Infragistics.Win.Printing.PageBodyPrintedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinted"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.PageBodyPrintedEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageBodyPrinted</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageBodyPrinted</b> in a derived class, be sure to call the base class's <b>OnPageBodyPrinted</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.PageBodyPrintedEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinted"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageHeaderPrinting(Infragistics.Win.Printing.HeaderFooterPrintingEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinting"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageHeaderPrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageHeaderPrinting</b> in a derived class, be sure to call the base class's <b>OnPageHeaderPrinting</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinting"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageHeaderPrinted(Infragistics.Win.Printing.HeaderFooterPrintedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinted"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageHeaderPrinted</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageHeaderPrinted</b> in a derived class, be sure to call the base class's <b>OnPageHeaderPrinted</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinted"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageFooterPrinting(Infragistics.Win.Printing.HeaderFooterPrintingEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinting"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageFooterPrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageFooterPrinting</b> in a derived class, be sure to call the base class's <b>OnPageFooterPrinting</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintingEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinting"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPageFooterPrinted(Infragistics.Win.Printing.HeaderFooterPrintedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinted"/> event.
            </summary>
            <param name="e">A <see cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnPageFooterPrinted</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnPageFooterPrinted</b> in a derived class, be sure to call the base class's <b>OnPageFooterPrinted</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Printing.HeaderFooterPrintedEventArgs"/>
            <seealso cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinted"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPrintPageBody(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            This method is invoked by the <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)"/> to allow derived 
            classes to handle rendering of the page body. This method is not called if the 
            <see cref="P:Infragistics.Win.Printing.PageBodyPrintingEventArgs.Handled"/> property of the <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting"/> 
            event is set to true.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)">
            <summary>
            Loads saved layout information from a stream containing the binary layout.
            </summary>
            <remarks>
            <p class="body">The <b>LoadFromBinary</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.IO.Stream)"/> method to persist the property settings and layout of the 
            print document.</p>
            </remarks>
            <param name="stream">Stream containing the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.IO.Stream)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.String)">
            <summary>
            Loads saved layout information from a stream containing the binary layout.
            </summary>
            <remarks>
            <p class="body">The <b>LoadFromBinary</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.String)"/> method to persist the property settings and layout of the 
            print document.</p>
            </remarks>
            <param name="filename">The name of the file containing the serialized print document information.</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.String)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.String)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)">
            <summary>
            Loads saved layout information from a stream containing the xml/soap layout.
            </summary>
            <remarks>
            <p class="body">The <b>LoadFromXml</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.IO.Stream)"/> method to persist the property settings and layout of the 
            print document.</p>
            </remarks>
            <param name="stream">Stream containing the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.IO.Stream)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.String)">
            <summary>
            Loads saved layout information from a stream containing the xml/soap layout.
            </summary>
            <remarks>
            <p class="body">The <b>LoadFromXml</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.String)"/> method to persist the property settings and layout of the 
            print document.</p>
            </remarks>
            <param name="filename">File containing the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.String)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.String)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.IO.Stream)">
            <summary>
            Saves property information to a file in binary format.
            </summary>
            <remarks>
            <p class="body">The <b>SaveAsBinary</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)"/> method to persist the property settings of the 
            print document.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.IO.Stream)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.String)">
            <summary>
            Saves property information to a file in binary format.
            </summary>
            <remarks>
            <p class="body">The <b>SaveAsBinary</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.String)"/> method to persist the property settings of the 
            print document.</p>
            </remarks>
            <param name="filename">The file to receive the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.String)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.String)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.IO.Stream)">
            <summary>
            Saves property information to an xml/soap stream.
            </summary>
            <remarks>
            <p class="body">The <b>SaveAsXml</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)"/> method to persist the property settings of the 
            print document.</p>
            </remarks>
            <param name="stream">Stream to receive the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.IO.Stream)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsXml(System.String)">
            <summary>
            Saves property information to a file in xml/soap format.
            </summary>
            <remarks>
            <p class="body">The <b>SaveAsXml</b> method is used in conjunction with the 
            <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.String)"/> method to persist the property settings of the 
            print document.</p>
            </remarks>
            <param name="filename">The file to receive the serialized print document information</param>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.SaveAsBinary(System.String)"/>
            <seealso cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.String)"/>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.GetObjectData(Infragistics.Shared.Serialization.ObjectStreamer)">
            <summary>
            Serializes the properties and subobjects of the print document into the specified <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/>
            </summary>
            <param name="streamer">Object into which the properties should be serialized</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.DeserializeProperty(System.Runtime.Serialization.SerializationEntry)">
            <summary>
            Invoked during runtime deserialization when deserializing from a stream using the <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromXml(System.IO.Stream)"/> and <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.LoadFromBinary(System.IO.Stream)"/> methods.
            </summary>
            <param name="entry">Serialization entry containing the serialized property value</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.Reset">
            <summary>
            Resets the properties of the component to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.Reset(System.Boolean)">
            <summary>
            Invoked when the properties of the component should be reset to their default values.
            </summary>
            <param name="deserializing">True if the component is being deserialized from a stream.</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.CalculatePageBodyArea(System.Drawing.Size)">
            <summary>
            Calculates the inner bounds available for the page body.
            </summary>
            <returns>A Size indicating the amount of space available for the page contents.</returns>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.Dispose(System.Boolean)">
            <summary>
            Invoked when the component must release the resources it is using.
            </summary>
            <param name="disposing">True if managed resources should be released.</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Used to invoke the <b>BeginPrint</b> event when a print operation has started.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Used to invoke the <b>EndPrint</b> event when a print operation has completed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Used to invoke the <b>PrintPage</b> event when a page is to be printed.
            </summary>
            <remarks>
            <p class="body">The <b>UltraPrintDocument</b> overrides this member to invoke the various print events (e.g. 
            <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting"/>, <see cref="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinting"/>, etc.). It is recommended that derived classes override 
            the methods of the respective event(s) (e.g. <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.OnPagePrinting(Infragistics.Win.Printing.PagePrintingEventArgs)"/>) instead of overriding <b>OnPrintPage</b>. After 
            the header and footer area, as well as any additional page <see cref="P:Infragistics.Win.Printing.PageSection.Padding"/> or <see cref="P:Infragistics.Win.Printing.PageSection.Margins"/> 
            have been removed the <see cref="M:Infragistics.Win.Printing.UltraPrintDocument.OnPrintPageBody(System.Drawing.Printing.PrintPageEventArgs)"/> method is invoked with a new <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that 
            represents the body area of the page. Derived classes may override that method in lieu of overriding <b>OnPrintPage</b> to 
            handle rendering of the page body.</p>
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Printing.UltraPrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Used to invoke the <b>QueryPageSettings</b> event to allow the <b>PageSettings</b> to be altered before each page is printed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.PageNumber">
            <summary>
            Returns the current page number.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.IsPrinting">
            <summary>
            Indicates if we are in the process of a print operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.Page">
            <summary>
            Returns an object used to define the appearance of the page.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.Header">
            <summary>
            Returns an object used to define the appearance of the page header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.Footer">
            <summary>
            Returns an object used to define the appearance of the page footer.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody">
            <summary>
            Returns an object used to define the appearance of the body of the page.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.PrintColorStyle">
            <summary>
            Returns or sets how colors and images are rendered.
            </summary>
            <remarks>
            <p class="note"><b>Note</b>, this does not automatically affect the output of the print operation.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.SubObjectPropChangeHandler">
            <summary>
            Handler for a <see cref="E:Infragistics.Shared.SubObjectBase.SubObjectPropChanged"/>SubObjectPropChange event
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.Appearance">
            <summary>
            Returns or sets the appearance used to render the pages printed by the document.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.HasAppearance">
            <summary>
            Returns a Boolean value that indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.SupportsVariableSectionSize">
            <summary>
            Returns a boolean indicating if the print document supports having variable sizes for the page sections (i.e. variable header height, footer height, etc.).
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PropertyChanged">
            <summary>
            Fired after a property has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinting">
            <summary>
            Fired before the page is rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PagePrinted">
            <summary>
            Fired after the page is rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinting">
            <summary>
            Fired before the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.PageBody"/> is rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageBodyPrinted">
            <summary>
            Fired after the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Page"/> has been rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinting">
            <summary>
            Fired before the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> is rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageHeaderPrinted">
            <summary>
            Fired after the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Header"/> has been rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinting">
            <summary>
            Fired before the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> is rendered
            </summary>
        </member>
        <member name="E:Infragistics.Win.Printing.UltraPrintDocument.PageFooterPrinted">
            <summary>
            Fired after the <see cref="P:Infragistics.Win.Printing.UltraPrintDocument.Footer"/> has been rendered
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.About">
            <summary>
            Display the about dialog
            </summary>
        </member>
        <member name="P:Infragistics.Win.Printing.UltraPrintDocument.Infragistics#Shared#IUltraLicensedComponent#License">
            <summary>
            Returns the cached license for the control
            </summary>
        </member>
        <member name="T:Infragistics.Win.Xml.Schema.XsdNodeType">
            <summary>
            Contains values which represent the different types of nodes found in an XSD.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.Attribute">
            <summary>
            Represents an 'xs:attribute' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.AttributeGroup">
            <summary>
            Represents an 'xs:attributeGroup' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.ComplexType">
            <summary>
            Represents an 'xs:complexType' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.Element">
            <summary>
            Represents an 'xs:element' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.Extension">
            <summary>
            Represents an 'xs:extension' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.Group">
            <summary>
            Represents an 'xs:group' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.Restriction">
            <summary>
            Represents an 'xs:restriction' node.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdNodeType.SimpleType">
            <summary>
            Represents an 'xs:simpleType' node.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Xml.Schema.XsdConstraintBase">
            <summary>
            This abstract class provides common functionality needed by a class which extracts constraint information from an XSD.
            This class requires that the XSD namespace ("http://www.w3.org/2001/XMLSchema") has a prefix associated with it.
            This class requires that the schema's target namespace is the default namespace (i.e. has no prefix).
            This class requires that each valueset in the schema has a unique name.
            The term 'valueset' refers to a complex type in an XSD.  For example, a table in a grid
            is considered a 'valueset' because it contains multiple columns.
            The term 'value' refers to a simple type in an XSD.  For example, a column in a grid is
            considered a 'value' because it contains only single data objects (each cell contains one piece of data).
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdConstraintBase.targetValueName">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Xml.Schema.XsdConstraintBase.valueConstraint">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdConstraintBase.#ctor(System.String,System.Xml.XPath.XPathDocument)">
            <summary>
            Constructor used by XsdValueSetConstraint.
            </summary>
            <param name="valueSetName">The name of the valueset (i.e. complex type) from which the constraints are extracted.</param>
            <param name="xpathDoc">An XPathDocument which contains the XSD to read from.</param>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdConstraintBase.#ctor(System.String,Infragistics.Win.Xml.Schema.XsdValueSetConstraint)">
            <summary>
            Constructor used by XsdValueConstraint.
            </summary>
            <param name="valueName">
            The name of the target value, as specified by XSD 'name' attribute.
            </param>
            <param name="valueSetConstraint">
            An XsdValueSetConstraint object which has located the 
            valueset (i.e. complex type) in which the target value (i.e. simple type) resides.
            </param>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdConstraintBase.ExtractConstraints">
            <summary>
            This method is called from the constructor of XsdRestrictionBase.
            Overrides of this method contain constraint extraction code.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdConstraintBase.ValueSetName">
            <summary>
            Returns the name of the valueset (i.e. complex type) from which the constraints are extracted.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Xml.Schema.XsdValueConstraint">
            <summary>
            This class retrieves the constraints placed on a value as declared by an XSD.
            This class requires that the XSD namespace ("http://www.w3.org/2001/XMLSchema") has a prefix associated with it.
            This class requires that the schema's target namespace is the default namespace (i.e. has no prefix).
            This class requires that each valueset in the schema has a unique name.
            </summary>
            <remarks>
            <p class="body">The term 'value' refers to a simple type in an XSD.  For example, a column in a grid is
            considered a 'value' because it contains only single data objects (each cell contains one piece of data).
            The term 'valueset' refers to a complex type in an XSD.  For example, a table in a grid
            is considered a 'valueset' because it contains multiple columns.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdValueConstraint.ExtractConstraints">
            <summary>
            Extracts all constraints placed on the value (i.e. simple type) found in the XSD.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.Constraint">
            <summary>
            Returns the object which contains all of the constraints found for the specified XSD value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.DefaultValue">
            <summary>
            Returns the default value for the target value.  Note, setting this property to null (Nothing)
            indicates that there is no default value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.HasDefaultValue">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.DefaultValue"/> property has a non-null value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.FoundValue">
            <summary>
            Returns true if the target value was located in the XSD, else false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueConstraint.ValueName">
            <summary>
            Returns the name of the target value.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Xml.Schema.XsdValueSetConstraint">
            <summary>
            This class retrieves the constraints placed on a set of data as declared by an XSD.
            This class requires that the XSD namespace ("http://www.w3.org/2001/XMLSchema") has a prefix associated with it.
            This class requires that the schema's target namespace is the default namespace (i.e. has no prefix).
            This class requires that each valueset in the schema has a unique name.
            </summary>
            <remarks>
            <p class="body">The term 'valueset' refers to a complex type in an XSD.  For example, a table in a grid
            is considered a 'valueset' because it contains multiple columns.
            The term 'value' refers to a simple type in an XSD.  For example, a column in a grid is
            considered a 'value' because it contains only single data objects (each cell contains one piece of data).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.#ctor(System.String,System.Xml.XPath.XPathDocument)">
            <summary>
            Creates an XsdValueSetConstraint and initializes it with the constraint information found in
            in the 'xpathDoc' argument.
            </summary>
            <param name="valueSetName">The name of the target valueset (ex. the name of a DataTable in a DataSet).</param>
            <param name="xpathDoc">An XPathDocument containing the XSD to extract constraint information from.</param>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.GetConstraintsOnXsdValue(System.String)">
            <summary>
            Returns the constraints placed on an XSD value (i.e. an 'xs:simpleType').  If the target valueset was not found
            in the XSD, this property will return null.
            </summary>
            <param name="xsdValueName">The name of the value, as specified by the 'name' attribute in the XSD schema.</param>
        </member>
        <member name="M:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.ExtractConstraints">
            <summary>
            Determines the values for MinOccurrences and MaxOccurrences.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.FoundValueSet">
            <summary>
            Returns true if the target valueset was found, else false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.MinOccurrences">
            <summary>
            Returns the minimum number of times that instances of this valueset can occur (inclusive).
            For example, if the target valueset corresponds to a DataTable in a DataSet this value
            indicates the minimal row count allowed in that table.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.HasMinOccurrences">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.MinOccurrences"/> property has a meaningful value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.MaxOccurrences">
            <summary>
            Returns the maximum number of times that instances of this valueset can occur (inclusive).
            For example, if the target valueset corresponds to a DataTable in a DataSet this value
            indicates the maximal row count allowed in that table.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.HasMaxOccurrences">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.MaxOccurrences"/> property has a meaningful value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Xml.Schema.XsdValueSetConstraint.IsMaxOccurrencesUnbounded">
            <summary>
            Returns true if the target valueset can occur an infinte number of times.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AccessibleObjectWrapper">
            <summary>
            Represents an object that will expose information via accessibility.
            </summary>
            <remarks>
            <p class="body">The <b>AccessibleObjectWrapper</b> is a thread safe object for 
            providing accesible information. The <see cref="P:Infragistics.Win.AccessibleObjectWrapper.MarshallingControl"/> is used to 
            synchronize calls made from the accessible object interface to the wrapper object.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.AccessibleObjectWrapper"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.CreateAccessibilityInstance">
            <summary>
            Invoked when the accessible object that represents the accessible object is to be created.
            </summary>
            <returns>An accessible object that represents the wrapper</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index
            </summary>
            <param name="index">The zero-based index of the accessible child</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetFocused">
            <summary>
            Retrieves the object that has the keyboard focus
            </summary>
            <returns>An AccessibleObject that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (Nothing in Visual Basic) if no object has focus.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic. On return, the fileName parameter contains the path to the Help file associated with this accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.GetSelected">
            <summary>
            Retrieves the currently selected child
            </summary>
            <returns>An AccessibleObject that represents the currently selected child. This method returns the calling object if the object itself is selected. Returns a null reference (Nothing in Visual Basic) if is no child is currently selected and the object itself does not have focus.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object
            </summary>
            <param name="flags">One of the <b>AccessibleSelection</b> values</param>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.FromAccessibleObject(System.Windows.Forms.AccessibleObject)">
            <summary>
            Returns the wrapper that provides the accessible information for the accessible instance.
            </summary>
            <param name="accessibleObject">Accessible object to evaluate</param>
            <returns>An <b>AccessibleObjectWrapper</b> that provides the accessible information or null if one is not available</returns>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.MarshallingControl">
            <summary>
            Returns the control used to marshal calls to the ui thread.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.AccessibleObject">
            <summary>
            Returns the accessible object that represents the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Bounds">
            <summary>
            Gets the location and size of the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Parent">
            <summary>
            Gets the parent of an accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject">
            <summary>
            A synchronized child accessible object
            </summary>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.#ctor(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject"/>
            </summary>
            <param name="wrapper">Object that will provide the accessible information</param>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index
            </summary>
            <param name="index">The zero-based index of the accessible child</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.GetFocused">
            <summary>
            Retrieves the object that has the keyboard focus
            </summary>
            <returns>An AccessibleObject that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (Nothing in Visual Basic) if no object has focus.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic. On return, the fileName parameter contains the path to the Help file associated with this accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.GetSelected">
            <summary>
            Retrieves the currently selected child
            </summary>
            <returns>An AccessibleObject that represents the currently selected child. This method returns the calling object if the object itself is selected. Returns a null reference (Nothing in Visual Basic) if is no child is currently selected and the object itself does not have focus.</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object
            </summary>
            <param name="flags">One of the <b>AccessibleSelection</b> values</param>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Wrapper">
            <summary>
            Returns the object that provides the accessible information
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AccessibleObjectWrapper.UltraAccessibleObject.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementAccessibleObject">
            <summary>
            Base accessible object for representing a <see cref="P:Infragistics.Win.UIElementAccessibleObject.UIElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.AccessibleRole,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="role">Accessible role of the object</param>
            <param name="defaultName">Default name for the accessible object</param>
            <param name="defaultDescription">Default description for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.AccessibleRole,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="role">Accessible role of the object</param>
            <param name="defaultName">Default name for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
            <param name="defaultDescription">Default description for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.AccessibleRole)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="role">Accessible role of the object</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UIElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child accessible object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index
            </summary>
            <param name="index">The zero-based index of the accessible child</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.UIElement">
            <summary>
            Returns the associated <see cref="P:Infragistics.Win.UIElementAccessibleObject.UIElement"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementAccessibleObject.IsVisible">
            <summary>
            Indicates if the associated object is displayed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AdjustableUIElement">
            <summary>
            Abstract base class derived by classes that want to support
            letting the user resize or move the element via the mouse 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElement">
            <summary>
            Base class for all user interface elements.
            </summary>
            <seealso cref="T:Infragistics.Shared.DisposableObject"/>
        </member>
        <member name="F:Infragistics.Win.UIElement.childElementsCollection">
            <summary>
            The collection of child elements
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElement.rectValue">
            <summary>
            The rect of this elements in client coordinates of the
            control
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElement.parentElement">
            <summary>
            The parent UIElement (will be null for the ControlUIElementBase
            derived classes
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElement.childElementsCollectionDirty">
            <summary>
            Indicates if the child elements for this element need to
            be repositioned/created
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>UIElement</b> class.
            </summary>
            <param name="parent">The parent element</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnDispose">
            <summary>
            Called when element is disposed of.
            </summary>
            <remarks>The default implementation calls Dispose on all child elements and then clears the child elements collection.</remarks>
        </member>
        <member name="M:Infragistics.Win.UIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.VerifyChildElements">
            <summary>
            Called to ensure that all child elements are created and 
            positioned properly. If the ChildElementsDirty flag is true
            then the PositionChildElements will be called and the dirty
            flag will be reset. This method gets called recursively
            for all descendant elements. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.VerifyChildElements(System.Boolean)">
            <summary>
            Called to ensure that all child elements are created and 
            positioned properly. If the ChildElementsDirty flag is true
            then the PositionChildElements will be called and the dirty
            flag will be reset 
            </summary>
            <param name="recursive">If true will call this method on all descendant elements</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.VerifyChildElements(Infragistics.Win.ControlUIElementBase,System.Boolean)">
            <summary>
            Called during a drawing operation to ensure that all child
            elements are created and positioned properly. If the ChildElementsDirty
            flag is true then the default implementation will call
            PositionChildElements and reset the flag 
            </summary>
            <param name="controlElement">The control's main UIElement</param>
            <param name="recursive">If true will call this method on all descendant elements</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets this element rect and all of its child elements
            </summary>
            <param name="deltaX">The number of pixels to offset left/right</param>
            <param name="deltaY">The number of pixels to offset up/down </param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Offset(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Offsets this element's rect and (optionally) all of
            its descendant elements.
            </summary>
            <param name="deltaX">The number of pixels to offset left/right</param>
            <param name="deltaY">The number of pixels to offset up/down </param>
            <param name="recursive">If true will offset all descendant elements as well</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.SetParent(Infragistics.Win.UIElement)">
            <summary>
            Sets the parent element
            </summary>
            <param name="parent">The new parent element.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.InternalSetElementsChanged">
            <summary>
            Default implementation just walks up the parent chain. This is
            overriden by the ControlUIElementBase class which maintains a
            flag that some descendant element may have changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.DirtyChildElements">
            <summary>
            Sets the dirty flag so that the next time the element
            is drawn it will reposition its child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.DirtyChildElements(System.Boolean)">
            <summary>
            Invalidates and calls InternalSetElementsChanged
            </summary>
            <param name="invalidate"><b>True</b> if control should invalidate graphics immediately, <b>False</b> to wait for next paint message.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.InternalCursorFromAppearance(Infragistics.Win.AppearanceData)">
            <summary>
            Extracts the curosr from the appearance object
            this method is overridden by an element with a mousepointer set
            </summary>
            <param name="appData"><see cref="T:Infragistics.Win.AppearanceData"/></param>
            <returns><see cref="P:Infragistics.Win.UIElement.Cursor"/></returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])">
            <summary>
            This method is called from <see cref="M:Infragistics.Win.UIElement.GetDescendant(System.Type)"/> as an optimization to
            prevent searching down element paths that can't possibly contain the
            element that is being searched for. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/> (or base class type) of the UIElement to look for.</param>
            <param name="contexts">The contexts that must all match with the contexts of the UIElement.</param>
            <returns>True if there is any possiblity that the element being sought is a descendant of this element. If this method returns false then descendant elements of this element will be excluded from the search.</returns>
            <remarks>
            <p>The default implementation does not make use of the type parameter. It will always return true except if this element has a <see cref="P:Infragistics.Win.UIElement.PrimaryContext"/> and its type matches the type of one of the passed in contexts but the context objects are't the same.</p> 
            <p>For example, if the search was for a <b>CellUIElement</b> in an <b>UltraGrid</b> control and this is a <b>RowUIElement</b> and its <see cref="P:Infragistics.Win.UIElement.PrimaryContext"/> is its corresponding <b>UltraGridRow</b> object and one of the contexts passed in was of type <b>UltraGridRow</b> but was a different <b>UltraGridRow</b> then we could safely ignore all descendant elements of this other row since the cell we are searching for couldn't possibly be a descendant.</p>
            <p>However, if the <seealso cref="P:Infragistics.Win.UIElement.PrimaryContext"/> is of type <see cref="T:System.DateTime"/> then the default implementation will always return true. This is because it can't make any assumptions based on equality since the significance of the DateTime context could be its date portion, its time portion or both.</p>
            <p>This method is normally overridden by classes that override the <see cref="M:Infragistics.Win.UIElement.GetContext(System.Type)"/> method or that can provide additional optimizations based on the type or contexts.</p>
            </remarks> 
            <seealso cref="M:Infragistics.Win.UIElement.GetContext(System.Type)"/>
            <seealso cref="M:Infragistics.Win.UIElement.GetDescendant(System.Type)"/>
            <seealso cref="P:Infragistics.Win.UIElement.PrimaryContext"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetDescendant(System.Type)">
            <summary>
            Returns an element of the requested type or null.  
            </summary>
            <param name="type">The <see cref="T:System.Type"/> (or base class type) of the UIElement to look for.</param>
            <returns></returns>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetDescendant(System.Type,System.Object)">
            <summary>
            Returns the element of the requested type that satisfies the 
            of the passed in contexts  
            </summary>
            <param name="type">The <see cref="T:System.Type"/> (or base class type) of the UIElement to look for.</param>
            <param name="context">The context that must match with the context of the element.</param>
            <returns>Descendent element of this element that matches the specified type and context.</returns>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetDescendant(System.Type,System.Object[])">
            <summary>
            Returns the element of the requested type that satisfies all 
            of the passed in contexts
            </summary>
            <param name="type"><see cref="T:System.Type"/>The type (or base class type) of the UIElement to look for.</param>
            <param name="contexts">The contexts that must all match with the contexts of the element.</param>
            <returns>Descendent element of this element that matches the specified type and contexts.</returns>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.HasContext(System.Object)">
            <summary>
            Returns true if this element (or any of its ancestors) has this
            context
            </summary>
            <param name="context">context of object</param>
            <returns><b>True</b> if this element (or any of its ancestors) has this context, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.HasContext(System.Object,System.Boolean)">
            <summary>
            Returns true if this element (or any of its ancestors) has this
            context
            </summary>
            <param name="context">context of object</param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
            <returns><b>True</b> if this element (or any of its ancestors) has this context, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetContext">
            <summary>
            Returns the primary context object.
            </summary>
            <remarks>If there is no primary context object the default implementation walks up the parent element chain until it finds one.</remarks>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetContext(System.Type)">
            <summary>
            Returns an object of requested type that relates to the element (or one of its parent elements) or null.  
            </summary>
            <param name="type">The requested type or null to pick up primary context object. </param>
            <remarks>If there is no context object of the requested type the default implementation walks up the parent element chain until it finds one.</remarks>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetContext(System.Type,System.Boolean)">
            <summary>
            Returns an object of requested type that relates to the element or null.  
            </summary>
            <param name="type">The requested type or null to pick up default context object. </param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
            <returns><see cref="T:System.Object"/></returns>
            <remarks>Classes that override this method normally need to override the <see cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/> method as well.</remarks>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseHover">
            <summary>
            Called when the mouse hovers over an element. 
            </summary>
            <remarks>This method will only be called if the WantsMouseHoverNotification property is overriden and returns true.</remarks>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnClick">
            <summary>
            Called when the mouse is clicked on this element. The default
            implementatiun just walks up the parent element chain.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the mouse is double clicked on this element. The default
            implementatiun just walks up the parent element chain.
            </summary>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.Invalidate">
            <summary>
            Invalidates this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.Invalidate(System.Boolean)">
            <summary>
            Invalidates this element
            </summary>
            <param name="update">True to force an immediate update</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetCommonAncestor(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Static method that returns the deepest nested element that
            is a common ancestor element of both the passed in elements.  
            </summary>
            <param name="element1"><see cref="T:Infragistics.Win.UIElement"/></param>
            <param name="element2"><see cref="T:Infragistics.Win.UIElement"/></param>
            <returns><see cref="T:Infragistics.Win.UIElement"/> that is a common ancestor of both elements.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetAncestor(System.Type)">
            <summary>
            Walks up the parent chain until it reaches the parent
            of the requested type. Also, if this element is of the
            passed in type then this elemnt will be returned.
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:Infragistics.Win.UIElement"/> that matches the requested type.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.HasAncestor(Infragistics.Win.UIElement)">
            <summary>
            Returns true if the passed in element is in this elment's
            parent chain
            </summary>
            <param name="ancestor"><see cref="T:Infragistics.Win.UIElement"/>Element to check</param>
            <returns><b>True</b> if element is in the parent chain. <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetAdjustmentRange(System.Drawing.Point,Infragistics.Win.UIElementAdjustmentRangeParams@)">
            <summary>
            Returns the range limits for adjusting the element in either or both
            dimensions. It also returns the initial rects for the vertical and horizontal
            bars that will need to be inverted during the mouse drag operation.
            Default implementation sets everything to zero.
            </summary>
            <param name="point"><see cref="T:System.Drawing.Point"/> to check.<see cref="T:System.Drawing.Point"/></param>
            <param name="range"><see cref="T:Infragistics.Win.UIElementAdjustmentRangeParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetAdjustableCursor(System.Drawing.Point)">
            <summary>
            The adjustable cursor is used by any element that can be moved or
            resized. Returning null means the element can not be adjusted
            by clicking on the passed in point.
            </summary>
            <param name="point"><see cref="T:System.Drawing.Point"/></param>
            <returns><see cref="P:Infragistics.Win.UIElement.Cursor"/></returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.Print(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws the element into a printer dc.
            </summary>
            <param name="graphics">DC to render into </param>
            <param name="clipText">True if text needs to be clipped/truncated when printing becuase some printer drivers don't clip text correctly.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the element.
            </summary>
            <param name="graphics">DC to render into </param>
            <param name="invalidRectangle">Area to paint</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
            <param name="isAlphaBlendingSupported">True to support alpha blending.</param>
            <param name="forceDrawAsFocused">If true, the element will be drawn with a focus rect if DrawsFocusRect is true, regardless of whether its parent control has input focus.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the element.
            </summary>
            <param name="graphics">DC to render into </param>
            <param name="invalidRectangle">Area to paint</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
            <param name="isAlphaBlendingSupported">True to support alpha blending.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode,System.Boolean)">
            <summary>
            Draws the element.
            </summary>
            <param name="graphics">DC to render into </param>
            <param name="invalidRectangle">Area to paint</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
            <param name="alphaBlendMode">Determines which alphablend algorithm is used</param>
            <param name="forceDrawAsFocused">If true, the element will be drawn with a focus rect if DrawsFocusRect is true, regardless of whether its parent control has input focus.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode)">
            <summary>
            Draws the element.
            </summary>
            <param name="graphics">DC to render into </param>
            <param name="invalidRectangle">Area to paint</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
            <param name="alphaBlendMode">Determines which alphablend algorithm is used</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnBeforeDraw">
            <summary>
            A virtual method that gets called before the element draw process starts.
            </summary>
            <remarks>This is for notification purposes, the default implementation does nothing.</remarks>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnAfterDraw(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            A virtual method that gets called after the element draw operation finishes.
            </summary>
            <remarks>This is for notification purposes, the default implementation does nothing.</remarks>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawElement(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the element into the graphics object of the specified <paramref name="defaultDrawParams"/>. This method will recursively invoke itself for rendering the descendant elements.
            </summary>
            <param name="defaultDrawParams">UIElementDrawParams structure used as the default values for rendering the element.</param>
            <remarks>
            <p class="body">Normally, rendering of the the element is done using the 
            various <see cref="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode)"/> 
            method overloads. However, when performing lots of separate draw operations of 
            different elements within the same control at the same time, this method is 
            will provide better performance then invoking the <see cref="M:Infragistics.Win.UIElement.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)"/> method multiple times.</p>
            <p class="note"><b>Note:</b> It is up to the caller to manage the lifetime of the 
            <see cref="T:Infragistics.Win.DrawCache"/> for which the <paramref name="defaultDrawParams"/> is created.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default backcolor drawing just does a FillRectangle with the backcolor.
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default background picture drawing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Returns the widths of all four borders
            </summary>
            <param name="style"><see cref="T:Infragistics.Win.UIElementBorderStyle"/></param>
            <param name="sides"><see cref="T:System.Windows.Forms.Border3DSide"/></param>
            <returns><see cref="T:Infragistics.Win.UIElementBorderWidths"/></returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.PointInElement(System.Drawing.Point)">
            <summary>
            Checks if the point is over the element and is
            not over an overlapping sibling element. 
            </summary>
            <param name="point">In client coordinates</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.PointInElement(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if the point is over the element. 
            </summary>
            <param name="point">In client coordinates</param>
            <param name="excludeOverlappingSiblings">Check to see if overlapping siblings contain this point</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.PointInElement(System.Drawing.Point,System.Boolean,System.Boolean)">
            <summary>
            Checks if the point is over the element. 
            </summary>
            <param name="point">In client coordinates</param>
            <param name="excludeOverlappingSiblings">Check to see if overlapping siblings contain this point</param>
            <param name="ignoreClipping">Specifies if we should ignore clipping or not</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.Contains(System.Drawing.Point)">
            <summary>
            Checks if the point is over the element. This may be 
            overridden in derived classes for specialized hit test logic.
            </summary>
            <param name="point">In client coordinates</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.Contains(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if the point is over the element. This may be 
            overridden in derived classes for specialized hit test logic.
            </summary>
            <param name="point">In client coordinates</param>
            <param name="ignoreClipping">Specifieds if we should ignore clipping or not</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.PointInAdjustableArea(System.Drawing.Point)">
            <summary>
            Returns true if the passed in point is over an area of this
            element that would require the AdjustableCursor to be displayed
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.AdjustableElementFromPoint(System.Drawing.Point)">
            <summary>
            Returns an element reference if the passed in point is over
            the AdjustableArea of this element (or any of its child elements)
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.AdjustableElementFromPoint(System.Drawing.Point,Infragistics.Win.UIElementInputType)">
            <summary>
            Returns an element reference if the passed in point is over
            the AdjustableArea of this element (or any of its child elements)
            </summary>
            <param name="point">In client coordinates</param>
            <param name="inputType">Specifies the type of input for which this method is being called</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.ElementFromPoint(System.Drawing.Point)">
            <summary>
            Returns the lowest level element that contains the passed in point
            </summary>
            <param name="point">In client coordinated of control</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.ElementFromPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns the lowest level element that contains the passed in point
            </summary>
            <param name="point">In client coordinated of control</param>
            <param name="ignoreClipping">Specifies if we should ignore clipping or not</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.ElementFromPoint(System.Drawing.Point,Infragistics.Win.UIElementInputType)">
            <summary>
            Returns the lowest level element that contains the passed in point
            </summary>
            <param name="point">In client coordinated of control</param>
            <param name="inputType">Specifies the type of input for which this method is being called</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.ElementFromPoint(System.Drawing.Point,System.Boolean,Infragistics.Win.UIElementInputType)">
            <summary>
            Returns the lowest level element that contains the passed in point
            </summary>
            <param name="point">In client coordinated of control</param>
            <param name="ignoreClipping">Specifies if we should ignore clipping or not</param>
            <param name="inputType">Specifies the type of input for which this method is being called</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.WantsInputNotification(Infragistics.Win.UIElementInputType,System.Drawing.Point)">
            <summary>
            Returns true if this ui element is interested in getting notificaions of type inputType
            at the specified location. Default implementation always returns true.
            </summary>
            <param name="inputType">The type of notification.</param>
            <param name="point">Point of interest.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default border rendering
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default foreground rendering - does nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawImage(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default image rendering - does nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElement.ExtractExistingElement(System.Collections.ArrayList,System.Type,System.Boolean)">
            <summary>
            Static method that searches thru the passed in collection
            and returns the first object of the requested type that 
            it finds
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.ExtractExistingElement(System.Collections.ArrayList,System.Type,System.Boolean,System.Object)">
            <summary>
            Static method that searches thru the passed in collection
            and returns the first object of the requested type that 
            it finds
            </summary>
            <param name="existingElements">Collection to search</param>
            <param name="type">Type of element to locate</param>
            <param name="removeExtractedElement">True to remove the element from the arraylist. The size of the arraylist will remain constant.</param>
            <param name="context">Context that the element should contain or null if the context should not be considered.</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.GetDeskTopWorkArea(System.Drawing.Rectangle)">
            <summary>
            Gets the desktop area. in multimonitor setup, it get's the desktop area
            of the monitor that most of the rect resides in.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMousePanHorizontal(System.Int32)">
            <summary>
            Virtual method that is called each time the mouse pans horizontally
            Derived classes should override this method
            </summary>
            <param name="delta">The number of pixels between the cursor position and the origin mark. This value
            is positive when the cursor is to the right of the origin mark, negative when it is left of the origin mark, and
            zero if it is within the origin mark threshold</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnMousePanVertical(System.Int32)">
            <summary>
            Virtual method that is called each time the mouse pans vertically
            Derived classes should override this method
            </summary>
            <param name="delta">The number of pixels between the cursor position and the origin mark. This value
            is positive when the cursor is below the origin mark, negative when it is above the origin mark, and
            zero if it is within the origin mark threshold</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnVertTimerTick(System.Object,System.EventArgs)">
            <summary>
            Notification handler for the Tick event fired 
            by the vertical timer
            </summary>
            <param name="sender">The object that sent the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.OnHorzTimerTick(System.Object,System.EventArgs)">
            <summary>
            Notification handler for the Tick event fired 
            by the horizontal timer
            </summary>
            <param name="sender">The object that sent the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Used by an element to render using the system theme. This method will not
            be invoked if the themes are not supported.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>Returning true will prevent the invocation of the DrawBackColor,
            DrawImageBackground, DrawBorders, DrawImage and DrawForeground. Return
            false when themes are not supported by the element or if unable to 
            render using the system theme.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.DrawChildElements(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default child element rendering - draws each of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElement.IntersectInvalidRect(System.Drawing.Rectangle)">
            <summary>
            Returns the intersection of the element's rect with the invalid rect for the
            current draw operation.
            </summary>
            <param name="invalidRect">Invalid rect</param>
            <returns>The intersection of the element's rect with the invalid rect.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.IsContextOfType(System.Object,System.Type)">
            <summary>
            Determines if the context is of the specified type.
            </summary>
            <param name="context">The object to check.</param>
            <param name="typeToCheck">The type to check.</param>
            <returns>
            <p>The method returns the following:</p>
            <p></p>
            <p>If either parameter is null it returns false.</p>
            <p></p>
            <p>If the context type is equal to the passed in type or if it is a subclass of the type the method returns true.</p>
            <p></p>
            <p>If the passed in type is an interface and if the object implements the interface then true is returned. Otherwise, false is returned.</p>
            </returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.Navigate(System.Windows.Forms.AccessibleNavigation,System.Type[])">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <param name="includedTypes">A list of types to which the navigation will be limited.</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.UIElement.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child accessible object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UIElement.WantsMouseHoverNotification">
            <summary>
            Return true if this element wants to be notified when the mouse hovers over it. This property is read-only.
            </summary>
            <remarks>The default implemenation returns false. This should be overridden by elements that want their OnMouseHover method to be called.</remarks>
        </member>
        <member name="P:Infragistics.Win.UIElement.IsDrawing">
            <summary>
            True if this element is in a drawing operation (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ChildElementArrayCapacity">
            <summary>
            Returns the expected number of child elements for this element
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Rect">
            <summary>
            The element's bounding rectangle in client coordinates
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Parent">
            <summary>
            The parent/containing element (will be null for a top level/control
            element). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Control">
            <summary>
               Walks up the parent chain until it reaches a 
               Control element (which overrides this method)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.SelectableItem">
            <summary>
            If the context for this element is a selectable item
            (e.g. a grid row, cell or header) it is returned. The
            default implementation walks up the parent chain calling
            this method recursively until a selectable item is found
            or the control element is reached
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.HasChildElements">
            <summary>
               Returns true if there are any child elements (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Cursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element. By default this just walks up
            the parent chain by returning its parent's cursor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.NestDepth">
            <summary>
            The nesting depth, 0 for top level control elements, 1 for their
            direct child elements, 2 for those element's child elements etc.
            (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ChildElements">
            <summary>
            Returns the child elements array (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.PrimaryContext">
            <summary>
            Used to keep track of the primary context for this element
            (e.g. its Row, Cell, Header etc.). Since most elements need
            only one context this property is usually adequate.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ControlElement">
            <summary>
            Returns the top level/control element. Read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ClipSelf">
            <summary>
            Returning true causes all drawing of this element to be expicitly clipped
            to its region
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ClipChildren">
            <summary>
            Returning true causes all drawing of this element's child elements to be
            expicitly clipped to the area inside this elements borders
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ClipRectChildren">
            <summary>
            Returns the rect inside borders as the default
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.IsFullyVisible">
            <summary>
            Returns true if the entire elment is visible or false if any
            part is clipped
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            Note: this will return false the element or any
            of its ancestors are disabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ClipRect">
            <summary>
            Returns the intersection of this element's rect's with all of its
            parent element's rects
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Region">
            <summary>
            Returns the region of this element. The default returns the element's
            Rect as a region. This method can be overriden to supply an irregularly
            shaped region 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.IsElementDrawn">
            <summary>
            True if this element is drawn normally. The default 
            implementation of this property returns true. It may 
            be overidden by some elements who don't do any rendering
            (e.g. scrollbars since they are actually scrollbar windows
            that render themselves)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.DrawsFocusRect">
            <summary>
            Returns true if this  element needs to draw a focus rect. This should 
            be overridden since the default implementation always returns false. 
            </summary>
            <remarks>Even if this property returns true the focus will not be drawn unless the control has focus.</remarks>
        </member>
        <member name="P:Infragistics.Win.UIElement.BorderStyle">
            <summary>
            BorderStyle of the element.
            <see cref="T:Infragistics.Win.UIElementBorderStyle"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.BorderSides">
            <summary>
            Returns flags indicating which borders will be drawn
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.RectInsideBorders">
            <summary>
            Returns the rectangle after adjusting for any borders
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.Adjustable">
            <summary>
            Returns true is this element can be moved or resized by the user
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ChildElementsDirty">
            <summary>
            True indicates that the child elements need to be created/adjusted
            on the next draw operation (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.SupportsVerticalMousePanning">
            <summary>
            Gets whether this Element supports vertical mouse panning
            
            Default implementation returns false; derived elements that want
            to support panning must override this property implementation
            and return true
            
            If a derived element returns true, the mouse is captured when
             the middle button is pressed. The virtual 'OnMousePanVertical' method 
             will be called during the capture. Derived elements that want to support
             panning should override OnMousePanVertical, and perform scrolling operations
             from within that method
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.SupportsHorizontalMousePanning">
            <summary>
            Gets whether this Element supports horizontal mouse panning
            
            Default implementation returns false; derived elements that want
            to support panning must override this property implementation
            and return true
            
            If a derived element returns true, the mouse is captured when
             the middle button is pressed. The virtual 'OnMousePanHorizontal' method 
             will be called during the capture. Derived elements that want to support
             panning should override OnMousePanHorizontal, and perform scrolling operations
             from within that method
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.HasCapture">
            <summary>
            Indicates if the element has capture.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.CancelCaptureOnEscape">
            <summary>
            Indicates if capture for this element should be terminated if the escape key is pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ToolTipItem">
            <summary>
            Returns or sets an object that provides tooltip information for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.InkProvider">
            <summary>
            Returns the InkProvider registered for our control's container.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object associated with the element.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> Derived elements that plan to return an accessible object must override 
            the <see cref="P:Infragistics.Win.UIElement.IsAccessibleElement"/> member.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UIElement.AccessibilityInstanceResolved">
            <summary>
            Returns the accessible object associated with this element or one of its parent elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElement.ThemedElementRegion">
            <summary>
            Returns the region of this element that themed drawing should be clipped to. The default implementation returns null.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElement.MousePanningParams">
            <summary>
            Defines all constants and member variables
            used for mouse panning support
            </summary>
        </member>
        <member name="F:Infragistics.Win.AdjustableUIElement.initialUpDownAdjustmentPointInBottomBorder">
            <summary>
            Indicates which border was clicked on to start the up/down adjustment
            </summary>
        </member>
        <member name="F:Infragistics.Win.AdjustableUIElement.initialLeftRightAdjustmentPointInRightBorder">
            <summary>
            Indicates which border was clicked on to start the left/right adjustment
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.#ctor(Infragistics.Win.UIElement,System.Boolean,System.Boolean)">
            <summary>
            Constructor initializes a new instance of <b>AdjustableUIElement</b>. (requires a parent element )
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="supportsLeftRightAdjustments">True for vertical bar adjustments</param>
            <param name="supportsUpDownAdjustments">True for horizonatl bar adjustments</param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.SupportsUpDownAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized vertically
            by clicking on the passed in mouse point
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.SupportsLeftRightAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized horizontally
            by clicking on the passed in mouse point
            </summary>
            <param name="point"><see cref="T:System.Drawing.Point"/> in client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.PointInAdjustableArea(System.Drawing.Point)">
            <summary>
            Returns true if the point is in the adjustable area.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.GetAdjustableCursor(System.Drawing.Point)">
            <summary>
            The cursor to use over the adjustable area of the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.GetAdjustmentRange(System.Drawing.Point,Infragistics.Win.UIElementAdjustmentRangeParams@)">
            <summary>
            Returns the range limits for adjusting the element in either or both
            dimensions. It also returns the initial rects for the vertical and horizontal
            bars that will need to be inverted during the mouse drag operation.
            </summary>
            <param name="point">The point where the mouse is in client coordinates</param>
            <param name="range">Returned limits</param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.CanStartAdjustment(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is pressed down on the adjustable area 
            before an adjustment begins.
            </summary>
            <param name="e">Mouse event args from the MouseDown</param>
            <returns>True if an adjustment can be started</returns>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnElementAdjustmentStart(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when a mousedown is received and a resize operation is started..
            </summary>
            <param name="isUpDownAdjustment"></param>
            <param name="initialUpDownAdjustmentPointInBottomBorder"></param>
            <param name="isLeftRightAdjustment"></param>
            <param name="initialLeftRightAdjustmentPointInRightBorder"></param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.InvertHorizontalBar">
            <summary>
            Inverts the horizontal bar (for up/down adjustments)
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.InvertVerticalBar">
            <summary>
            Inverts the vertical bar (for left/right adjustments)
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.InvertRect(System.Drawing.Rectangle)">
            <summary>
            inverts the passed in rect (calling it twice with the same
            rect removes it)
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.InvertLine(System.Drawing.Rectangle)">
            <summary>
            Inverts the line from the top/left to the right/bottom of the
            passed in rect (calling it twice with the same
            rect removes it). This should only be called when the rect has
            a zero width or height.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the element or during capture
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnNewDeltaX(System.Int32)">
            <summary>
            Called when the the X delta has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnNewDeltaY(System.Int32)">
            <summary>
            Called when the the Y delta has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released
            </summary>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.ApplyAdjustment(System.Drawing.Point)">
            <summary>
            Called after a move/resize operation. 
            </summary>
            <param name="delta"><see cref="T:System.Drawing.Point"/></param>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnElementAdjustmentAborted">
            <summary>
            Called after a CaptureAborted is received and the adjustment is canceled. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnElementAdjusted(System.Drawing.Point)">
            <summary>
            Called after a move/resize operation to notify any listeners 
            </summary>
        </member>
        <member name="M:Infragistics.Win.AdjustableUIElement.OnCaptureAborted">
            <summary>
            Called if escape is pressed to cancel an adjustment
            operation
            </summary>
        </member>
        <member name="E:Infragistics.Win.AdjustableUIElement.ElementAdjusted">
            <summary>
            Fired after the element has been adjusted
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsUpDownAdjustments">
            <summary>
            True if this element supports up and down adjustments
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsUpDownAdjustmentsFromTopBorder">
            <summary>
            True if this element supports up and down adjustments by grabbing the top border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsUpDownAdjustmentsFromBottomBorder">
            <summary>
            True if this element supports up and down adjustments by grabbing the bottom border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsLeftRightAdjustments">
            <summary>
            True if this element supports left to right adjustments
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsLeftRightAdjustmentsFromLeftBorder">
            <summary>
            True if this element supports left to right adjustments by grabbing the left border
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.SupportsLeftRightAdjustmentsFromRightBorder">
            <summary>
            True if this element supports left to right adjustments by grabbing the right border
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.DrawAdjustmentBarWhileSizing">
            <summary>
            True if Adjustment Bar should be drawn while sizing.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.Adjustable">
            <summary>
            Returns true if this element can be moved or resized by the mouse 
            </summary>
        </member>
        <member name="P:Infragistics.Win.AdjustableUIElement.AdjustForControlPosition">
            <summary>
            Used to determine if the delta calculated during an adjustment operation should be 
            adjusted to account for the repositioning of the containing control in the screen - e.g.
            if the control may be repositioned during the adjustment.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AlphaLevelEditorForm">
            <summary>
            Summary description for AlphaLevelEditorForm.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Design.AlphaLevelEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Infragistics.Win.Design.AlphaLevelEditorForm.OnAlphaLevelChanged">
            <summary>
            Event fired when the user selects a new alpha level.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AlphaLevelEditorForm.OnAlphaLevelChangedEventHandler">
            <summary>
            Delegate for handling the event that is fired when the user selects a new alpha level.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AlphaLevelEditorForm.AlphaLevelChangedEventArgs">
            <summary>
            Eventargs for the AlphaLevelChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditorForm.AlphaLevelChangedEventArgs.#ctor(System.Int16)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AlphaLevelEditorForm.AlphaLevelChangedEventArgs.AlphaLevel">
            <summary>
            The new alpha level.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearanceBase">
            <summary>  
            An abstract base class that is used to expose apperance related properties.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearanceBase.internalIDValue">
            <summary>
            An internal id used during serialization/de-serialization
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>AppearanceBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.#ctor(System.String)">
            <summary>
            Constructor, initializes a new instance of <b>AppearanceBase</b> class.
            </summary>
            <param name="key">Key into the appearances collection</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.#ctor(System.String,System.Int32)">
            <summary>
            Constructor, initializes a new instance of <b>AppearanceBase</b> class.
            </summary>
            <param name="key">Key into the appearances collection</param>
            <param name="id">Internal ID used during serialization/deserialization.</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">Internal ID used during serialization/deserialization.</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.Equals(System.Object)">
            <summary>
            If object is of the same type, compares contents to determine equality.
            </summary>
            <param name="obj"><see cref="T:System.Object"/>to compare to.</param>
            <returns><b>True</b>if objects are equal, otherwise <b>False</b>.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>Hash code for this object</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerialize">
            <summary>
            Returns true if any appearance property is set to a non-default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.MergeData(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Merges/copies the non-default appearance property settings from this object
            into the target AppearanceData structure based on the properties requested. 
            </summary>
            <param name="target">The target appearance structure (copy to).</param>
            <param name="requestedProps">Bit flags identifying the properties to be merged. </param>
            <remarks>Only those properties that are still set to their default values on the target structure will be merged.</remarks>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.Reset">
            <summary>
            Resets all properties back to their defaults
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.Clone">
            <summary>
            Returns a clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackColor">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackColor2">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackColorDisabled">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackColorDisabled2">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackColor">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackColorDisabled">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackColor2">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackColorDisabled2">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackColorAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackColorAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackHatchStyle">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackHatchStyle">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackGradientAlignment">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackGradientAlignment">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBackGradientStyle">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBackGradientStyle">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeForeColor">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeForeColorDisabled">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetForeColor">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetForeColorDisabled">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeForegroundAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetForegroundAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBorderColor">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBorderColor">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBorderColor3DBase">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBorderColor3DBase">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeBorderAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetBorderAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeTextTrimming">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetTextTrimming">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeTextHAlign">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetTextHAlign">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeTextVAlign">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetTextVAlign">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageHAlign">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageHAlign">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageVAlign">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageVAlign">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeFontData">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetFontData">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeCursor">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetCursor">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImage">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImage">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.GetImage(System.Windows.Forms.ImageList)">
            <summary>
            Returns the image property as an image. If it was set as an index
            into an imagelist control it will return the image at that index.
            If the image property was set to an image it will return that image.
            </summary>
            <param name="imageList">The image list to search</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageBackground">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageBackground">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageBackgroundAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageBackgroundAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageBackgroundOrigin">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageBackgroundOrigin">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeImageBackgroundStyle">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetImageBackgroundStyle">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeAlphaLevel">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetAlphaLevel">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.HasPropertyBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if the requested property has been set
            </summary>
            <param name="requestedProp">Only one bit representing a single property should be set </param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.HavePropertiesBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if any of the requested property have been set
            </summary>
            <param name="propertiesToCheck">One or more bits representing multiple properties can be passed in.</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ShouldSerializeThemedElementAlpha">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.ResetThemedElementAlpha">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.CreateFont(System.Drawing.Font,System.Single)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <param name="scalingFactor"></param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceBase.CreateFont(System.Drawing.Font)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.InternalID">
            <summary>
            An internal id used during serialization/de-serialization
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.Key">
            <summary>
            The key of the item in the appearances collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.Data">
            <summary>
            The internal structure that actually holds the property values
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackColor">
            <summary>
            The primary color used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackColor2">
            <summary>
            The second color used in a gradient fill of the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackColorDisabled">
            <summary>
            The primary color used to fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackColorDisabled2">
            <summary>
            The second color used to gradient fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackColorAlpha">
            <summary>
            Specifies what alpha level (opacity) is applied to the background color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackHatchStyle">
            <summary>
            Specifies if a hatch brush will be used to fill the background.
            </summary>
            <remarks>If a <see cref="P:Infragistics.Win.AppearanceBase.BackGradientStyle"/> is specified the BackHatchStyle will be ignored.</remarks>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackGradientAlignment">
            <summary>
            Determines how the BackGradientStyle is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BackGradientStyle">
            <summary>
            Specifies if and how a color gradient will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ForeColor">
            <summary>
            The color of text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ForeColorDisabled">
            <summary>
            The color of text for disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ForegroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BorderColor">
            <summary>
            The color used to draw 2D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BorderColor3DBase">
            <summary>
            The color used as the base for calculating the shadow and highlight colors when drawing 3D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.BorderAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.TextTrimming">
            <summary>
            Specifies how text will be rendered when there is not enough room to display the entire string.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.TextHAlign">
            <summary>
            The alignment of text horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.TextVAlign">
            <summary>
            The alignment of text vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageHAlign">
            <summary>
            The alignment of the Image horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageVAlign">
            <summary>
            The alignment of the Image vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.FontData">
            <summary>
            The font override settings to be used for displaying text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.Cursor">
            <summary>
            The mouse cursor. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.Image">
            <summary>
            The foreground image. Can be either an image or an index into
            the imagelist's collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the foreground image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageBackground">
            <summary>
            The background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageBackgroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageBackgroundOrigin">
            <summary>
            The origin of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ImageBackgroundStyle">
            <summary>
            The style of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.AlphaLevel">
            <summary>
            The level (0 to 255) used for alpha blending (0 means default).  This value is used when the
            BackColorAlpha, BorderAlpha, ForegroundAlpha, ImageAlpha, or ImageBackgroundAlpha properties
            are set to 'UseAlphaLevel'.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.HasFontData">
            <summary>
            Returns true if any of the fontdata properties are not 
            set to their default values
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceBase.ThemedElementAlpha">
            <summary>
            Specifies what alpha level (opacity) is applied to a themed element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Appearance">
            <summary>  
            A class that contains a set of properties related to the visual appearance
            of an object.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Appearance.dataValue">
            <summary>
            The internal structure that actually holds the property values
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>Appearance</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor(Infragistics.Win.AppearanceData@)">
            <summary>
            Constructor, initializes a new instance of <b>Appearance</b> class.
            </summary>
            <param name="sourceData">The appearance properties will be initialized to the values in this structure.</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key into the appearances collection</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor(System.String,System.Int32)">
            <summary>
            Constructor, initializes a new instance of <b>Appearance</b> class.
            </summary>
            <param name="key">Key into the appearances collection</param>
            <param name="id">Internal ID used during serialization/deserialization.</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor(System.Int32)">
            <summary>
            Constructor, initializes a new instance of <b>Appearance</b> class.
            </summary>
            <param name="id">Internal ID used during serialization/deserialization.</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.ShouldSerialize">
            <summary>
            Returns true if any appearance property is set to a non-default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property has changed on a sub object
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.Clone">
            <summary>
            Returns a clone of the appearance object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Appearance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the appearance object
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.ToString">
            <summary>
            Returns the number of non-default properties. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.MergeData(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Merges/copies the non-default appearance property settings from this object
            into the target AppearanceData structure based on the properties requested. 
            </summary>
            <param name="target">The target appearance structure (copy to).</param>
            <param name="requestedProps">Bit flags identifying the properties to be merged. </param>
            <remarks>Only those properties that are still set to their default values on the target structure will be merged.</remarks>
        </member>
        <member name="M:Infragistics.Win.Appearance.Reset">
            <summary>
            Resets all properties back to their defaults
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.ShouldSerializeFontData">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.ResetFontData">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.GetImage(System.Windows.Forms.ImageList)">
            <summary>
            Returns the image property as an image. If it was set as an index
            into an imagelist control it will return the image at that index.
            If the image property was set to an image it will return that image.
            </summary>
            <param name="imageList">The image list to serach</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.OnDispose">
            <summary>
            Called when and active object is Disposed to notify a
            derived class when the object has been Disposed.
            The default implmentation does nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.HasPropertyBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if the requested property has been set
            </summary>
            <param name="requestedProp">Only one bit representing a single property should be set </param>
        </member>
        <member name="M:Infragistics.Win.Appearance.HavePropertiesBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if any of the requested property have been set
            </summary>
            <param name="propertiesToCheck">One or more bits representing multiple properties can be passed in.</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.CreateFont(System.Drawing.Font,System.Single)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <param name="scalingFactor"></param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.Appearance.CreateFont(System.Drawing.Font)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.Appearance.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.Appearance.OnDeserialization(System.Object)">
            <summary>
            Invoked after the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for the this parameter is not currently implemented.</param>
        </member>
        <member name="P:Infragistics.Win.Appearance.Data">
            <summary>
            The internal structure that actually holds the property values
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackColor">
            <summary>
            The primary color used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackColor2">
            <summary>
            The second color used in a gradient fill of the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackColorDisabled">
            <summary>
            The primary color used to fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackColorDisabled2">
            <summary>
            The second color used to gradient fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackColorAlpha">
            <summary>
            Specifies what alpha level (opacity) is applied to the background color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackHatchStyle">
            <summary>
            Specifies if a hatch brush will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackGradientAlignment">
            <summary>
            Determines how the BackGradientStyle is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BackGradientStyle">
            <summary>
            Specifies if and how a color gradient will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ForeColor">
            <summary>
            The color of text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ForeColorDisabled">
            <summary>
            The color of text for disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ForegroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BorderColor">
            <summary>
            The color used to draw 2D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BorderColor3DBase">
            <summary>
            The color used as the base for calculating the shadow and highlight colors when drawing 3D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.BorderAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.TextTrimming">
            <summary>
            Specifies how text will be rendered when there is not enough room to display the entire string.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.TextHAlign">
            <summary>
            The alignment of text horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.TextVAlign">
            <summary>
            The alignment of text vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageHAlign">
            <summary>
            The alignment of the Image horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageVAlign">
            <summary>
            The alignment of the Image vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.FontData">
            <summary>
            The font override settings to be used for displaying text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.Cursor">
            <summary>
            The mouse cursor. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.Image">
            <summary>
            The foreground image. Can be either an image or an index into
            the imagelist's collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the foreground image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageBackground">
            <summary>
            The background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageBackgroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the background image.
            </summary>
            JAS 5/25/05 - Derived classes shouldn't re-apply the LocalizedDescription attribute.
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageBackgroundOrigin">
            <summary>
            The origin of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ImageBackgroundStyle">
            <summary>
            The style of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.AlphaLevel">
            <summary>
            The level (0 to 255) used for alpha blending (0 means default).  This value is used when the
            BackColorAlpha, BorderAlpha, ForegroundAlpha, ImageAlpha, or ImageBackgroundAlpha properties
            are set to 'UseAlphaLevel'.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.ThemedElementAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to a themed element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Appearance.HasFontData">
            <summary>
            Returns true if any of the fontdata properties are not 
            set to their default values
            </summary>
        </member>
        <member name="T:Infragistics.Win.Appearance.AppearanceTypeConverter">
            <summary>
            Appearance object type converter.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.AppearanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.AppearanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Appearance.AppearanceImageTypeConverter">
            <summary>
            Appearance Image property type converter.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.AppearanceImageTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.AppearanceImageTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Appearance.AppearanceCursorConverter">
            <summary>
            Custom <see cref="T:System.Windows.Forms.CursorConverter"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.Appearance.AppearanceCursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="T:Infragistics.Win.LinkedAppearance">
            <summary>  
            An object that exposes the properties of an Appearance object.
            </summary><remarks>This class is used for serializing/deserializing
            a reference to an appearance that exists in the control's Appearances
            collection.</remarks>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.#ctor(System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>LinkedAppearance</b> class.
            </summary>
            <param name="id">Internal ID used during serialization/deserialization.</param>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.ShouldSerialize">
            <summary>
            Returns true always since we need to maintain the link to the
            appearance in the collection even if the appearance has all
            default properties. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property has changed on a sub object.
            </summary>
            <param name="propChange"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.ToString">
            <summary>
            Returns the index in the collection and the key value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.MergeData(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Merges/copies the non-default appearance property settings from this object
            into the target AppearanceData structure based on the properties requested. 
            </summary>
            <param name="target">The target appearance structure (copy to).</param>
            <param name="requestedProps">Bit flags identifying the properties to be merged. </param>
            <remarks>Only those properties that are still set to their default values on the target structure will be merged.</remarks>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.Reset">
            <summary>
            Resets all properties back to their defaults
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.Clone">
            <summary>
            Returns a clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.ShouldSerializeFontData">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.ResetFontData">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.GetImage(System.Windows.Forms.ImageList)">
            <summary>
            Returns the image property as an image. If it was set as an index
            into an imagelist control it will return the image at that index.
            If the image property was set to an image it will return that image.
            </summary>
            <param name="imageList">The image list to serach</param>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.HasPropertyBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if the requested property has been set
            </summary>
            <param name="requestedProp">Only one bit representing a single property should be set </param>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.HavePropertiesBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if any of the requested property have been set
            </summary>
            <param name="propertiesToCheck">One or more bits representing multiple properties can be passed in.</param>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.CreateFont(System.Drawing.Font,System.Single)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <param name="scalingFactor"></param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.CreateFont(System.Drawing.Font)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.Key">
            <summary>
            The key of the item in the appearances collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.RootAppearance">
            <summary>
            Returns the Appearance object that this object is linked to (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.HasRootAppearance">
            <summary>
            Returns true if the RootAppearance has been set.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.Data">
            <summary>
            The internal structure that actually holds the property values
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackColor">
            <summary>
            The primary color used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackColor2">
            <summary>
            The second color used in a gradient fill of the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackColorDisabled">
            <summary>
            The primary color used to fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackColorDisabled2">
            <summary>
            The second color used to gradient fill the background of disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackColorAlpha">
            <summary>
            Specifies what alpha level (opacity) is applied to the background color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackHatchStyle">
            <summary>
            Specifies if a hatch brush will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackGradientAlignment">
            <summary>
            Determines how the BackGradientStyle is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BackGradientStyle">
            <summary>
            Specifies if and how a color gradient will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ForeColor">
            <summary>
            The color of text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ForeColorDisabled">
            <summary>
            The color of text for disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ForegroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BorderColor">
            <summary>
            The color used to draw 2D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BorderColor3DBase">
            <summary>
            The color used as the base for calculating the shadow and highlight colors when drawing 3D borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.BorderAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.TextTrimming">
            <summary>
            Specifies how text will be rendered when there is not enough room to display the entire string.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.TextHAlign">
            <summary>
            The alignment of text horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.TextVAlign">
            <summary>
            The alignment of text vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageHAlign">
            <summary>
            The alignment of the Image horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageVAlign">
            <summary>
            The alignment of the Image vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.FontData">
            <summary>
            The font override settings to be used for displaying text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.Cursor">
            <summary>
            The mouse cursor. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.Image">
            <summary>
            The foreground image. Can be either an image or an index into
            the imagelist's collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the foreground image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageBackground">
            <summary>
            The background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageBackgroundAlpha">
            <summary>
            An enumeration that specifies what alpha level (opacity) is applied to the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageBackgroundOrigin">
            <summary>
            The origin of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ImageBackgroundStyle">
            <summary>
            The style of the background image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.AlphaLevel">
            <summary>
            The level (0 to 255) used for alpha blending (0 means default).  This value is used when the
            BackColorAlpha, BorderAlpha, ForegroundAlpha, ImageAlpha, or ImageBackgroundAlpha properties
            are set to 'UseAlphaLevel'.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.ThemedElementAlpha">
            <summary>
            Specifies what alpha level (opacity) is applied to a themed element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.LinkedAppearance.HasFontData">
            <summary>
            Returns true if any of the fontdata properties are not 
            set to their default values
            </summary>
        </member>
        <member name="T:Infragistics.Win.LinkedAppearance.LinkedAppearanceTypeConverter">
            <summary>
            Appearance object type converter.
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.LinkedAppearanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.LinkedAppearance.LinkedAppearanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearanceData">
            <summary>
            The AppearanceData structure contains the properties that are used to render an object
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.ContentAlignmentFromHVAlign(Infragistics.Win.HAlign,Infragistics.Win.VAlign)">
            <summary>
            Static method for converting an VAlign and an HAlign value   
            into a ContentAlignment enumerator
            </summary>
            <param name="halign"><see cref="T:Infragistics.Win.HAlign"/></param>
            <param name="valign"><see cref="T:Infragistics.Win.VAlign"/></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.ConvertFromHatchStyle(System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            Converts from a <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> enumeration and returns a <see cref="P:Infragistics.Win.AppearanceData.BackHatchStyle"/> value that is equivalent.
            </summary>
            <param name="hatchStyle">The style to convert from.</param>
            <returns>The converted <see cref="P:Infragistics.Win.AppearanceData.BackHatchStyle"/> value.</returns>
            <remarks>The enumeration values are offset by 2 to accomodate the <see cref="F:Infragistics.Win.BackHatchStyle.Default"/> and <see cref="F:Infragistics.Win.BackHatchStyle.None"/> values of the <see cref="P:Infragistics.Win.AppearanceData.BackHatchStyle"/> enumeration.</remarks>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.ConvertToHatchStyle(Infragistics.Win.BackHatchStyle)">
            <summary>
            Converts from a <see cref="P:Infragistics.Win.AppearanceData.BackHatchStyle"/> enumeration and returns a <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> value that is equivalent.
            </summary>
            <param name="backHatchStyle">The style to convert from.</param>
            <returns>The converted <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> value.</returns>
            <remarks>The enumeration values are offset by 2 to accomodate the <see cref="F:Infragistics.Win.BackHatchStyle.Default"/> and <see cref="F:Infragistics.Win.BackHatchStyle.None"/> values of the <see cref="P:Infragistics.Win.AppearanceData.BackHatchStyle"/> enumeration.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If the passed in value is <see cref="F:Infragistics.Win.BackHatchStyle.Default"/> or <see cref="F:Infragistics.Win.BackHatchStyle.None"/>.</exception>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.HVAlignFromContentAlignment(System.Drawing.ContentAlignment,Infragistics.Win.HAlign@,Infragistics.Win.VAlign@)">
            <summary>
            Static method for converting a ContentAlignment alignment enumerator value into
            a VAlign and an HAlign value
            </summary>
            <param name="contentAlignment"><see cref="T:System.Drawing.ContentAlignment"/></param>
            <param name="halign"><see cref="T:Infragistics.Win.HAlign"/></param>
            <param name="valign"><see cref="T:Infragistics.Win.VAlign"/></param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.MergeAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearanceData,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Merges/copies properties from the source to the target
            structure based on the properties requested 
            </summary>
            <param name="target">The target appearance structure (copy to).</param>
            <param name="source">The source appearance structure (copy from).</param>
            <param name="requestedProps">Bit flags identifying the properties to be merged. </param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.Merge(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Merges/copies properties from the source to the target
            structure based on the properties requested 
            </summary>
            <param name="target">The target appearance structure (copy to).</param>
            <param name="source">The source appearance structure (copy from).</param>
            <param name="requestedProps">Bit flags identifying the properties to be merged. </param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.CreateFont(System.Drawing.Font)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.CreateFont(System.Drawing.Font,System.Single)">
            <summary>
            This creates a font based on the FontData settings and the
            passed in base font.
            </summary>
            <param name="baseFont">This is the font used to supply default values for the created font. This parameter can not be null.</param>
            <param name="scalingFactor"></param>
            <returns>The created font. It is the caller's responsibility to dispose of this font when no longer needed. Note: if no FontData properties have been set or the property values are the same as the base font then this method will return null.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.IsSameFont(Infragistics.Win.AppearanceData@)">
            <summary>
            Checks if the font we would create is the same as would be created by the passed in AppearanceData.
            </summary>
            <param name="appData">The AppearanceData structure to compare.</param>
            <returns>Returns true if the font that would be created is the same.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.IsSameFont(System.Drawing.Font,System.Drawing.Font)">
            <summary>
            Checks if the font we would create is that same as the passed in font
            </summary>
            <param name="baseFont">The base font to use for default values.</param>
            <param name="font">The font to check</param>
            <returns>Returns true if the font that would be returned from CreateFont is the same as the passed in font.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.IsSameFont(System.Drawing.Font,System.Drawing.Font,System.Single)">
            <summary>
            Checks if the font we would create is that same as the passed in font
            </summary>
            <param name="baseFont">The base font to use for default values.</param>
            <param name="font">The font to check</param>
            <param name="scalingFactor">The scaling factor</param>
            <returns>Returns true if the font that would be returned from CreateFont is the same as the passed in font.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.IsSameFont(System.Drawing.Font,Infragistics.Win.AppearanceData@)">
            <summary>
            Checks if the font we would create is the same as the one that would be created by passed in appData.
            </summary>
            <param name="baseFont">The base font to use for default values.</param>
            <param name="appData">The AppearanceData structure to check</param>
            <returns>Returns true if the font that would be returned from CreateFont is the same as the one that would be returned by CreateFont when appData is passed in.</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.ResetFontData">
            <summary>
            Resets the property back to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.GetBackColor(System.Boolean)">
            <summary>
            Returns the back color to use for an element
            </summary>
            <param name="enabled">True if the element is enabled</param>
            <returns>The appropriate color</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.GetBackColor2(System.Boolean)">
            <summary>
            Returns the second back color to use for an element when doing a gradient fill.
            </summary>
            <param name="enabled">True if the element is enabled</param>
            <returns>The appropriate color</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.GetForeColor(System.Boolean)">
            <summary>
            Returns the color to use for an element's text
            </summary>
            <param name="enabled">True if the element is enabled</param>
            <returns>The appropriate color</returns>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.GetImage(System.Windows.Forms.ImageList)">
            <summary>
            Returns the image property as an image. If it was set as an index
            into an imagelist control it will return the image at that index.
            If the image property was set to an image it will return that image.
            </summary>
            <param name="imageList">The image list to serach</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.HasPropertyBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if the requested property has been set
            </summary>
            <param name="requestedProp">Only one bit representing a single property should be set </param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.HavePropertiesBeenSet(Infragistics.Win.AppearancePropFlags)">
            <summary>
            Returns true if any of the requested property have been set
            </summary>
            <param name="propertiesToCheck">One or more bits representing multiple properties can be passed in.</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceData.Clone">
            <summary>
            Returns a copy of the structure.
            </summary>
            <returns>A copy of the structure.</returns>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackColorAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the background color
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackHatchStyle">
            <summary>
            Gets/sets an enumeration that specifies if a hatch brush  will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackGradientAlignment">
            <summary>
            Gets/sets an enumeration that determines how the BackGradientStyle is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackGradientStyle">
            <summary>
            Gets/sets an enumeration that specifies if and how a color gradient will be used to fill the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackColor">
            <summary>
            The primary color used to fill the background
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackColor2">
            <summary>
            The second color used in a gradient fill of the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackColorDisabled">
            <summary>
            The color of the background for disabled elements
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BackColorDisabled2">
            <summary>
            The second color used in a gradient fill of the background
            for disabled elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.AlphaLevel">
            <summary>
            The level (0 to 255) used for alpha blending (0 means default).
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ForegroundAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the foreground text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ForeColor">
            <summary>
            The color of text
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ForeColorDisabled">
            <summary>
            The color of text in a disabled element
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BorderAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the borders
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BorderColor">
            <summary>
            The border color for non-3D borders
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.BorderColor3DBase">
            <summary>
            The base color used to create the shadow and highlight colors
            for raised or inset 3d border styles. If BorderColor3DBase is not
            set then the BackColor will be used.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.FontData">
            <summary>
            The fontdata properties used to draw text
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.HasFontData">
            <summary>
            Returns true if any of the fontdata properties are not 
            set to their default values
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageBackgroundOrigin">
            <summary>
            Gets/sets an enumeration that specifies the origin of the background
            image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageBackgroundStyle">
            <summary>
            Gets/sets an enumeration that specifies the style of the background
            image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.Cursor">
            <summary>
            The mouse cursor 
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.TextTrimming">
            <summary>
            Specifies how text will be rendered when there is not
            enough room to display the entire string.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.TextHAlign">
            <summary>
            The alignment of text horizontally
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.TextVAlign">
            <summary>
            The aligmnent of text vertically
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageHAlign">
            <summary>
            The horizontal alignment of the image 
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageVAlign">
            <summary>
            The vertical aligmnent of the image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageBackground">
            <summary>
            Gets/sets the background image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageBackgroundAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the background image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.Image">
            <summary>
            The foreground image. Can be either an image or an index into
            the imagelist's collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ImageAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the foreground image
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.ThemedElementAlpha">
            <summary>
            Gets/sets an enumeration that specifies which alpha level to apply
            to the themed element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceData.NonDefaultSettings">
            <summary>
            Bit flags that indicate which properties have non-default values.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ResolveAppearanceCallback">
            <summary>
            Delegate for appearance resolution.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearanceHolder">
            <summary>
            AppearanceHolder is used internally by a class that will expose
            one or more Appearance properties and an Appearances collection.
            During serialization the AppearanceHolder will serialize either
            the Appearance object or, if the Appearance is a member of the
            collection, its key or id. This is because the Appearance object
            will get serialized as part of the collection. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when another sub object that we are listening to notifies
            us that one of its properties has changed.
            </summary>
            <param name="propChange"></param>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.Clone">
            <summary>
            Returns a clone of the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.ShouldSerialize">
            <summary>
            Returns true is any of the properties have been
            set to non-default values
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.Reset">
            <summary>
            Resets all properties back to their default values
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the appearnce object
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceHolder.InitializeFrom(Infragistics.Win.AppearanceHolder)">
            <summary>
            Initializes the state of this object from a source object of
            the same type
            </summary>
            <param name="source"><see cref="T:Infragistics.Win.AppearanceHolder"/></param>
        </member>
        <member name="E:Infragistics.Win.AppearanceHolder.SubObjectPropChanged">
            <summary>
            Fired when a property is changed on this object or any of
            its sub objects
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceHolder.SubObjectPropChangeHandler">
            <summary>
            Returns the event handler that notifies OnSubObjectPropChanged
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceHolder.Collection">
            <summary>
            Gets/sets the associated appearances collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceHolder.RootAppearance">
            <summary>
            For Appearance objects returns the object, for LinkedAppearances, returns the Appearance
            that it is linked to (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceHolder.Appearance">
            <summary>
            Appearance object
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearanceHolder.HasAppearance">
            <summary>
            Returns true if an appearance object has been created.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ColorChooser">
            <summary>
            Dialog used to choose a color.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ColorChooser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorChooser.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraImageEditor.ColorChooser"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorChooser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorChooser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorChooser.Color">
            <summary>
            Gets/sets the color to be displayed in the color wheel.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ColorSelector">
            <summary>
            Custom control for displaying a color palette.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraImageEditor.ColorSelector"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.RecalculateScrollInfo">
            <summary>
            Reevaluates the appropriate values for the scrollbar's
            Minimum, Maximum, and Enabled properties.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.GetColorFromPoint(System.Int32,System.Int32)">
            <summary>
            Returns the color at the specified point, or Color.Empty
            if the specified point does not coincide with a color box.
            </summary>
            <param name="x">The horizontal component of the location to be evaluated, expressed in client coordinates.</param>
            <param name="y">The vertical component of the location to be evaluated, expressed in client coordinates.</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.GetColorFromPoint(System.Drawing.Point)">
            <summary>
            Returns the color at the specified point, or Color.Empty
            if the specified point does not coincide with a color box.
            </summary>
            <param name="point">The location to be evaluated, expressed in client coordinates.</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.FireColorSelected(System.Drawing.Color)">
            <summary>
            Fires the ColorSelected event for the specified color
            </summary>
            <param name="color">The new selected color</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.ShouldSerializeUserDefinedColors">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraImageEditor.ColorSelector.UserDefinedColors"/> property should be serialized.
            </summary>
            <returns>True if the collection contains any items</returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.ResetUserDefinedColors">
            <summary>
            Clears the <see cref="P:Infragistics.Win.UltraImageEditor.ColorSelector.UserDefinedColors"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Returns the preferred size for the control based on the specified size.
            </summary>
            <param name="proposedSize">Proposed size of the control</param>
            <returns>The recommended size for the control based on the proposed size.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.OnResize(System.EventArgs)">
            <summary>
            Invokes the control's Resize event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Override the sizing of the control when autosized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.OnCreateControl">
            <summary>
            Initializes the control upon creation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.OnDoubleClick(System.EventArgs)">
            <summary>
            Invokes the control's DoubleClick event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelector.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to invoke the <b>MouseDown</b> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.ColorSelector.ColorSelected">
            <summary>
            Fired when a color is selected.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.SelectedForeColor">
            <summary>
            Returns or sets the currently selected forecolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.SelectedBackColor">
            <summary>
            Returns or sets the currently selected backcolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.ColorBoxWidth">
            <summary>
            Returns or sets the size of the color box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.ShowToolTips">
            <summary>
            Returns or sets whether tooltips should be displayed as the mouse moves over a color box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.ColorPalette">
            <summary>
            Returns or sets a custom palette used to provide the colors for the control.
            </summary>
            <remarks>
            <p class="body">When set to null (Nothing in VB), a default set of colors is used to populate the palette.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.IncludeKnownColors">
            <summary>
            Returns or sets whether the <see cref="T:System.Drawing.KnownColor"/> items are added to the palette.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.UserDefinedColors">
            <summary>
            Returns a collection containing the colors defined by the end user.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.AutoSize">
            <summary>
            Returns or sets whether the control automatically adjusts the size to ensure that partial color boxes are not displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.AcceptsFocus">
            <summary>
            Returns or sets whether the control can receive focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.DefaultSize">
            <summary>
            Returns the default size for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelector.Cursor">
            <summary>
            Returns or sets the default cursor for the component.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.CustomColorCollection">
            <summary>
            Modifiable colors collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraImageEditor.CustomColorCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.FillColors">
            <summary>
            Overriden. Adds the default colors to the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnClearComplete">
            <summary>
            Overriden. Invoked after the collection has been cleared.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Overriden. Invoked when an item is inserted into the collection.
            </summary>
            <param name="index">Index of the item</param>
            <param name="value">New item</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Overriden. Invoked when an item is removed from the collection.
            </summary>
            <param name="index">Index of the item</param>
            <param name="value">Item being removed</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Overriden. Invoked after an item in the collection has been set.
            </summary>
            <param name="index">Index of the item</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnValidate(System.Object)">
            <summary>
            Overriden. Used to validate the items added to the collection.
            </summary>
            <param name="value">Value to evaluate</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.Add(System.Drawing.Color)">
            <summary>
            Adds a color to the collection.
            </summary>
            <param name="color">Color to add</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.Insert(System.Int32,System.Drawing.Color)">
            <summary>
            Inserts a color into the collection.
            </summary>
            <param name="index">Index at which to insert the color</param>
            <param name="color">Color to insert</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.Remove(System.Drawing.Color)">
            <summary>
            Removes a color from the collection.
            </summary>
            <param name="color">Color to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the collection using the specified comparer.
            </summary>
            <param name="comparer">Object used to sort the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.CustomColorCollection.OnCollectionChanged(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.UltraImageEditor.CustomColorCollection.CollectionChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.CustomColorCollection.CollectionChanged">
            <summary>
            Invoked when the collection's contents have changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraImageEditor.ColorWheelControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.Dispose(System.Boolean)">
            <summary>
            Overriden. Invoked when the control is disposed.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoke when the mouse is pressed down on the control.
            </summary>
            <param name="e">MouseEventArgs e</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over the control.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is released over the control.
            </summary>
            <param name="e">Mouse event args</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Invokes the <b>Paint</b> event.
            </summary>
            <param name="e">Paint event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnResize(System.EventArgs)">
            <summary>
            Used to invoked the Resize event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the color property with the specified hue, saturation and luminosity.
            </summary>
            <param name="hue">A value between 0 and 255 that represents the hue.</param>
            <param name="saturation">A value between 0 and 255 that represents the saturation,</param>
            <param name="brightness">A value between 0 and 255 that represents the brightness.</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorWheelControl.OnColorChanged(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.UltraImageEditor.ColorWheelControl.ColorChanged"/> event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorWheelControl.Color">
            <summary>
            Returns or sets the current selected color.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.ColorWheelControl.ColorChanged">
            <summary>
            Invoked when the color has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AppearanceImageEditorForm">
            <summary>
            Summary description for AppearanceImageEditorForm.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Design.AppearanceImageEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceImageEditorForm.SelectedImage">
            <summary>
            Returns the
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceImageEditorForm.CurrentImageResolved">
            <summary>
            Returns the resolved value of the current image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceImageEditorForm.SelectedImageResolved">
            <summary>
            Returns the resolved value of the selected image.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.frmImageDimensions">
            <summary>
            Dialog for setting the image dimensions.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageDimensions.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraImageEditor.frmImageDimensions"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageDimensions.#ctor(System.Drawing.Size)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraImageEditor.frmImageDimensions"/> class.
            </summary>
            <param name="initialDimensions">Initial Dimensions</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageDimensions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageDimensions.ShowMe(System.Drawing.Size)">
            <summary>
            Displays the dialog.
            </summary>
            <param name="initialDimensions">The dimensions with which to initially populate the dialog fields.</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.frmImageDimensions.Dimensions">
            <summary>
            Returns the new image dimensions.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.frmImageDimensions.MaximumDimensions">
            <summary>
            Returns or sets the maximum size for the image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageEditor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraImageEditor.frmImageEditor"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.frmImageEditor.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.frmImageEditor.Image">
            <summary>
            Returns the Image that resulted from the dialog session, or null if the session was canceled.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.SelectedColorIndicator">
            <summary>
            Control used to select a forecolor and backcolor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraImageEditor.SelectedColorIndicator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnSelectedBackColorChanged(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedBackColorChanged"/>
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnSelectedForeColorChanged(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedForeColorChanged"/>
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnColorsSwitched(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.ColorsSwitched"/>
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Used to invoke the <b>Paint</b> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overriden. Used to adjust the size of the control
            </summary>
            <param name="left">Left</param>
            <param name="top">Top</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="specified">Indicates the type of size change.</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to invoke the <b>MouseDown</b>
            </summary>
            <param name="e">MouseEventArgs</param> 
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.OnCreateControl">
            <summary>
            Initializes the control upon creation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedBackColor">
            <summary>
            Returns or sets the currently selected backcolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedForeColor">
            <summary>
            Returns or sets the currently selected forecolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.MaximumBoxSize">
            <summary>
            Returns or sets the maximum extent of the color boxes
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.MaximumArrowExtent">
            <summary>
            Returns or sets the maximum extent of the swap color arrow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.AutoSize">
            <summary>
            Returns or sets whether the control will automatically adjust its size.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedBackColorChanged">
            <summary>
            Invoked when the backcolor has been changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedForeColorChanged">
            <summary>
            Invoked when the forecolor has been changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.ColorsSwitched">
            <summary>
            Invoked when the <see cref="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedBackColor"/> and <see cref="P:Infragistics.Win.UltraImageEditor.SelectedColorIndicator.SelectedForeColor"/> have been switched
            </summary>
        </member>
        <member name="M:Infragistics.Win.frmTextToolbar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.frmTextToolbar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.frmTextToolbar.FontStyle">
            <summary>
            Returns the style of the font reflected by this dialog.
            </summary>
        </member>
        <member name="P:Infragistics.Win.frmTextToolbar.FontName">
            <summary>
            Returns the name of the font reflected by this dialog.
            </summary>
        </member>
        <member name="P:Infragistics.Win.frmTextToolbar.FontSize">
            <summary>
            Returns the size of the font reflected by this dialog.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IImageListProvider">
            <summary>
            This is used by the <see cref="T:Infragistics.Win.Appearance"/> object's <see cref="P:Infragistics.Win.Appearance.Image"/> property's uieditor to selecting images from the list.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IImageListProvider.ImageList">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.ImageList"/> or null.
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearancesCollection">
            <summary>
            A collection of Appearance objects.
            </summary>
            <seealso cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/>
            <seealso cref="T:System.Runtime.Serialization.ISerializable"/>
            <seealso cref="T:System.ICloneable"/>
            <seealso cref="T:System.Collections.IList"/>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.#ctor(Infragistics.Win.IImageListProvider)">
            <summary>
            Constructor, initializes a new instance of <b>AppearancesCollection</b> class.
            </summary>
            <param name="imagelistProvider"><see cref="T:Infragistics.Win.IImageListProvider"/> The image list provider (usually the control or component).</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.#ctor(Infragistics.Win.IImageListProvider,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="imagelistProvider"><see cref="T:Infragistics.Win.IImageListProvider"/> The image list provider (usually the control or component).</param>
            <param name="initialCapacity">The expected number of entries</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Initialize(Infragistics.Win.IImageListProvider)">
            <summary>
            Called after de-serialization to set the imagelistProvider.
            </summary>
            <param name="imagelistProvider"><see cref="T:Infragistics.Win.IImageListProvider"/> The image list provider (usually the control or component).</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Clone">
            <summary>
            Returns a clone of the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.CloneAndAppendContents(Infragistics.Win.AppearancesCollection)">
            <summary>
            Clones each appearance in the source collection and appends it to
            this collection.
            </summary>
            <param name="source">The collection of Appearance objects to clone.</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Add(System.Object)">
            <summary>
            Add the appearance to the colection
            </summary>
            <param name="value">Must be a Appearance object</param>
            <returns>The index</returns>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the appearance from the colection
            </summary>
            <param name="value">Must be a appearance</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the appearance from the collection at the specified index
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the appearance into the colection
            </summary>
            <param name="index">The index where to insert the item</param>
            <param name="value">The Appearance object</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Insert(System.Int32,Infragistics.Win.Appearance)">
            <summary>
            Inserts the appearance into the colection
            </summary>
            <param name="index">The index where to insert the item</param>
            <param name="value">The Appearance object</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Add">
            <summary>
            Adds a new appearance object to the collection
            </summary>
            <exception cref="T:System.ArgumentNullException">
               The <paramref name="layout"/>argument was <see langword="null"/>.
            </exception>
            <returns>The newly added appearance object</returns>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Add(System.String)">
            <summary>
            Adds a new appearance object to the collection
            </summary>
            <param name="key">the unique key to identify the new appearance</param>
            <returns>The newly added appearance object</returns>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Remove(Infragistics.Win.Appearance)">
            <summary>
            Removes an appearance from the collection
            </summary>
            <param name="value">Removes this <see cref="T:Infragistics.Win.Appearance"/> from the collection.</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Remove(System.String)">
            <summary>
            Removes an appearance from the collection
            </summary>
            <param name="key">Key of the appearance to remove.</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.Remove(System.Int32)">
            <summary>
            Removes an appearance from the collection
            </summary>
            <param name="index">index of the appearance to remove.</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns>The type safe enumerator</returns>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property has changed on an appearance in the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.AppearancesCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            A collection of Appearance objects.
            </summary>
            <seealso cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/>
            <seealso cref="T:System.Runtime.Serialization.ISerializable"/>
            <seealso cref="T:System.ICloneable"/>
            <seealso cref="T:System.Collections.IList"/>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.ImagelistProvider">
            <summary>
            <p>Returns the ImagelistProvider for this collection.</p>
            <p>This is used by the <see cref="T:Infragistics.Win.Appearance"/> object's <see cref="P:Infragistics.Win.Appearance.Image"/> property's uieditor to selecting images from the list.</p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.IsReadOnly">
            <summary>
            True if the collection is read-only
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.IsFixedSize">
            <summary>
            Returns false denoting that the collection is not fixed in size.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.Item(System.Int32)">
            <summary>
            Indexer (0 based index)
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.Item(System.String)">
            <summary>
            Indexer (by string key)
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.InitialCapacity">
            <summary>
            Specifies the initial capacity of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.AppearancesCollection.All">
            <summary>
            The collection as an array of objects (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearanceEnumerator">
            <summary>
            Enumerator for the AppearanceCollection
            </summary>
        </member>
        <member name="M:Infragistics.Win.AppearanceEnumerator.#ctor(Infragistics.Win.AppearancesCollection)">
            <summary>
            Constructor
            </summary>
            <param name="appearances"></param>
        </member>
        <member name="P:Infragistics.Win.AppearanceEnumerator.Current">
            <summary>
            Type-safe version of Current
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AppearanceUITypeEditor">
            <summary>
            The editor for a property of type <see cref="T:Infragistics.Win.Appearance"/>.
            </summary>
            <remarks>
            <p>Assuming the <see cref="T:Infragistics.Win.Appearance"/> object has a reference to an <see cref="T:Infragistics.Win.AppearancesCollection"/>, this editor will drop down a list of the <see cref="T:Infragistics.Win.Appearance"/>s in the collection.</p>
            <p>After selecting an <see cref="T:Infragistics.Win.Appearance"/> from the collection, changing any properties on that <see cref="T:Infragistics.Win.Appearance"/> will affect all <see cref="T:Infragistics.Win.Appearance"/> properties that share that <see cref="T:Infragistics.Win.Appearance"/>.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearancesCollection"/>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="T:Infragistics.Win.Design.GradientStyleEditor">
            <summary>
            UITypeEditor for the  enumeration of <see cref="T:Infragistics.Win.Appearance"/> objects.
            </summary>
            <seealso cref="T:Infragistics.Win.Design.AppearanceEnumStyleEditor"/>
        </member>
        <member name="T:Infragistics.Win.Design.AppearanceEnumStyleEditor">
            <summary>
            Abstract base class type editor for appearance related enumeration members
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if the a small representation of the value is rendered in the property grid.
            </summary>
            <param name="context">Context information about the property to render</param>
            <returns>True to indicate that a value will be rendered</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Invoked when a small representation of the value should be rendered.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.InitializeMembers(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked when the member variables should be initialized from the context
            </summary>
            <param name="context">Context from which to initialize</param>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.InitializeListBox(System.Windows.Forms.ListBox)">
            <summary>
            Invoked when the listbox used to display the enum values is created.
            </summary>
            <param name="listbox"></param>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.OnDrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Invoked when the item in the listbox should be rendered
            </summary>
            <param name="sender">Object invoking the event</param>
            <param name="e">Draw item event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceEnumStyleEditor.PaintEnum(System.Enum,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Used to paint the representation of the enum value
            </summary>
            <param name="value">Enumeration value to render</param>
            <param name="rect">Location to render into</param>
            <param name="g">Graphics object</param>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceEnumStyleEditor.BackColor">
            <summary>
            Primary backcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceEnumStyleEditor.BackColor2">
            <summary>
            Secondary backcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.AppearanceEnumStyleEditor.EnumType">
            <summary>
            Returns the type of enumeration supported.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.GradientStyleEditor.PaintEnum(System.Enum,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Used to paint the representation of the enum value
            </summary>
            <param name="value">Enumeration value to render</param>
            <param name="rect">Location to render into</param>
            <param name="g">Graphics object</param>
        </member>
        <member name="P:Infragistics.Win.Design.GradientStyleEditor.EnumType">
            <summary>
            Returns the type of enumeration supported.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.BackHatchStyleEditor">
            <summary>
            UITypeEditor for the BackHatchStyle enumeration of <see cref="T:Infragistics.Win.Appearance"/> objects.
            </summary>
            <seealso cref="T:Infragistics.Win.Design.AppearanceEnumStyleEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.BackHatchStyleEditor.PaintEnum(System.Enum,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Used to paint the representation of the enum value
            </summary>
            <param name="value">Enumeration value to render</param>
            <param name="rect">Location to render into</param>
            <param name="g">Graphics object</param>
        </member>
        <member name="P:Infragistics.Win.Design.BackHatchStyleEditor.EnumType">
            <summary>
            Returns the type of enumeration supported.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.AppearanceImageEditor">
            <summary>
            Type editor for the appearance Image property
            </summary>
            <seealso cref="T:System.Drawing.Design.ImageEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if the a small representation of the value is rendered in the property grid.
            </summary>
            <param name="context">Context information about the property to render</param>
            <returns>True to indicate that a value will be rendered</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Invoked when a small representation of the value should be rendered.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.AppearanceFromContext(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the AppearanceBase from the supplied context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Design.AppearanceImageEditor.ShouldUseBaseEditor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns true if the base ImageEditor should be used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.Design.AlphaLevelEditor">
            <summary>
            Type editor for the appearance Image property
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.AlphaLevelEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if the a small representation of the value is rendered in the property grid.
            </summary>
            <param name="context">Context information about the property to render</param>
            <returns>True to indicate that a value will be rendered</returns>
        </member>
        <member name="T:Infragistics.Win.Serialization.Binder">
            <summary>
            Controls class loading and mandates what class to load.
            </summary>
            <seealso cref="T:Infragistics.Shared.Serialization.Binder"/>
        </member>
        <member name="M:Infragistics.Win.Serialization.Binder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type
            </summary>
            <param name="assemblyName">Specifies the Assembly name of the serialized object</param>
            <param name="typeName">Specifies the Type name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:Infragistics.Win.ButtonUIElementBase">
            <summary>
            Abstract base class for button elements.
            </summary>
            <seealso cref="T:Infragistics.Win.UIElement"/>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.InitializeCheckState(System.Boolean)">
            <summary>
            Initializes the check state of the state button.
            </summary>
            <remarks>
            If the value changes, the click event will not be invoked.
            </remarks>
            <param name="isChecked">True if the state button is checked.</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.InitializeCheckState(System.Windows.Forms.CheckState)">
            <summary>
            Initializes the check state of the state button.
            </summary>
            <remarks>
            If the value changes, the click event will not be invoked.
            </remarks>
            <param name="checkState">The check state of the state button</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ToggleCheckState">
            <summary>
            Changes the check state of the button to the next value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.PerformClick">
            <summary>
            Performs a button click.
            </summary>
            <remarks>
            <p class="body">If the <see cref="P:Infragistics.Win.ButtonUIElementBase.CanClickButton"/> method returns true, the 
            <see cref="M:Infragistics.Win.ButtonUIElementBase.ButtonClick"/> will be invoked and the <see cref="E:Infragistics.Win.ButtonUIElementBase.ElementClick"/> 
            event will be raised. Also, if the <see cref="P:Infragistics.Win.ButtonUIElementBase.ButtonType"/> is <b>Toggle</b>, 
            the <see cref="M:Infragistics.Win.ButtonUIElementBase.ToggleCheckState"/> method will be invoked to change the 
            <see cref="P:Infragistics.Win.ButtonUIElementBase.CheckState"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ButtonClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
            <returns>True to prevent the base implementation from being invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the state button using the System theme.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>True if the element was able to be rendered using the system themes.</returns>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnCheckStateChange">
            <summary>
            Invoked when the checked state of the button changes other than when it is initialized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnButtonStateChange">
            <summary>
            Invoked when the state of the button changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element.
            </summary>
            <param name="drawParams">UIElementDrawParams struct providing information regarding the drawing operation.</param>
        </member>
        <member name="F:Infragistics.Win.ButtonUIElementBase.buttonStateValue">
            <summary>
            Member used to maintain the button state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonUIElementBase.leftButtonDown">
            <summary>
            True when the last mouse button depressed was the logical left mouse button.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>ButtonUIElementBase</b> class.
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            merges the appearance object into the passed in structure
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ResolveWindowsXPCommandButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.UIElementButtonState)">
            <summary>
            Sets the appearance data needed for the element to have the WindowsXPCommand button look.
            Provides default values for BackColor, BackColor2, BackGradientStyle,
            and BorderColor3DBase. BorderColor is set here if the mouse is over the element.
            </summary>
            <param name="appearanceData">The ApperanceData struct to modify.</param>
            <param name="requestedProps">The requested properties to be set.</param>
            <param name="buttonState">The current state of the button being rendered.</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.ButtonUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draws the button borders
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Buttons capture the mouse. So this method sets captureMouse
            to true and returns true
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.InvalidateBtnStateArea">
            <summary>
            Invalidates the area of the element that needs 
            to be redrawn when the button's state changes.
            For a command button this is the entire element
            but for a checkbox or radio button it is just
            the indicator
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Called to give control focus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear internal flags and invalidate the button
            </summary>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ResetCaptureFlags">
            <summary>
            clear the internal flags and invalidate
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.FireClickEvent">
            <summary>
            Triggers the ElementClick event
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ResetButtonState">
            <summary>
            Resets the button state and checks if the mouse is currently over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.VerifyMouseOverButton">
            <summary>
            Checks if the mouse is over the button and updates the ButtonState. If the state
            differs from that before the check is made, the element is invalidated.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.GetBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Returns the widths of all four borders
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.OnDoubleClick(System.Boolean)">
            <summary>
            DoubleClick calls OnClick since a command button treats 
            a doubleclick as a second click.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.Contains(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if the point is over the element. This may be 
            overridden in derived classes for specialized hit test logic.
            </summary>
            <param name="point">In client coordinates</param>
            <param name="ignoreClipping">Specifieds if we should ignore clipping or not</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonType">
            <summary>
            Returns the type of button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ThreeState">
            <summary>
            Gets/sets if the state button supports an indeterminate state.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsChecked">
            <summary>
            Determines if the state button is checked.
            </summary>
            <remarks>
            If the value changes, the ElementClick event will be invoked. To initialize the state of the check, use
            the <see cref="M:Infragistics.Win.ButtonUIElementBase.InitializeCheckState(System.Windows.Forms.CheckState)"/> method.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.CheckState">
            <summary>
            Determines the check state of the state button.
            </summary>
            <remarks>
            If the value changes, the ElementClick event will be invoked. To initialize the state of the check, use
            the <see cref="M:Infragistics.Win.ButtonUIElementBase.InitializeCheckState(System.Windows.Forms.CheckState)"/> method.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.NextCheckState">
            <summary>
            Returns the next check state that the button will have when clicked.
            </summary>
        </member>
        <member name="E:Infragistics.Win.ButtonUIElementBase.ElementClick">
            <summary>
            Fired when the button is clicked
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.DefaultBackColor">
            <summary>
            Returns the default backcolor for the button
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.DefaultForeColor">
            <summary>
            Returns the default forecolor for the button
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsButtonStyleMouseActive">
            <summary>
            Indicates if the button style requires invalidation of the element
            on the mouse enter and exit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.CanClickButton">
            <summary>
            Returns whether the button may be pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.Appearance">
            <summary>
            An optional appearance object
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.HotTracking">
            <summary>
            Returns or sets a value whether the button will support hottracking.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonState">
            <summary>
            Returns information regarding the mouse in relation to the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.RectInsideButtonBorders">
            <summary>
            Returns the rect of the element inside the button borders that is always available 
            regardless of the current button state.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.CancelCaptureOnEscape">
            <summary>
            Indicates if capture for this element should be terminated if the escape key is pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsMouseOver">
            <summary>
            Indicates if the mouse is currently over the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsMouseDown">
            <summary>
            Indicates if the button is currently pressed by the logical left mouse button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsMouseDownAndOver">
            <summary>
            Indicates if the logical left mouse button is currently pressed and over the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsStateButtonDown">
            <summary>
            Indicates if the state button is currently in the down position.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.Enabled">
            <summary>
            Gets/sets the enabled state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.IsDefaultButton">
            <summary>
            Gets or sets whether the button is rendered as the default button.
            </summary>
            <remarks>
            <p class="body">A default button is usually rendered with an additional </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ReserveDefaultButtonArea">
            <summary>
            Gets or sets whether the space for the default button outline will be reserved
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ImageRegion">
            <summary>
            Gets or sets the <see cref="P:Infragistics.Win.ButtonUIElementBase.ImageRegion"/> object used to provide the region for the shaped button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.Region">
            <summary>
            Returns the region of this element. The deafult returns the element's
            Rect as a region. This method can be overriden to supply an irregularly
            shaped region 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ClipSelf">
            <summary>
            Returning true causes all drawing of this element to be expicitly clipped
            to its region
            </summary>
        </member>
        <member name="T:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject">
            <summary>
            Accessible object that represents a button element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.#ctor(Infragistics.Win.ButtonUIElementBase,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
            <param name="defaultDescription">Default description for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.#ctor(Infragistics.Win.ButtonUIElementBase,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.#ctor(Infragistics.Win.ButtonUIElementBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElementBase.ButtonElementAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ButtonWithTextUIElementBase">
            <summary>
            Abstract base class for button elements that can have
            text (e.g. command buttons, checkboxs and option buttons.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonWithTextUIElementBase.textElement">
            <summary>
            The text uielement
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonWithTextUIElementBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonWithTextUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonWithTextUIElementBase.PositionChildElements">
            <summary>
            Creates and positions child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonWithTextUIElementBase.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonWithTextUIElementBase.TextRect">
            <summary>
            Returns the rectangle for the text element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonWithTextUIElementBase.Text">
            <summary>
            The button text (caption)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonWithTextUIElementBase.Vertical">
            <summary>
            Determines whether the button text is drawn vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonWithTextUIElementBase.TextHAlign">
            <summary>
            Determines how the button text is aligned horizontally.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonWithTextUIElementBase.TextVAlign">
            <summary>
            Determines how the button text is aligned vertically.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGButton">
            <summary>
            Infragistics simple Button class, derived from System.Windows.Forms.Button.
            Overrides ProcessMnemonic to provide correct processing when the control is disabled or not visible.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGButton.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGCheckBox">
            <summary>
            Infragistics simple CheckBox class, derived from System.Windows.Forms.CheckBox.
            Overrides ProcessMnemonic to provide correct processing when the control is disabled or not visible.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGCheckBox.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGRadioButton">
            <summary>
            Infragistics simple RadioButton class, derived from System.Windows.Forms.RadioButton.
            Overrides ProcessMnemonic to provide correct processing when the control is disabled or not visible.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGRadioButton.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGListBox">
            <summary>
            Infragistics simple ListBox class, derived from System.Windows.Forms.ListBox.
            </summary>
            <remarks>
            <p class="body">Overrides OnCreateControl and OnHandleCreated to ensure that an owner drawn listbox is set to redraw its contents when resized and provides. It also provides 
            basic functionality for rendering an insertion mark while dragging over the listbox and also for automatically initiating a drag when pressing down on selected items.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.IGControls.IGListBox"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.CalculateInsertionIndex(System.Drawing.Point)">
            <summary>
            Calculates the insertion point based on the specified client coordinates.
            </summary>
            <param name="clientPt"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.InitiateDrag">
            <summary>
            Invoked when the mouse is pressed down on a selected item when using a multi select style.  Note, this requires unmanaged code rights.
            </summary>
            <returns>True to prevent processing of the mouse down message (i.e. if a drag operation was started)</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnInsertionMarkChanged(System.Int32,System.Boolean)">
            <summary>
            Invoked when the insertion mark is rendered or cleared
            </summary>
            <param name="index">Index at which the insertion mark was rendered</param>
            <param name="aboveItem">True if the insertion mark was above the specified item or false if it was below the specified item</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnHandleCreated(System.EventArgs)">
            <summary>
            Invoked when the handle for the control is created.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnCreateControl">
            <summary>
            Invoked when the control is first created.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Invoked during a drag operation while the mouse is over the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Invoked to determine if the drag operation should continue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Invoked when the drag operation is over.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnDragLeave(System.EventArgs)">
            <summary>
            Invoked when mouse leaves the bounds of the control during a drag operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Invoked when an owner draw item should be rendered.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGListBox.DrawInsertionMark">
            <summary>
            Returns or sets whether an insertion mark is rendered under an item during a drag operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGListBox.AutoDragItems">
            <summary>
            Indicates if selected items are automatically dragged. Note, this requires unmanaged code rights and does not handle the repositioning of items within the group.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGListBox.CurrentInsertionIndex">
            <summary>
            Returns the location of the current insertion point.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGListBox.ListBoxNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invoked when a message for the associated control is processed.
            </summary>
            <param name="msg">Message to process</param>
        </member>
        <member name="T:Infragistics.Win.ButtonUIElement">
            <summary>
            Element that behaves like a command button.
            </summary>
            <seealso cref="T:Infragistics.Win.ButtonWithTextUIElementBase"/>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>ButtonUIElement</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ButtonUIElement.InvalidateBtnStateArea">
            <summary>
            Invalidates the area of the element that needs 
            to be redrawn when the button's state changes.
            For a command button this is the entire element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ButtonUIElement.TextRect">
            <summary>
            Returns the rectangle for the text element
            </summary>
        </member>
        <member name="T:Infragistics.Win.IButtonDrawStateSource">
            <summary>
            Interface implemented by a class that supplies the button 
            draw state to an indicator element
            </summary>
        </member>
        <member name="P:Infragistics.Win.IButtonDrawStateSource.ButtonDrawState">
            <summary>
            Returns the state of the button
            </summary>
        </member>
        <member name="P:Infragistics.Win.IButtonDrawStateSource.CheckState">
            <summary>
            Returns the check state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IButtonDrawStateSource.ElementButtonState">
            <summary>
            Returns the UIElement button state of the source.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckIndicatorUIElement">
            <summary>
            The element that renders itself a the check indicator in a checkbox
            </summary>
            <seealso cref="T:Infragistics.Win.UIElement"/>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.IButtonDrawStateSource)">
            <summary>
            Constructor, initializes a new instance of the <b>CheckIndicatorUIElement</b> class.
            </summary>
            <param name="parent">The Parent UIElement that is hosting this element</param>
            <param name="buttonDrawStateSource"><see cref="T:Infragistics.Win.IButtonDrawStateSource"/></param>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawBackColor and do nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawImageBackground and do nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawBorders and do nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawForeground to draw the check box
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckIndicatorUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="T:Infragistics.Win.CheckBoxUIElement">
            <summary>
            Element that behaves like a check box control.
            </summary>
            <seealso cref="T:Infragistics.Win.ButtonWithTextUIElementBase"/>
            <seealso cref="T:Infragistics.Win.IButtonDrawStateSource"/>
        </member>
        <member name="F:Infragistics.Win.CheckBoxUIElement.checkAlignValue">
            <summary>
            Controls where the check mark is placed in relation to the
            element rect
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>CheckBoxUIElement</b> class.
            </summary>
            <param name="parent">The parent element</param>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.InitializeState(System.Boolean,System.Windows.Forms.CheckState)">
            <summary>
            Used to Initialize the states of the CheckBox
            </summary>
            <param name="threeState"><b>True</b> for a triple state checkbox, <b>False</b> for dual state.</param>
            <param name="checkState">The initial <see cref="P:Infragistics.Win.CheckBoxUIElement.CheckState"/>of the checkbox.</param>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.PositionChildElements">
            <summary>
            Creates and positions child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.InvalidateBtnStateArea">
            <summary>
            Invalidates just the check indicator
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            merges the appearance object into the passed in structure
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element.
            </summary>
            <param name="drawParams">Struct containing the graphics object, appearance information, etc. used for the rendering operation</param>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.ButtonState">
            <summary>
            Returns information regarding the mouse in relation to the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.Infragistics#Win#IButtonDrawStateSource#CheckState">
            <summary>
            Returns the checkstate of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.Infragistics#Win#IButtonDrawStateSource#ElementButtonState">
            <summary>
            Returns the state of the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.Infragistics#Win#IButtonDrawStateSource#ButtonDrawState">
            <summary>
            Returns the buttonstate used for drawing the check box
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.CheckSize">
            <summary>
            The size of the check image in pixels (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.CheckRect">
            <summary>
            Returns the rectangle for the checkbox element (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.TextRect">
            <summary>
            Returns the rectangle for the text element
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.CheckState">
            <summary>
            The checked state of the btn element
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.CheckAlign">
            <summary>
            Controls where the check mark is placed in relation to the
            element rect
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.ThreeState">
            <summary>
            Indicates whether clicking on the element will cycle thru
            3 states (checked/unchecked/indeterminate) or just 2
            states (checked/unchecked)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.IsButtonStyleMouseActive">
            <summary>
            Indicates if the button style requires invalidation of the element
            on the mouse enter and exit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.DrawsBackColor">
            <summary>
            Determines if the element will draw its own back color
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.TextArea">
            <summary>
            Returns the rect surrounding the text of the text element
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.ReadOnly">
            <summary>
            Controls whether or not the element responds to mouse clicks
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxUIElement.CanClickButton">
            <summary>
            Controls whether or not button can be clicked
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckBoxWithImageUIElement">
            <summary>
            Summary description for CheckBoxUIElementWithImage.
            </summary>
            <remarks>
            This class adds image support to the CheckBoxUIElement
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Summary for CheckBoxWithImageUIElement:
            Contains and positions CheckBox and Image UIElements.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.#ctor(Infragistics.Win.UIElement,System.Boolean)">
            <summary>
            Summary for CheckBoxWithImageUIElement:
            Contains and positions CheckBox and Image UIElements.
            </summary>
            <param name="parent">parent UIElement</param>
            <param name="positionImageInsideTextRect">This is the standard winforms behavior. Setting this to false 
            will position the image outside of the optionbutton+text element rect.</param>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.OnDispose">
            <summary>
            Clean up resources used
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.PositionChildElements">
            <summary>
            Position and Size the Child UIElements
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.GetPrefferedSize(System.Drawing.Font)">
            <summary>
            Gets the 'preferred' size needed to render the entire element.
            </summary>
            <param name="sizeFont">The base control font.</param>
            <returns>The size necessary to render the control.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckBoxWithImageUIElement.GetPrefferedSize(System.Drawing.Font,System.Boolean)">
            <summary>
            Gets the 'preferred' size needed to render the entire element.
            </summary>
            <param name="sizeFont">The base control font.</param>
            <param name="includeImageHeight">Include image dimensions in calculation.</param>
            <returns>The size necessary to render the control.</returns>
        </member>
        <member name="P:Infragistics.Win.CheckBoxWithImageUIElement.ImageElement">
            <summary>
            Returns the imageElement, creating it if necessary
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxWithImageUIElement.PositionImageInsideTextRect">
            <summary>
            Determines if image should be positioned inside of the text rect. 
            This is the standard winforms behavior. Setting this to false 
            will position the image outside of the optionbutton+text element rect.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxWithImageUIElement.Image">
            <summary>
            Set/Get the image to be displayed by the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckBoxWithImageUIElement.ImageAlign">
            <summary>
            Sets the alignment of the image that will be displayed in the face of the element
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditCheckStyle">
            <summary>
            Enumeration of Property identifiers for the UltraScrollBar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditCheckStyle.Check">
            <summary>
            Display as check
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditCheckStyle.Button">
            <summary>
            Display as State Button
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditCheckStyle.Custom">
            <summary>
            Display using custom images
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditor">
            <summary>
            Embeddable CheckBox Editor class.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase">
            <summary>
            An abstract base class for embeddable editors.
            </summary>
            <seealso cref="T:Infragistics.Shared.SubObjectBase"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>EmbeddableEditorBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor, initializes a new instance of the <b>EmbeddableEditorBase</b> class.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to test.</param>
            <returns>Returns true if the type can be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.CloseUp">
            <summary>
            Called to have the dropdown close up.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.DropDown">
            <summary>
            Called to drop down the dropdown.
            </summary>
            <returns>Returns true if successful.</returns>
            <remarks>The editor must already be in edit mode otherwise this method will return false.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EnterEditMode(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called to place the editor in edit mode.
            </summary>
            <param name="embeddableElement">The element that was returned from <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/>.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ExitEditMode(System.Boolean,System.Boolean)">
            <summary>
            Called to have the editor exit edit mode.
            </summary>
            <param name="forceExit">If true will force an exit even if exit event is cancelled.</param>
            <param name="applyChanges">If true any changes made while in edit mode will be applied.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDropDownState(Infragistics.Win.EmbeddableUIElementBase@)">
            <summary>
            Returns information about whether the dropdown is dropped down.
            </summary>
            <param name="embeddableElement">The element that was passed into <see cref="M:Infragistics.Win.EmbeddableEditorBase.EnterEditMode(Infragistics.Win.EmbeddableUIElementBase)"/>.</param>
            <returns>True if currently dropped down.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEditStatus(Infragistics.Win.EmbeddableUIElementBase@,System.Boolean@)">
            <summary>
            Returns information about whether the object is in edit mode.
            </summary>
            <param name="embeddableElement">The element that was returned from <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/>.</param>
            <param name="changed">True if the value has been changed since entering edit mode.</param>
            <returns>True if currently in edit mode.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="borders">If true will include the borders</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="borders">If true will include the borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
            <remarks>The default implementation ignores the width parameter, and calls the overload that doesn't take width</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="borders">If true will include the borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <param name="height">The constraining height. For most editors, this parameter is not applicable; editors that wrap items based on the available vertical space (i.e., <see cref="T:Infragistics.Win.OptionSetEditor"/>) use this parameter to determine how the items wrap. A value of zero implies no limit.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
            <remarks><p class="">The default implementation ignores the height parameter, and calls the overload that doesn't take height</p></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData">Key data</param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.DataValueToText(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts data value to text making use of any format provider and format strings that owner may provide. If unsuccessful, returns null.
            </summary>
            <param name="valueToConvert">The value to be converted</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.DataValueToText(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean)">
            <summary>
            Converts data value to text making use of any format provider and format strings that owner may provide. If unsuccessful, returns null.
            </summary>
            <param name="valueToConvert">The value to be converted</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="applyFormatString">Specifies whether the format string returned by the owner via the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)"/> method should be used when formatting the text. The format string should not be applied to embeddable elements that are currently in edit mode.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ValueToDataValue(System.Object,System.Type,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts val to an object of type returned by owner's GetDataType method. If it can
            not convert, it returns null. It makes use of any format provided and format string
            off the owner.
            </summary>
            <param name="valueToConvert"></param>
            <param name="owner"></param>
            <param name="convertToType"></param>
            <param name="ownerContext"></param>
            <returns>Converted value, null if unsuccessfull.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ValueToDataValue(System.Object,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Converts val to an object of type returned by owner's GetDataType method. If it can
            not convert, it returns null. It makes use of any format provided and format string
            off the owner.
            </summary>
            <param name="valueToConvert"></param>
            <param name="elementBeingEdited"></param>
            <returns>Converted value, null if unsuccessfull.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ValueToDataValue(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts val to an object of type returned by owner's GetDataType method. If it can
            not convert, it returns null. It makes use of any format provided and format string
            off the owner.
            </summary>
            <param name="valueToConvert"></param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <returns>Converted value, null if unsuccessfull.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ComparesByValue(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Returns whether the owner should compare items based on their underlying value rather than their display text.
            </summary>
            <param name="owner">The EmbeddableEditorOwnerBase-derived owner</param>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns></returns>
            <remarks>The default implementation returns true, implying that the owner should sort by the underlying data value.<br></br>
            Editors that support ValueLists will look at the owner's return from GetValueList; if an IValueList is supplied, the value of the SortByValue property will be returned.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ApplyValueAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Applies any appearance associated with the dataVal data value. Base implementation does nothing.
            </summary>
            <param name="appData"></param>
            <param name="resolveFlags">Properties to resolve.</param>
            <param name="dataVal">Data value.</param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <remarks>
            A derived class can override this method to apply any appearance settings assoicated with
            the data value to this object. For example, an editor that makes use fo value list items can
            apply appearance of the value list item associated with dataVal.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ResolveShowInkButton(Infragistics.Win.IInkProvider,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Returns whether this editor displays an ink button.
            </summary>
            <param name="inkProvider">The IInkProvider implementor that provides the inking capabilities.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used by the specified owner.</param>
            <returns>A boolean indicating whether the editor displays an ink button.</returns>
            <remarks>
            <p class="body">The default implementation returns <b>false</b>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.IsValidValue(System.String@)">
            <summary>
            Returns true if the edited value is valid (read-only).
            If the value is invalid, the 'errorMessage' out parameter can contain an error message.
            </summary>
            <param name="errorMessage">If the value is invalid, this out parameter can contain an error message.</param>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
            <returns>True if the editor's value is valid, else false.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
            <remarks>The method must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsDropDown"/> property.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.DoCloseUp">
            <summary>
            Closes the dropdown.
            </summary>
            <remarks>The method must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsDropDown"/> property.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetInkProvider(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Gets the InkProvider registered for the owner's container.
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <returns>The InkProvider registered for the owner control's container or null if no InkProvider is registered.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.HookOwnersKeyEvents">
            <summary>
            Start listening to the owner's key events
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnAfterDropDown">
            <summary>
            Called after the dropdown has been dropped down. 
            </summary>
            <remarks>The base implementation raises the AfterDropDown event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnAfterCloseUp">
            <summary>
            Called after the dropdown has been closed up. 
            </summary>
            <remarks>The base implementation raises the AfterCloseUp event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>The base implementation raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnAfterExitEditMode">
            <summary>
            Called after edit mode has been exited. 
            </summary>
            <remarks>The base implementation raises the AfterExitEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnBeforeDropDown(System.Boolean@)">
            <summary>
            Called before the dropdown has been dropped down. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <remarks>The base implementation raises the BeforeDropDown event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnBeforeEnterEditMode(System.Boolean@)">
            <summary>
            Called before edit mode has been entered. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <remarks>The base implementation raises the BeforeEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Called before edit mode has been exited. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <param name="forceExit">If true must exit even if exit event is cancelled.</param>
            <param name="applyChanges">If true any changes made while in edit mode will be applied.</param>
            <remarks>The base implementation raises the BeforeExitEditMode if fireEvent is true.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key down while in edit mode.
            </summary>
            <remarks>The default implementation does nothing. Derived editor classes that are interested in keystrokes from the owner when it has focus should override this method.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnOwnerKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Occurs when the owner gets a key press while in edit mode.
            </summary>
            <remarks>The default implementation does nothing. Derived editor classes that are interested in keystrokes from the owner when it has focus should override this method.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnOwnerKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key up while in edit mode.
            </summary>
            <remarks>The default implementation does nothing. Derived editor classes that are interested in keystrokes from the owner when it has focus should override this method.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.RaiseSelectionChangedEvent">
            <summary>
            Raises the SelectionChanged
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.RaiseValueChangedEvent">
            <summary>
            Raises the ValueChanged event and sets the value changed flag
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.RaiseKeyDownEvent(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.RaiseKeyPressEvent(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the KeyPress event
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.RaiseKeyUpEvent(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.OnDispose">
            <summary>
            Called when the editor is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.UnhookOwnersKeyEvents">
            <summary>
            Unhook from the owner's key events
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of
            the same type
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetTextSizeOfValue(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Int32)">
            <summary>
            Returns the size required to render the editor's value for the specified owner and ownerContext.
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="allowMultiline">Determines whether the value returned from the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsMultiLine(System.Object)"/> method is honored.</param>
            <param name="maxWidth">The constraining width</param>
            <returns>The size required to render the editor's value for the specified owner and ownerContext.</returns>
            <remarks><p class="note"><b>Note:</b> If the editor is in edit mode for the specified owner and ownerContext, the value of the editor's <see cref="P:Infragistics.Win.EmbeddableEditorBase.CurrentEditText"/> property is used rather than the value returned via the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.ApplyToolTipAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Applies tooltip backcolor, forecolor and BackGradientStyle to the specified 
            appearance. It also strips those flags from the requestedPropFlags parameter.
            </summary>
            <param name="appearance"></param>
            <param name="requestedPropFlags "></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.CanHandleConversionInternal(Infragistics.Win.ConversionDirection)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(Infragistics.Win.ConversionDirection,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Shorter overload of GetDataFilteredDestinationValue, throws exception in the case of invalid conversion.
            </summary>
            <param name="direction">Conversion direction.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(Infragistics.Win.ConversionDirection,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Shorter overload of GetDataFilteredDestinationValue.
            </summary>
            <param name="direction">Conversion direction.</param>
            <param name="isValidConversion">True if the source data was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(Infragistics.Win.ConversionDirection,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Shorter overload of GetDataFilteredDestinationValue.
            </summary>
            <param name="direction">Conversion direction.</param>
            <param name="isValidConversion">True if the source data was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="validMessage">Additional error information for IsDestinationValueValid(...).</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(System.Object,Infragistics.Win.ConversionDirection,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Shorter overload of GetDataFilteredDestinationValue, throws exception in the case of invalid conversion.
            </summary>
            <param name="sourceVal">Source value.</param>
            <param name="direction">Conversion direction.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(System.Object,Infragistics.Win.ConversionDirection,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts source data to destination using data filter or editor-specific automatic conversion.
            </summary>
            <param name="sourceVal">Source value.</param>
            <param name="direction">Conversion direction.</param>
            <param name="isValidConversion">True if the source data was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(System.Object,Infragistics.Win.ConversionDirection,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Converts source data to destination using data filter or editor-specific automatic conversion.
            </summary>
            <param name="sourceVal">Source value.</param>
            <param name="direction">Conversion direction.</param>
            <param name="isValidConversion">True if the source data was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="validMessage">Additional error information for IsDestinationValueValid(...).</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilteredDestinationValue(System.Object,Infragistics.Win.ConversionDirection,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Converts source data to destination using data filter or editor-specific automatic conversion.
            </summary>
            <param name="sourceVal">Source value.</param>
            <param name="direction">Conversion direction.</param>
            <param name="isValidConversion">True if the source data was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="validMessage">Additional error information for IsDestinationValueValid(...).</param>
            <param name="doAutoConv">Perform auto-conversion.</param>
            <param name="doIsValid">Perform validation check.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilterSourceValue(Infragistics.Win.ConversionDirection,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Gets default source value for specific conversion.
            </summary>
            <param name="direction">Conversion direction.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Source value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDataFilterDestinationType(Infragistics.Win.ConversionDirection,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Gets default destination type for specific conversion.
            </summary>
            <param name="direction">Conversion direction.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Source value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.UpdateDataFilterCache(Infragistics.Win.ConversionDirection,System.Object,System.Type,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Updates DataFilter cache if needed (first call or changed source value).
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Source value.</param>
            <param name="destinationType">Destination type.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>True if DataFilter handles specific conversion.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetDisplayValue">
            <summary>
            Override this in specific editor to provide display value. 
            </summary>
            <returns>Display string.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetEditorValue">
            <summary>
            Override this in specific editor to provide editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Override this in specific editor to check if converted value is valid.
            Note, this value does not use the ValueConstraint object returned by the owner's GetConstraints method during validation.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Override this in specific editor to provide automatic conversions for that editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.DefaultOwner">
            <summary>
            Returns the default embeddable editor owner, which may provide default owner-specific values for an editor
            </summary>
            <remarks>A standalone editor will return its own EmbeddableEditorOwnerBase-derived class instance as the default owner</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.CanFocus">
            <summary>
            Returns true if the editor can take focus while in edit mode (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.ElementBeingEdited">
            <summary>
            Returns the embeddable element that is currently in edit mode.
            </summary>
            <remarks>If the editor is not in edit mode then this property returns null.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.Focused">
            <summary>
            Returns true if the editor has focus (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.IsDroppedDown">
            <summary>
            Returns true if in edit mode and dropped down
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.IsInEditMode">
            <summary>
            Returns true if the editor is in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.IsValid">
            <summary>
            Returns true if the edited value is valid (read-only).
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the editor.  
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception thrown if editor is not in edit mode.</exception>
            <exception cref="T:System.NotSupportedException">Exception thrown if editor does not override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</exception>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectionStart">
            <summary>
            Gets or sets the starting point of text selected in the editor.  
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception thrown if editor is not in edit mode.</exception>
            <exception cref="T:System.NotSupportedException">Exception thrown if editor does not override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</exception>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectedText">
            <summary>
            Gets or sets the currently selected text in the editor.  
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception thrown if editor is not in edit mode.</exception>
            <exception cref="T:System.NotSupportedException">Exception thrown if editor does not override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</exception>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SupportsDropDown">
            <summary>
            Returns true if this editor supports a dropdown.
            </summary>
            <remarks>The default implementation returns false. Derived classes that override this property and return true must also override the <see cref="M:Infragistics.Win.EmbeddableEditorBase.DoDropDown"/> and <see cref="M:Infragistics.Win.EmbeddableEditorBase.DoCloseUp"/> methods.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText">
            <summary>
            Returns true if this editor supports selecting text.
            </summary>
            <remarks>The default implementation returns false. Derived classes that override this property and return true must also override the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SelectionStartInternal"/>, <see cref="P:Infragistics.Win.EmbeddableEditorBase.SelectionLengthInternal"/>, <see cref="P:Infragistics.Win.EmbeddableEditorBase.SelectedTextInternal"/> and <see cref="P:Infragistics.Win.EmbeddableEditorBase.TextLengthInternal"/> properties.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.TextLength">
            <summary>
            Gets the length of the text in the editor.  
            </summary>
            <exception cref="T:System.InvalidOperationException">Exception thrown if editor is not in edit mode.</exception>
            <exception cref="T:System.NotSupportedException">Exception thrown if editor does not override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</exception>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.Value">
            <summary>
            The current value being edited. Type matches editor owner data type.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.WantsOwnerKeyEvents">
            <summary>
            Specifies whether the editor wants to receive key events from the owner while in edit mode (read-only).
            </summary>
            <remarks>
            <p>If the editor doesn't take focus when it is in edit mode then it may want to listens in to keystrokes while the owner retains focus.</p>
            <p>The default implemenation returns the opposite of the CanFocus property.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SupportsValueList">
            <summary>
            Specifies whether the editor supports value list (read-only).
            </summary>
            <remarks>
            <p>If the editor makes use of value list returned by EmbeddableEditorOwnerBase, it returns true.</p>
            <p>The default implemenation returns false.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SupportsAutoSizeEdit">
            <summary>
            Specifies whether the editor supports AutoSizeEdit (read-only).
            </summary>
            <remarks>
            <p>If the editor supports automatically sizing itself to accommodate the data it contains, it returns true</p>
            <p>The default implementation returns false.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.IsEnteringEditMode">
            <summary>
            Indicates if the editor is about to enter edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectionLengthInternal">
            <summary>
            Gets or sets the number of characters selected in the editor.  
            </summary>
            <remarks>The property must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectionStartInternal">
            <summary>
            Gets or sets the starting point of text selected in the editor.  
            </summary>
            <remarks>The property must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.SelectedTextInternal">
            <summary>
            Gets or sets the currently selected text in the editor.  
            </summary>
            <remarks>The property must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.TextLengthInternal">
            <summary>
            Gets the length of the text in the editor.  
            </summary>
            <remarks>The property must be overidden in derived classes that override and return true from the <see cref="P:Infragistics.Win.EmbeddableEditorBase.SupportsSelectableText"/> property.</remarks>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.SelectionChanged">
            <summary>
            Occurs when a new value is selected from the dropdown.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.ValueChanged">
            <summary>
            Occurs when the value is changed in edit mode.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.BeforeDropDown">
            <summary>
            Occurs before dropping down the dropdown.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.AfterDropDown">
            <summary>
            Occurs after dropping down the dropdown.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.AfterCloseUp">
            <summary>
            Occurs after closing up the dropdown.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.BeforeEnterEditMode">
            <summary>
            Occurs before entering edit mode.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.AfterEnterEditMode">
            <summary>
            Occurs after entering edit mode.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.BeforeExitEditMode">
            <summary>
            Occurs before exiting edit mode.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.AfterExitEditMode">
            <summary>
            Occurs after exiting edit mode.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.KeyDown">
            <summary>
            Occurs on a key down while the editor is in edit mode and the editor has focus.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.KeyPress">
            <summary>
            Occurs on a key press while the editor is in edit mode and the editor has focus.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorBase.KeyUp">
            <summary>
            Occurs on a key up while the editor is in edit mode and the editor has focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.DataFilter">
            <summary>
            If different than null, specifies custom data filter used by the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.ExpectedType">
            <summary>
            Default type used by the editor in the case of data filter. Null means that editor supports 
            multiple data types and expects type to be set or provided by the owner.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorControlConverter">
            <summary>
            Type converter used to determine which controls should appear in the type editor for an <b>EditorControl</b> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorControlConverter.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorControlConverter"/> class.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorControlConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns true if the value is a valid component
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.DataFilterCache">
            <summary>
            Data filter cache.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject">
            <summary>
            Base class for the accessible object that will represent an editor 
            for a specific instance of an owner's object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate</param>
            <returns>
            An <b>AccessibleObject</b> that represents the child object at the given 
            screen coordinates. This method returns the calling object if the object 
            itself is at the location specified. Returns a null reference (Nothing in 
            Visual Basic) if no object is at the tested location.
            </returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.GetFocused">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EnterEditMode">
            <summary>
            Attempts to put the object associated with this specific instance of the accessible object into edit mode.
            </summary>
            <returns>A boolean indicating if the editor was able to enter edit mode for this accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.CacheUIElement">
            <summary>
            Causes the accessible object to retrieve and cache the uielement.
            </summary>
            <remarks>
            <p class="body">The first time that the UIElement property is invoked after calling this method, the element will be cached until
            the <see cref="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ReleaseCachedUIElement"/> method has been invoked. The <b>ReleaseUIElementCache</b> method must 
            be invoked once for each time that the <b>CacheUIElement</b> is invoked. The method is used to prevent the 
            uielement from being retreived from the owner each time that it is requested - e.g. when checking the bounds of the child accessible objects.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ReleaseCachedUIElement"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ReleaseCachedUIElement">
            <summary>
            Releases a reference to a cached uielement for the accessible object's editor instance.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> This method must be invoked once for each time that the <see cref="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.CacheUIElement"/> method is invoked.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.CacheUIElement"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.PerformChildNavigation(Infragistics.Win.AccessibleObjectWrapper,System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Processes the navigation request of the child accessible object.
            </summary>
            <param name="child">Child accessible object whose navigate method is being invoked.</param>
            <param name="direction">Indicates the direction of the navigation.</param>
            <returns>The accessible object based on the navigation direction.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.IndexOf(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the index of the specified child accessible object.
            </summary>
            <param name="child">Child accessible object to evaluate</param>
            <returns>-1 if the child was not found. Otherwise the index of the child is returned.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.CanContainFocusedItem">
            <summary>
            Indicates if the accessible object or one of its children may have the input focus.
            </summary>
            <returns>True if the editor is in edit mode for this instance and the control is focused. Otherwise false is returned.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Editor">
            <summary>
            Returns the associated editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Owner">
            <summary>
            Returns the associated owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.OwnerContext">
            <summary>
            Returns the owner context that can be used by the owner to identify the object that the accessible instance represents.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.IsInEditMode">
            <summary>
            Indicates if the associated editor is in edit mode for the owner and owner context represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.UIElement">
            <summary>
            Returns the UIElement associated with the accessible object instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueList">
            <summary>
            Returns the valuelist used by the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.Value">
            <summary>
            Returns the value of the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject">
            <summary>
            Base accessible object for children of an embeddable editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.UIElement">
            <summary>
            Returns the UIElement associated with the accessible instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.EditorChildAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject">
            <summary>
            Accessible object representing the dropdown button of an editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.DropDownButtonAccessibleObject.IsDroppedDown">
            <summary>
            Indicates if the object represented by the accessible object is dropped down.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject">
            <summary>
            Accessible object representing the dropdown button of an editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject.IsDroppedDown">
            <summary>
            Indicates if the ink input panel is dropped down.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.InkPopupButtonAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject">
            <summary>
            Accessible object representing the spin button of an editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.DoDefaultAction(System.Boolean)">
            <summary>
            Invoked when the default action of the child spin button item is invoked.
            </summary>
            <param name="increment">True if the up/more spin button is pressed, otherwise false.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.CanSpin(System.Boolean)">
            <summary>
            Used to determine the available state of the spin button item
            </summary>
            <param name="increment">True to determine the state of the up/more spin button, otherwise false to determine the state of the down/less spin button item.</param>
            <returns>True if the value can be changed by the specified spin button direction</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.GetSpinElement(System.Boolean)">
            <summary>
            Returns the UIElement for the specified spin button item
            </summary>
            <param name="increment">Direction of the spin button item whose element should be returned.</param>
            <returns>The uielement representing the spin button item or null if one is not available</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.SpinButtonAccessibleObject.SpinButtonItemAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject">
            <summary>
            Accessible object representing an IValueList
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.GetFocused">
            <summary>
            Retrieves the object that has the keyboard focus. 
            </summary>
            <returns>Returns null. The accessible object represents a hidden valuelist.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.GetSelected">
            <summary>
            Retrieves the currently selected child.
            </summary>
            <returns>Returns null. The accessible object represents a hidden valuelist.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject.ValueListAccessibleObject.ValueListItemAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>CheckEditor</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor, initializes a new instance of the <b>CheckEditor</b> class.
            </summary>
            <param name="defaultOwner"><see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/></param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a sub object
            </summary>
            <param name="propChange">PropChangeInfo object containing information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.OnAfterEnterEditMode">
            <summary>
            Fired after control enters edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.CanEditType(System.Type)">
            <summary>
            This editor only edits boolean and string values.
            </summary>
            <param name="type">Type we are attempting to convert.</param>
            <returns>true if type is boolean, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.OnOwnerKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles keyUp of owner
            </summary>
            <param name="sender"><see cref="T:System.Object"/> sending notification</param>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.CanRenderType(System.Type)">
            <summary>
            Only Boolean and string types can be rendered by this editor
            </summary>
            <param name="type">Type we are attempting to convert.</param>
            <returns>true if type is boolean, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include the borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData"><see cref="T:System.Windows.Forms.Keys"/></param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Boolean)">
            <summary>
            Resolves the elements appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="hotTracking">is item hottracking</param>		
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Boolean,System.Windows.Forms.CheckState)">
            <summary>
            Resolves the elements appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="hotTracking">is item hottracking</param>
            <param name="checkState">Value of the checkbox to resolve</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.SetNextState(System.Windows.Forms.CheckState)">
            <summary>
            Incremenets the state based on the threeState property
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.OnDispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ShouldSerializeHotTrackingAppearance">
            <summary>
            Called to determine if Appearance should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ShouldSerializeCheckedAppearance">
            <summary>
            Called to determine if Appearance should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ShouldSerializeIndeterminateAppearance">
            <summary>
            Called to determine if Appearance should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ResetCheckedAppearance">
            <summary>
            Called by environment to reset property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ResetHotTrackingAppearance">
            <summary>
            Called by environment to reset property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.ResetIndeterminateAppearance">
            <summary>
            Called by environment to reset property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Invoked before the <see cref="T:Infragistics.Win.CheckEditor"/> exits edit mode.
            </summary>
            <param name="cancel">By reference boolean indicating whether the exit should be cancelled.</param>
            <param name="forceExit">True if the editor is being forced out of edit mode.</param>
            <param name="applyChanges">True to apply changes.</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Object whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.GetEditorValue">
            <summary>
            Override this in specific editor to provide editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Override this in specific editor to provide automatic conversions for that editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="E:Infragistics.Win.CheckEditor.BeforeCheckStateChanged">
            <summary>
            Event to notify controls that checkstatus has changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.CheckEditor.AfterCheckStateChanged">
            <summary>
            Event to notify controls that checkstatus has changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.CheckEditor.ValidateCheckState">
            <summary>
            Fired before a change to the <see cref="P:Infragistics.Win.CheckEditor.CheckState"/> property is committed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CanFocus">
            <summary>
            The editor can take focus while in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.Focused">
            <summary>
            Returns true if the editor has focus (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.IsValid">
            <summary>
            Returns true if the edited value is valid (read-only).
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.Value">
            <summary>
            The current value being edited.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckedAppearance">
            <summary>
            Checked appearance for the object
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.HotTrackingAppearance">
            <summary>
            Down Checkbox appearance for the object
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.IndeterminateAppearance">
            <summary>
            Indeterminate Checkbox appearance for the object
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.HasHotTrackingAppearance">
            <summary>
            Returns whether or not the control has a hot tracking appearance
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.HasCheckedAppearance">
            <summary>
            Returns whether or not the control has a checked appearance
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.HasIndeterminateAppearance">
            <summary>
            Returns whether or not the control has an check indeterminate appearance
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.Text">
            <summary>
            Controls the text of the caption that will be displayed with the check
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.Style">
            <summary>
            Set/Get the view style of the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckAlign">
            <summary>
            Controls the alignment of the checkbox
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.WantsOwnerKeyEvents">
            <summary>
            WantsOwnerKeyEvents
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckState">
            <summary>
            The current state of the checkbox
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.ThreeState">
            <summary>
            Used to determine if the control allows for
            the indeterminate state
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditor.BeforeCheckStateChangedHandler">
            <summary>
            Fired before checkstate change
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditor.AfterCheckStateChangedHandler">
            <summary>
            Fired after checkstate change
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditor.ValidateCheckStateHandler">
            <summary>
            Handles the <see cref="F:Infragistics.Win.CheckEditor.ValidateCheckState"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.CheckEditor,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated check editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditor.CheckEditorAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValidateCheckStateEventArgs">
            <summary>
            Contains information about the editor's <see cref="F:Infragistics.Win.CheckEditor.ValidateCheckState"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValidateCheckStateEventArgs.#ctor(System.Windows.Forms.CheckState)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.ValidateCheckStateEventArgs"/> class.
            </summary>
            <param name="newCheckState">The new value for the editor's <see cref="P:Infragistics.Win.CheckEditor.CheckState"/> property.</param>
        </member>
        <member name="P:Infragistics.Win.ValidateCheckStateEventArgs.NewCheckState">
            <summary>
            Gets/sets the new value for the editor's <see cref="P:Infragistics.Win.CheckEditor.CheckState"/> property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditorCheckBoxUIElement">
            <summary>
            CheckEditorCheckBoxUIElement, derived from CheckBoxWithImageUIElement
            provides customized UI functionality for the CheckEditor class.
            </summary>
            <seealso cref="T:Infragistics.Win.CheckBoxWithImageUIElement"/>
        </member>
        <member name="M:Infragistics.Win.CheckEditorCheckBoxUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>CheckEditorCheckBoxUIElement</b> class.
            </summary>
            <param name="parentElement">Parent <see cref="T:Infragistics.Win.UIElement"/></param>
        </member>
        <member name="M:Infragistics.Win.CheckEditorCheckBoxUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditorCheckBoxUIElement.OnCheckStateChange">
            <summary>
            Fired when the checkstate of the Check element changes
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditorCheckBoxUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableCheckUIElement">
            <summary>
            EmbeddableCheckUIElement, an embeddable check user interface element. 
            Can be embedded in any UI that supports embeddable elements.
            </summary>
            <seealso cref="T:Infragistics.Win.EmbeddableUIElementBase"/>
        </member>
        <member name="T:Infragistics.Win.EmbeddableUIElementBase">
            <summary>
            An abstract base class used by objects that implement EmbeddableEditor to embed an element to render a value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is responsible for drawing the outer borders).</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the mouse is double clicked on this element. The default
            implementatiun just walks up the parent element chain.
            </summary>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.Initialize(Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to initialize the element.
            </summary>
            <param name="owner">An object that implements the EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements the EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.RaiseMouseDownEvent(Infragistics.Win.UIElement,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Raises the mouse down event
            </summary>
            <param name="sender">The element that was actually clicked on</param>
            <param name="mouseArgs">The mouse arguments</param>
            <param name="isButton">True if the element that was clicked on operates as a button.</param>
            <returns>If this method returns true, then the embeddable ui element must return true from the OnMouseDown method. If this method returns false, then do the default processing.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.RaiseMouseDownEvent(Infragistics.Win.EmbeddableMouseDownEventArgs)">
            <summary>
            Raises the mouse down event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.RaiseMouseUpEvent(Infragistics.Win.UIElement,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="sender">The element that was actually clicked on</param>
            <param name="mouseArgs">The mouse arguments</param>
            <param name="isButton">True if the element that was clicked on operates as a button.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableUIElementBase.RaiseDoubleClickEvent(Infragistics.Win.UIElement,System.Boolean)">
            <summary>
            Raises the double click event
            </summary>
            <param name="sender">The element that was actually clicked on</param>
            <param name="isButton">True is the element that was clicked on operates as a button.</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.Owner">
            <summary>
            An object that implements the EmbeddableEditorOwner interface (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.Editor">
            <summary>
            An object that implements the EmbeddableEditor interface (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.OwnerContext">
            <summary>
            Context information used by the owner to identify the value (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IncludeEditElements">
            <summary>
            If true will add associated elements (e.g. editing elements like spin buttons). This property is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.ReserveSpaceForEditElements">
            <summary>
            If true will reserve space for associated elements (e.g. editing elements like spin buttons). This property is read-only..
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.DrawOuterBorders">
            <summary>
            If true the element is expected to draw the outer borders. This property is read-only..
            </summary>
            <remarks><p class = "note"><b>Note</b>: Some embeddable elements must render borders in order to support WindowsXP themes. Consequently, when the <b>DrawOuterBorders</b> property is false, certain elements may not fully support themes.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IsToolTip">
            <summary>
            If true the element should draw as a tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IsHotTracking">
            <summary>
            Returns whether this element is hot tracking
            </summary>
            <remarks>This method returns true when the owner returns true from the IsHotTrackingEnabled method, and the cursor is currently positioned over the element</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IsMouseOverElement">
            <summary>
            Returns true if the mouse is over the element, otherwise it returns false.
            </summary>
            <remarks>
            <p class="note">Note: This is not based upon the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsHotTrackingEnabled(System.Object)"/></p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
            <remarks>This method is typically used to determine whether a tooltip needs to be displayed.<br></br>
            The default implementation returns <b>true</b></remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableUIElementBase.IsInEditMode">
            <summary>
            Returns whether this embeddable element is currently in edit mode.
            </summary>
            <remarks>
            The default implementation returns true only when this element's editor is in edit mode, and the editor's
            <see cref="P:Infragistics.Win.EmbeddableEditorBase.ElementBeingEdited"/> property references this element.
            </remarks>
        </member>
        <member name="E:Infragistics.Win.EmbeddableUIElementBase.MouseDown">
            <summary>
            Occurs when the user clicks on an embeddable element.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableUIElementBase.MouseUp">
            <summary>
            Occurs when the user clicks on an embeddable element.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableUIElementBase.DoubleClick">
            <summary>
            Occurs when the user double clicks on an embeddable element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is responsible for drawing the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.GetOwnerCheckState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.GetOwnerCheckState(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.OnDispose">
            <summary>
            Dispose of created objects
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableCheckUIElement.OnBeforeDraw">
            <summary>
            Invoked before the element is rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableCheckUIElement.DrawsFocusRect">
            <summary>
            Returns true if this  element needs to draw a focus rect. This should 
            be overridden since the default implementation always returns false. 
            </summary>
            <remarks>Even if this property returns true the focus will not be drawn unless the control has focus.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableCheckUIElement.CheckEditor">
            <summary>
            returns parent editor casted to a check editor
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditorImageAndTextButtonUIElement">
            <summary>
            CheckEditorImageAndTextButtonUIElement, provides statebutton functionality for CheckEditor.
            </summary>
            <seealso cref="T:Infragistics.Win.ImageAndTextButtonUIElement"/>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextButtonUIElement">
            <summary>
            A button element that displays text and an image.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextButtonUIElementBase">
            <summary>
            ImageAndTextButtonUIElementBase
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes	a new <b>ImageAndTextButtonUIElementBase</b>.
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UIElementButtonType)">
            <summary>
            Initializes	a new ImageAndTextButtonUIElementBase.
            </summary>
            <param name="parent">Parent element</param>
            <param name="buttonType">Type of button</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.AdjustImageAttributes(Infragistics.Win.UIElementDrawParams@,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Invoked when the image attributes for the child ImageUIElement are requested.
            </summary>
            <remarks>This method can be overridden in derived classes to supply the image attributes.</remarks>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.PositionChildElements">
            <summary>
            Positions any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the button.
            </summary>
            <param name="appearance">Struct to update with the appearance info.</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElementBase.UseDefaultAppearance">
            <summary>
            Determines whether the button should use its internal appearance property to initialize the appearance for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElementBase.Style">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElementBase.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElementBase.ImageAndTextElement">
            <summary>
            Returns the ImageAndTextUIElement contained by the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElementBase.Provider">
            <summary>
            Returns the object that implements the IUIElementImageAndTextProvider 
            which provides the information for rendering the text and image in 
            the button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextUIElement">
            <summary>
            UIElement for displaying both an image and text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.#ctor(Infragistics.Win.IUIElementImageAndTextProvider,Infragistics.Win.UIElement)">
            <summary>
            IUIElementImageAndTextProvider
            </summary>
            <param name="imageAndtextProvider">imageAndtextProvider</param>
            <param name="parent">Parent uielement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            IUIElementImageAndTextProvider
            </summary>
            <param name="parent">Parent uielement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.AdjustImageAttributes(Infragistics.Win.UIElementDrawParams@,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Invoked when the image attributes for the child ImageUIElement are requested.
            </summary>
            <remarks>This method can be overridden in dervied classes to supply the image attributes.</remarks>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the element.
            </summary>
            <param name="appearance">Struct to update with the appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.InitProvider(Infragistics.Win.IUIElementImageAndTextProvider)">
            <summary>
            Initialize the provider
            </summary>
            <param name="provider"><see cref="T:Infragistics.Win.IUIElementImageAndTextProvider"/></param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Only draws the imagebackground if <see cref="P:Infragistics.Win.ImageAndTextUIElement.DrawsBackColor"/> is set to true.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Only draws the imagebackground if <see cref="P:Infragistics.Win.ImageAndTextUIElement.DrawsImageBackground"/> is set to true.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.IntersectChildElementInvalidRect(Infragistics.Win.UIElement,System.Drawing.Rectangle)">
            <summary>
            Invoked by the child elements to determine the intersection of the child element's
            rectangle with the invalid rect.
            </summary>
            <param name="element">Child elements whose intersecting rect is to be returned</param>
            <param name="invalidRect">Invalid rect</param>
            <returns>The intersection of the child element's rect with the invalid rect.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.BeforeDrawChild(Infragistics.Win.UIElementDrawParams@,Infragistics.Win.DrawPhase)">
            <summary>
            Invoked before a phase of the child elements is invoked.
            </summary>
            <param name="drawParams">Draw parameters</param>
            <param name="phase">Phase being rendered</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.AfterDrawChild(Infragistics.Win.UIElementDrawParams@,Infragistics.Win.DrawPhase)">
            <summary>
            Invoked after a phase of the child elements is invoked.
            </summary>
            <param name="drawParams">Draw parameters</param>
            <param name="phase">Phase being rendered</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateTextSize(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,System.Windows.Forms.Control,Infragistics.Win.AppearanceData@)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="text">String to measure.</param>
            <param name="hotkey">Determines how hotkeys are displayed</param>
            <param name="vertical">Whether the text is rendered vertically.</param>
            <param name="control">Control from which to obtain a base font.</param>
            <param name="appearance">Resolved appearance data structure for obtaining the font information for the element.</param>
            <returns>The size required by the text.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateTextSize(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,System.Drawing.Graphics,System.Drawing.Font,Infragistics.Win.AppearanceData@,Infragistics.Win.ImageAndTextUIElement.MeasureStringDelegate)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="text">String to measure.</param>
            <param name="hotkey">Determines how hotkeys are displayed</param>
            <param name="vertical">Whether the text is rendered vertically.</param>
            <param name="g">Graphics object used to calculate the text size</param>
            <param name="font">Base font used to calculate the text size</param>
            <param name="appearance">Resolved appearance data structure for obtaining the font information for the element.</param>
            <param name="measureString">A callback used to measure the string or null to use the default routine. This may be used if you have
            to run through a number of strings to determine which is the largest, etc.</param>
            <returns>The size required by the text.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateTextSize(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,Infragistics.Win.EmbeddableUIElementBase,System.Drawing.Font,Infragistics.Win.AppearanceData@,Infragistics.Win.ImageAndTextUIElement.MeasureStringDelegate,System.Boolean)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="text">String to measure.</param>
            <param name="hotkey">Determines how hotkeys are displayed</param>
            <param name="vertical">Whether the text is rendered vertically.</param>
            <param name="embeddableUIElementBase">EmbeddableUIElementBase object used to get the Graphics object which can be used to get the text size</param>
            <param name="font">Base font used to calculate the text size</param>
            <param name="appearance">Resolved appearance data structure for obtaining the font information for the element.</param>
            <param name="measureString">A callback used to measure the string or null to use the default routine. This may be used if you have
            to run through a number of strings to determine which is the largest, etc.</param>
            <param name="wrapText">True if text can be wrapped</param>
            <returns>The size required by the text.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateTextSize(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,System.Drawing.Graphics,System.Drawing.Font,Infragistics.Win.AppearanceData@,Infragistics.Win.ImageAndTextUIElement.MeasureStringDelegate,System.Boolean)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="text">String to measure.</param>
            <param name="hotkey">Determines how hotkeys are displayed</param>
            <param name="vertical">Whether the text is rendered vertically.</param>
            <param name="g">Graphics object used to calculate the text size</param>
            <param name="font">Base font used to calculate the text size</param>
            <param name="appearance">Resolved appearance data structure for obtaining the font information for the element.</param>
            <param name="measureString">A callback used to measure the string or null to use the default routine. This may be used if you have
            to run through a number of strings to determine which is the largest, etc.</param>
            <param name="wrapText">True if text can be wrapped</param>
            <returns>The size required by the text.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateTextSize(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,System.Windows.Forms.Control,Infragistics.Win.AppearanceData@,Infragistics.Win.ImageAndTextUIElement.MeasureStringDelegate)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="text">String to measure.</param>
            <param name="hotkey">Determines how hotkeys are displayed</param>
            <param name="vertical">Whether the text is rendered vertically.</param>
            <param name="control">Control from which to obtain a base font.</param>
            <param name="appearance">Resolved appearance data structure for obtaining the font information for the element.</param>
            <param name="measureString">A callback used to measure the string or null to use the default routine. This may be used if you have
            to run through a number of strings to determine which is the largest, etc.</param>
            <returns>The size required by the text.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateImageSize(System.Drawing.Image,Infragistics.Win.ScaleImage,System.Drawing.Size,System.Boolean)">
            <summary>
            Calculates the size required by the image in an ImageAndTextUIElement.
            </summary>
            <param name="img">Image</param>
            <param name="scaleimage">If and when images should be scaled.</param>
            <param name="scaledImageSize">Size to scale images when indicated to do so by the value of <paramref name="scaleimage"/></param>
            <param name="reserveShadowSpace">True if the image may be shadowed.</param>
            <returns>The size of the image</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateImageAndTextSize(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean,Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,Infragistics.Win.TextPlacement)">
            <summary>
            Calculates the size required to completely display an ImageAndTextUIElement.
            </summary>
            <param name="imgSize">Size of the image. If there is no image, Size.Empty may be used.</param>
            <param name="textSize">Size of the text. If there is no text, Size.Empty may be used.</param>
            <param name="imagePadding">Amount of padding around the image - only added in if the image size is at least 1,1</param>
            <param name="textPadding">Amount of padding around the text - only added in if the text size is at least 1,1</param>
            <param name="padding">Amount of padding around the text and image. This is always added in.</param>
            <param name="vertical">Indicates if the element is displayed vertically.</param>
            <param name="borderStyle">Border style</param>
            <param name="borderSides">Which borders are used.</param>
            <param name="textPlacement">Indicates how the text is placed in relation to the image.</param>
            <returns>Size of the image and text element.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateImageAndTextSize(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean,Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,System.Drawing.ContentAlignment)">
            <summary>
            Calculates the size required to completely display an ImageAndTextUIElement.
            </summary>
            <param name="imgSize">Size of the image. If there is no image, Size.Empty may be used.</param>
            <param name="textSize">Size of the text. If there is no text, Size.Empty may be used.</param>
            <param name="imagePadding">Amount of padding around the image - only added in if the image size is at least 1,1</param>
            <param name="textPadding">Amount of padding around the text - only added in if the text size is at least 1,1</param>
            <param name="padding">Amount of padding around the text and image. This is always added in.</param>
            <param name="vertical">Indicates if the element is displayed vertically.</param>
            <param name="borderStyle">Border style</param>
            <param name="borderSides">Which borders are used.</param>
            <param name="imageAlignment">Alignment of the image. When set to CenterMiddle, the image and text will overlap.</param>
            <returns>Size of the image and text element.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateButtonImageAndTextSize(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Windows.Forms.Border3DSide,System.Drawing.ContentAlignment)">
            <summary>
            Calculates the size required to completely display an ImageAndTextButtonUIElement.
            </summary>
            <param name="imgSize">Size of the image. If there is no image, Size.Empty may be used.</param>
            <param name="textSize">Size of the text. If there is no text, Size.Empty may be used.</param>
            <param name="imagePadding">Amount of padding around the image - only added in if the image size is at least 1,1</param>
            <param name="textPadding">Amount of padding around the text - only added in if the text size is at least 1,1</param>
            <param name="padding">Amount of padding around the text and image. This is always added in.</param>
            <param name="vertical">Indicates if the element is displayed vertically.</param>
            <param name="buttonStyle">Button style</param>
            <param name="buttonType">Type of button - push button or state button</param>
            <param name="borderSides">Which borders are used.</param>
            <param name="imageAlignment">Alignment of the image. When set to CenterMiddle, the image and text will overlap.</param>
            <returns>Size of the image and text element.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.CalculateButtonImageAndTextSize(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Drawing.Size,System.Boolean,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Windows.Forms.Border3DSide,Infragistics.Win.TextPlacement)">
            <summary>
            Calculates the size required to completely display an ImageAndTextButtonUIElement.
            </summary>
            <param name="imgSize">Size of the image. If there is no image, Size.Empty may be used.</param>
            <param name="textSize">Size of the text. If there is no text, Size.Empty may be used.</param>
            <param name="imagePadding">Amount of padding around the image - only added in if the image size is at least 1,1</param>
            <param name="textPadding">Amount of padding around the text - only added in if the text size is at least 1,1</param>
            <param name="padding">Amount of padding around the text and image. This is always added in.</param>
            <param name="vertical">Indicates if the element is displayed vertically.</param>
            <param name="buttonStyle">Button style</param>
            <param name="buttonType">Type of button - push button or state button</param>
            <param name="borderSides">Which borders are used.</param>
            <param name="textPlacement">Indicates how the text is placed in relation to the image.</param>
            <returns>Size of the image and text element.</returns>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.Provider">
            <summary>
            The provider for the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.BorderStyle">
            <summary>
            The border style of the element (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.BorderSides">
            <summary>
            Bits flags that specify which borders to draw (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.TextElement">
            <summary>
            Returns the TextUIElement associated with the ImageAndTextUIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageElement">
            <summary>
            Returns the ImageUIElement associated with the ImageAndTextUIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ClipChildren">
            <summary>
            Overriden. The child elements must be clipped if the image
            element is larger than the panel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.Cursor">
            <summary>
            Overriden. Returns the cursor displayed when the mouse is over the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.DrawsBackColor">
            <summary>
            Determines whether the element renders its backcolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.DrawsImageBackground">
            <summary>
            Determines whether the element renders its backcolor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.TranslateAlignments">
            <summary>
            Indicates whether the alignment properties should be translated when dealing with vertical elements.
            </summary>
            <remarks>Some element can be displayed either vertically or horizontally at different stages. For these types of elements, it makes sense to adjust the 
            alignment of the text and image to maintain their relationship and not leave the programmer to switch these properties.</remarks>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ChildElementRect">
            <summary>
            Returns the rectangle to use when positioning the child elements
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.WantsDrawNotifications">
            <summary>
            Determines whether child element draw notifications should be invoked on the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement">
            <summary>
            An image uielement for use by an <see cref="T:Infragistics.Win.ImageAndTextUIElement"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageUIElementBase">
            <summary>
            An abstract UIElement used to draw a foreground image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.AdjustImageDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Called during draw so that the Image rect can be adjusted.
            This may be needed, for example, with the Image on a button
            that is pressed. In this case the Image may be offset 1 pixel
            right and down.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            No backgground is drawn for a Image element
            </summary>
            <param name="drawParams"></param>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawImageBackground and do nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.DrawImage(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Render the Image 
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.GetImageAttributes(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Gets the image attributes used for drawing the image
            </summary>
            <remarks>This method can be overridden in dervied classes to supply the image attributes.</remarks>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.ClipSelf">
            <summary>
            Returns true so that the image doesn't spill outside of
            the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.CenterImage">
            <summary>
            Determines if the image will centered in the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.BorderShadowColor">
            <summary>
            Gets or Sets the border shadow's base color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.BorderShadowDepth">
            <summary>
            Gets or Sets the depth of the border shadow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.DrawBorderShadow">
            <summary>
            Gets or Sets the value indicating whether a shadow will be drawn around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.MaintainAspectRatio">
            <summary>
            Gets or Sets the value indicating whether the aspect ratio 
            of the image should be maintained upon scaling.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.Scaled">
            <summary>
            Returns true if the image is to be scaled to the size
            of the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.ImageRect">
            <summary>
            Gets the image Rectangle (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.ColorMaps">
            <summary>
            Gets/sets and array of color mappings for the image element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.Shadowed">
            <summary>
            Determines if the image is rendered with a shadow. When true, a disabled copy
            of the image is rendered down and to the right 1 pixel and another copy is rendered
            up and to the left 1 pixel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.ReserveShadowSpace">
            <summary>
            Determines if space is reserved for a shadow when the image is scaled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.CanRenderDisabled">
            <summary>
            Determines whether the element's image will be rendered as disabled when the element is not enabled.
            </summary>
            <remarks>
            By default this is true but this should be overriden in classes that either do not want images to honor
            the enabled property. e.g. When a class overrides the <see cref="M:Infragistics.Win.ImageUIElementBase.GetImageAttributes(Infragistics.Win.UIElementDrawParams@)"/> and remaps the colors
            in the image to specific colors based on the enabled state.
            </remarks>
        </member>
        <member name="T:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject">
            <summary>
            Accessible object that represents a text element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject.#ctor(Infragistics.Win.ImageUIElementBase,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
            <param name="defaultDescription">Default description for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject.#ctor(Infragistics.Win.ImageUIElementBase,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject.#ctor(Infragistics.Win.ImageUIElementBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
        </member>
        <member name="P:Infragistics.Win.ImageUIElementBase.ImageElementAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.#ctor(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Initializes	a new dependent textelement for use by an <see cref="T:Infragistics.Win.ImageAndTextUIElement"/>.
            </summary>
            <param name="parent">Parent ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.AdjustImageDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Called during draw so that the Image rect can be adjusted.
            This may be needed, for example, with the Image on a button
            that is pressed. In this case the Image may be offset 1 pixel
            right and down.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.GetImageAttributes(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Gets the image attributes used for drawing the image
            </summary>
            <remarks>This method can be overridden in dervied classes to supply the image attributes.</remarks>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the element.
            </summary>
            <param name="appearance">Appearance struct to update</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.IntersectInvalidRect(System.Drawing.Rectangle)">
            <summary>
            Returns the intersection of the element's rect with the invalid rect for the
            current draw operation.
            </summary>
            <param name="invalidRect">Invalid rect</param>
            <returns>The intersection of the element's rect with the invalid rect.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.DrawImage(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the image for the Image element is to be rendered
            </summary>
            <param name="drawParams">Draw parameters</param>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentImageUIElement.ClipSelf">
            <summary>
            Determines whether the image is clipped to the element's rect.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement">
            <summary>
            A text uielement for use by an <see cref="T:Infragistics.Win.ImageAndTextUIElement"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextUIElementBase">
            <summary>
            An abstract base class for text uielements
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            When the mouse moves onto and off of the button when
            the mouse is captured the default button behavior is
            to toggle the button's up/down appearance 
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear internal flags and invalidate the button
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.ResetCaptureFlags">
            <summary>
            clear the internal capture flags
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.FireClickEvent">
            <summary>
            Triggers the ElementClick event
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.OnClick">
            <summary>
            Called when the element is clicked
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.AdjustTextDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Called during draw so that the text rect can be adjusted.
            This may be needed, for example, with the text on a button
            that is pressed. In this case the text may be offset 1 pixel
            right and down.
            </summary>
            <param name="displayRect"><see cref="T:System.Drawing.Rectangle"/></param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            No background is drawn for a text element unless
            DrawsBackColor returns true
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            No background is drawn for a text element unless
            DrawsImageBackground returns true
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Render the text in the foreground
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.FirstTabOffset">
            <summary>
            The number of spaces between the beginning of the text and the first tab stop.
            </summary>
            <remarks>
            When set to a value below 0, tab stops are not set when drawing the text.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TabStops">
            <summary>
            An array of floats indicating the number of spaces between tab stops.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TrackCharactersRendered">
            <summary>
            Gets/sets whether the element should maintain the count of characters when rendering the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TrackTextArea">
            <summary>
            Specifies whether to track the text area (<see cref="P:Infragistics.Win.TextUIElementBase.TextArea"/>). Default is true.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.CharactersRendered">
            <summary>
            Returns the number of characters rendered during the last draw operation.
            </summary>
            <remarks>
            <p class="note">Note: This value is only maintained if the <see cref="P:Infragistics.Win.TextUIElementBase.TrackCharactersRendered"/> is set to true.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TextSize">
            <summary>
            Returns the cached size of the string calculated in the last DrawForeground invocation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.FocusableMouseButtons">
            <summary>
            Controls the mouse buttons that will cause the control to take focus
            defaults to all.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.Rotated">
            <summary>
            Determines if the text should be rotated 180 degrees.
            </summary>
            <remarks>
            <list type="table">
            <listheader><term>Text Angle:</term></listheader>
            <item><term>Rotated = false and Vertical = false</term><description>0 degrees</description></item>
            <item><term>Rotated = true and Vertical = false</term><description>180 degrees</description></item>
            <item><term>Rotated = false and Vertical = true</term><description>90 degrees clockwise</description></item>
            <item><term>Rotated = true and Vertical = true</term><description>90 degrees counter-clockwise</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TextArea">
            <summary>
            We cache a rectangle during DrawForeground that keeps track of the text area.
            </summary>
            <remarks>If on the last DrawForeground there was no text an empty rect will be returned by this method.</remarks>
        </member>
        <member name="E:Infragistics.Win.TextUIElementBase.ElementClick">
            <summary>
            Fired when the button is clicked
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.DrawsBackColor">
            <summary>
            Determines if the backcolor is drawn (read-only)
            </summary>
            <remarks>The default implementation returns false.</remarks>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.DrawsImageBackground">
            <summary>
            Determines if the backgroud image is drawn (read-only)
            </summary>
            <remarks>The default implementation returns false.</remarks>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.Text">
            <summary>
            Abstract property to get/set the text
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.MultiLine">
            <summary>
            Abstract property to get/set the multiline property
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.WrapText">
            <summary>
            Returns true if the text is to be wrapped.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.Padding">
            <summary>
            Abstract property to get/set the text padding
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.Vertical">
            <summary>
            Abstract property to get/set the vertical property
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.RectInsidePadding">
            <summary>
            The rect inside the borders and padding (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.HotkeyPrefix">
            <summary>
            Abstract property to determine whether mnemonics are displayed in the text.
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject">
            <summary>
            Accessible object that represents a text element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.#ctor(Infragistics.Win.TextUIElementBase,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
            <param name="defaultDescription">Default description for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.#ctor(Infragistics.Win.TextUIElementBase,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
            <param name="defaultName">Default name for the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.#ctor(Infragistics.Win.TextUIElementBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject"/>
            </summary>
            <param name="element">Associated UIElement</param>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElementBase.TextElementAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.#ctor(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Initializes	a new dependent textelement for use by an <see cref="T:Infragistics.Win.ImageAndTextUIElement"/>.
            </summary>
            <param name="parent">Parent ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.AdjustTextDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Adjusts the rect used to render the text.
            </summary>
            <param name="displayRect">By reference rectangle to adjust.</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.IntersectInvalidRect(System.Drawing.Rectangle)">
            <summary>
            Returns the intersection of the element's rect with the invalid rect for the
            current draw operation.
            </summary>
            <param name="invalidRect">Invalid rect</param>
            <returns>The intersection of the element's rect with the invalid rect.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the text for the element should be rendered.
            </summary>
            <param name="drawParams">Draw params</param>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.HotkeyPrefix">
            <summary>
            Indicates how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.MultiLine">
            <summary>
            Indicates if multiple lines of text are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.Padding">
            <summary>
            Returns the padding around the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.Text">
            <summary>
            Returns the text displayed by the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.Vertical">
            <summary>
            Indicates if the text should be rendered vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElement.ImageAndTextDependentTextUIElement.WrapText">
            <summary>
            Indicates if text should be wrapped to multiple lines.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextUIElement.MeasureStringDelegate">
            <summary>
            Delegate for measure string callbacks. This can be used when you need to use the autosize
            calculations but need to iterate through more than one string to find the largest, etc.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElementBase.ImageAndTextUIElementEx.AdjustImageAttributes(Infragistics.Win.UIElementDrawParams@,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Invoked when the image attributes for the child ImageUIElement are requested.
            </summary>
            <remarks>This method can be overridden in dervied classes to supply the image attributes.</remarks>
        </member>
        <member name="T:Infragistics.Win.IUIElementImageAndTextProvider">
            <summary>
            Interface for providing information to an ImageAndTextUIElement.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IUIElementProvider">
            <summary>
            This is the interface used to supply borderstyle and appearance
            settings for drawing a dependent UIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementProvider.GetBorderStyle(Infragistics.Win.UIElement)">
            <summary>
            Returns the border style for the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementProvider.GetBorderSides(Infragistics.Win.UIElement)">
            <summary>
            Returns the border sides flags for the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementProvider.GetCursor(Infragistics.Win.UIElement)">
            <summary>
            Returns the cursor to use for the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementProvider.InitElementAppearance(Infragistics.Win.UIElement,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the elements appearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetScaledImageSize(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Maximum size for a scaled image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how the text is placed in relation to the image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.ScaleImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if the image should be scaled.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.ShadowImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines whether the image should be shadowed.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image should be shadowed.</returns>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.ReserveShadowSpace(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines whether space should be reserved for a shadow of the image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image may be shadowed.</returns>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the image to be displayed.
            </summary>
            <remarks>
            May be null if there is no image to display.
            </remarks>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the text to display
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.IsMultiLine(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if multiple lines of text are to be rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetTextPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetImagePadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.GetPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the entire element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.AdjustTextDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the text's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.AdjustImageDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the image's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.IsVertical(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be displayed vertically
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.HotkeyPrefix(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.WrapText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be wrapped
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.UseTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines whether the text placement is used to position the text and image elements.
            </summary>
            <returns>False to use the image and text horizontal and vertical alignment.</returns>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageAndTextProvider.RotateText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates whether the text should be rotated 180 degrees. Note, this rotation is in addition to that caused by setting Vertical to true.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes	a new <b>ImageAndTextButtonUIElement</b>.
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UIElementButtonType)">
            <summary>
            Initializes	a new <b>ImageAndTextButtonUIElement</b>.
            </summary>
            <param name="parent">Parent element</param>
            <param name="buttonType">Type of button</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the button.
            </summary>
            <param name="appearance">Struct to update with the appearance info.</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.OnButtonStateChange">
            <summary>
            Called when the state of the button changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.OnCheckStateChange">
            <summary>
            Invoked when the checked state of the button changes other than when it is initialized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.OnClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#ReserveShadowSpace(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines if space should be reserved for an image shadow.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image element may need to display a shadowed version of the image underneath the actual image.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#ShadowImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines if the button image has a shadow rendered underneath.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image should display a shadowed version of the image underneath the actual image.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetScaledImageSize(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Maximum size for a scaled image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how the text is placed in relation to the image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#ScaleImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if the image should be scaled.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the image to be displayed.
            </summary>
            <remarks>
            May be null if there is no image to display.
            </remarks>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the text to display
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#IsMultiLine(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if multiple lines of text are to be rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetTextPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetImagePadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#AdjustTextDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the text's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#AdjustImageDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the image's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#IsVertical(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be displayed vertically
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#HotkeyPrefix(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#WrapText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be wrapped
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#GetPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the amount of padding around the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#UseTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates whether the text placement property should be used to determine the placement for the text element.
            </summary>
            <returns>True to use the text placement. Otherwise, the alignment properties are used.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonUIElement.Infragistics#Win#IUIElementImageAndTextProvider#RotateText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text should be rotated 180 degrees
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.RotateText">
            <summary>
            Gets/sets whether the text is rotated 180 degrees.
            </summary>
            <seealso cref="P:Infragistics.Win.ImageAndTextButtonUIElement.Vertical"/>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.UseTextPlacement">
            <summary>
            Gets/sets whether the appearance alignments or the text placement takes precedence
            when positioning the text and image elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.Padding">
            <summary>
            Determines the padding around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.ReserveShadowSpace">
            <summary>
            Gets/sets whether the space should be reserved for an image shadow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.ShadowImage">
            <summary>
            Gets/sets whether the image in the button displays a shadowed version under the actual image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.TextPlacement">
            <summary>
            Determines the placement of the text in relation to the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.ScaledImageSize">
            <summary>
            Determines the scaled size of an image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.Image">
            <summary>
            Image displayed in the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.ImagePadding">
            <summary>
            Determines the padding around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.ScaleImage">
            <summary>
            Determines if the image is scaled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.Text">
            <summary>
            Text displayed in the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.TextPadding">
            <summary>
            Padding around the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.HotkeyPrefix">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.MultiLine">
            <summary>
            Determines if the text is displayed in multiple lines.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.Vertical">
            <summary>
            Determines if the text is rendered vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.WrapText">
            <summary>
            Determines if the text can be wrapped to multiple lines.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.Provider">
            <summary>
            Returns the IUIElementImageAndTextProvider provider
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonUIElement.IsShadowImageSupported">
            <summary>
            Returns a boolean indicating whether shadowing of the image is supported by the button element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UIElementButtonType)">
            <summary>
            Constructor, initializes a new instance of the <b>CheckEditorImageAndTextButtonUIElement</b> class.
            </summary>
            <param name="parent">parent UIElement</param>
            <param name="buttonType"><see cref="T:Infragistics.Win.UIElementButtonType"/></param>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.OnCheckStateChange">
            <summary>
            Fired when the checkstate of the Check element changes
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.OnClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.ButtonStyle">
            <summary>
            The button style of a state button style checkbox will be retreived from the editor owner.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CheckEditorImageAndTextButtonUIElement.CanClickButton">
            <summary>
            Returns whether the button may be pressed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CheckEditorPropertyIds">
            <summary>
            Enumeration of Property identifiers for the Check Editor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CheckEditorPropertyIds.Appearance">
            <summary>
            Appearance of the editor
            </summary>
        </member>
        <member name="F:Infragistics.Win.CheckEditorPropertyIds.CheckedAppearance">
            <summary>
            CheckedAppearance of the Editor
            </summary>
        </member>
        <member name="F:Infragistics.Win.CheckEditorPropertyIds.HotTrackingAppearance">
            <summary>
            HotTrackingAppearance of the Editor
            </summary>
        </member>
        <member name="F:Infragistics.Win.CheckEditorPropertyIds.IndeterminateAppearance">
            <summary>
            HotTrackingAppearance of the Editor
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorBoxUIElement">
            <summary>
            ColorBoxUIElement, provides color 'box' area in ColorPicker editor.
            </summary>
            <seealso cref="T:Infragistics.Win.UIElement"/>
        </member>
        <member name="F:Infragistics.Win.ColorBoxUIElement.color">
            <summary>
            Color of element
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorBoxUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>ColorBoxUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.ColorBoxUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="P:Infragistics.Win.ColorBoxUIElement.BorderStyle">
            <summary>
            Provide a solid border at all times.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorListBox">
            <summary>
            ColorListBox, emulates the visual studio color listbox designer.
            </summary>
            <seealso cref="T:System.Windows.Forms.ListBox"/>
        </member>
        <member name="M:Infragistics.Win.ColorListBox.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorListBox.Dispose(System.Boolean)">
            <summary>
            Disposal
            </summary>
            <param name="disposing">releasing unmanaged resources.</param>
        </member>
        <member name="M:Infragistics.Win.ColorListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Overriden so that we can draw our own listItems
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DrawItemEventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:Infragistics.Win.ColorListBox.ColorStyle">
            <summary>
            The colors to be Displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorListBox.Items">
            <summary>
            We shadow the items collection because we never want this persisted
            by the designer
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorListBox.Color">
            <summary>
            Get/Set the selected color of the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorListBox.ItemHeight">
            <summary>
            Returns or sets the height for each item in the list.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorStyle">
            <summary>
            Display Style of the control
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorStyle.WebColors">
            <summary>
            Uses the Web Color collection
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorStyle.SystemColors">
            <summary>
            Uses the System Color collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorPickerEditor">
            <summary>
            ColorPickerEditor facilitates the choosing of colors. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextAndDropDownBase">
            <summary>
            A generic Text Editor with a non-list dropdown 
            portion. Allows the user to drop down any Control based class.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithText">
            <summary>
            EditorWithText class implementation
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase">
            <summary>
            Abstract base class for an embeddable editor class that displays a collection of buttons to the 
            left and right of its edit area.
            </summary>
            <remarks>
            <p class="body">The <b>EmbeddableEditorButtonBase</b> is the base class for an 
            editor that displays a custom collection of buttons to the left and right of an 
            edit area. The buttons are exposed via the <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/> and 
            <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/> properties.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>EmbeddableEditorButtonBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Initializes a new instance of the <b>EmbeddableEditorButtonBase</b> class.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ShouldSerializeButtonsLeft">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/> property should be serialized
            </summary>
            <returns>Returns true if the collection has been created and has at least one item.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ResetButtonsLeft">
            <summary>
            Used to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/> collection
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ShouldSerializeButtonsRight">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/> property should be serialized
            </summary>
            <returns>Returns true if the collection has been created and has at least one item.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ResetButtonsRight">
            <summary>
            Used to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/> collection
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.CalculateButtonExtent(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used to calculate the extent required for the buttons.
            </summary>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context</param>
            <returns>The extent required to display the buttons</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Editor whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnDispose">
            <summary>
            Called when the editor is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on a subobject has changed.
            </summary>
            <param name="propChange">Provides information about the change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnBeforeEditorButtonCheckStateChanged(Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.BeforeEditorButtonCheckStateChanged"/> event
            </summary>
            <param name="e">BeforeCheckStateChangedEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnAfterEditorButtonCheckStateChanged(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.AfterEditorButtonCheckStateChanged"/> event
            </summary>
            <param name="e">EditorButtonEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnEditorButtonClick(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorButtonClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnInitializeEditorButtonCheckState(Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.InitializeEditorButtonCheckState"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnEditorSpinButtonClick(Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorSpinButtonClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnBeforeEditorButtonDropDown(Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.BeforeEditorButtonDropDown"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnAfterEditorButtonCloseUp(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.AfterEditorButtonCloseUp"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.OnEditorButtonAdded(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorButtonAdded"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft">
            <summary>
            Returns of a collection of <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> instances displayed on the left side of the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.HasButtonsLeft">
            <summary>
            Indicates if there are any buttons in the collection.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight">
            <summary>
            Returns of a collection of <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> instances displayed on the right side of the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.HasButtonsRight">
            <summary>
            Indicates if there are any buttons in the collection.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorButtonClick">
            <summary>
            Invoked when an editor button is clicked
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorSpinButtonClick">
            <summary>
            Invoked when an spin editor button is clicked
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.AfterEditorButtonCloseUp">
            <summary>
            Invoked when a dropdown editor button has closed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.BeforeEditorButtonDropDown">
            <summary>
            Invoked before a dropdown editor button has been displayed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.InitializeEditorButtonCheckState">
            <summary>
            Invoked when the checkstate of an editor button should be initialized.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.BeforeEditorButtonCheckStateChanged">
            <summary>
            Invoked before the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.AfterEditorButtonCheckStateChanged">
            <summary>
            Invoked after the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorButtonAdded">
            <summary>
            Invoked when an editor button is added to the collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.GetEditorButtonLeft(System.Int32)">
            <summary>
            Returns the accessible object for the editor button at the specified index.
            </summary>
            <param name="index">0 based index with 0 being the left most button</param>
            <returns>The accessible object associated with the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.GetEditorButtonRight(System.Int32)">
            <summary>
            Returns the accessible object for the editor button at the specified index.
            </summary>
            <param name="index">0 based index with 0 being the left most button</param>
            <returns>The accessible object associated with the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.ButtonLeftCount">
            <summary>
            Returns the number of editor button displayed on the left side of the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.EditorWithButtonsAccessibleObject.ButtonRightCount">
            <summary>
            Returns the number of editor button displayed on the right side of the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IEmbeddableTextBoxListener">
            <summary>
            Summary description for IEmbeddableTextBoxListener.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when its OnKeyDown method is called
            </summary>
            <remarks>
            The EmbeddableTextBox class calls this method from its OnKeyDown method. It gives the callee an opportunity to handle special keystrokes; for example, F4, arrow keys, Enter, Escape. The value returned by the callee is passed to the 'Handled' property of the KeyEventArgs.
            </remarks>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled by the callee</returns>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when its OnKeyPress method is called
            </summary>
            <remarks>
            The EmbeddableTextBox class calls this method from its OnKeyPress method.
            </remarks>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled by the callee</returns>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when its OnKeyUp method is called
            </summary>
            <remarks>
            The EmbeddableTextBox class calls this method from its OnKeyUp method.
            </remarks>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled by the callee</returns>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnTextChanged">
            <summary>
            Called by the EmbeddableTextBox when its text changes
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnLeave">
            <summary>
            Called by the EmbeddableTextBox when its OnLeave method is called
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when its OnMouseWheel method is called
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnClick">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnClick method is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnDoubleClick">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnDoubleClick method is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnMouseMove method is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnMouseHover">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnMouseHover method is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnMouseDown method is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEmbeddableTextBoxListener.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked by the <see cref="T:Infragistics.Win.EmbeddableTextBox"/> when its OnMouseUp method is invoked.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditorWithText.editorVal">
            <summary>
            editorValue
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.#ctor">
            <summary>
            Constructor - creates a new instance of the EditorWithText class
            </summary>
            <remarks>
            The EditorWithText class provides basic TextBox-like editing functionality
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor - creates a new instance of the EditorWithText class
            </summary>
            <param name="defaultOwner">The default owner associated with this editor</param>
            <remarks>
            The EditorWithText class provides basic TextBox-like editing functionality
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when a keystroke is received
            Since each editor might have different actions to perform for a given
            keystroke, this should be overridden by derived classes
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Listens to the embeddableTextBox keyUp messages
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Infragistics#Win#IEmbeddableTextBoxListener#OnTextChanged">
            <summary>
            Called by the EmbeddableTextBox when its text has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Infragistics#Win#IEmbeddableTextBoxListener#OnLeave">
            <summary>
            Called by the EmbeddableTextBox when its OnLeave method is called
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when its OnKeyPress method is called
            12.20.02 DA
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Infragistics#Win#IEmbeddableTextBoxListener#OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when the mouse wheel is moved
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnBeforeEnterEditMode(System.Boolean@)">
            <summary>
            Called before edit mode has been entered. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <remarks>The base implementation raises the BeforeEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>The base implementation raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Called before edit mode has been exited
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.AdjustSizeForOwnerBorders(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Drawing.Size@)">
            <summary>
            Adjusts the specified Size to account for the owner-specified borders
            </summary>
            <param name="owner">The EmbeddableEditorOwnerBase-derived owner</param>
            <param name="ownerContext">The owner context</param>
            <param name="size">A reference to the Size to be adjusted</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData">The key to test</param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of
            the same type
            </summary>
            <param name="source">The EmbeddableEditorBase-derived object to be initialized</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Clone">
            <summary>
            Returns a copy of this instance
            </summary>
            <returns>A copy of this instance of the EditorWithText class</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.DisplaysTextBoxWhenInEditMode(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns whether the element will display the EmbeddableTextBox
            when it enters edit mode. Default implementation returns true.
            
            Editors that do not always display the EmbeddableTextBox must
            override this property and return a value that is appropriate
            (e.g., if the owner returns true from MustSelectFromList, the
            EditorWithComboUIElement returns false.)
            </summary>
            <param name="element">The element for which the EmbeddableTextBox will be displayed when it enters edit mode.</param>
            <returns>A boolean indeicating whether the EmbeddableTextBox is displayed for the specified element when it enters edit mode.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.DataValueToText(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts data value to text making use of any format provider and format strings that owner may provide. If unsuccessful, returns null.
            </summary>
            <param name="valueToConvert"></param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <returns></returns>
            <remarks>The EditorWithCombo class overrides this method because it supports ValueLists; if a DataValue corresponds to a ValueListItem, that item's DisplayText is returned.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetValueList(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns an IValueList from the specified embeddable element, or null if none is provided.
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element from which to obatin the owner info.</param>
            <returns>An IValueList interface implementor, or null if the owner does not provide one.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.EnterEditMode(Infragistics.Win.EmbeddableUIElementBase,System.Boolean)">
            <summary>
            Called to place the editor in edit mode.
            </summary>
            <param name="embeddableElement">The element that was returned from <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/>.</param>
            <param name="takeFocus">Determines whether the editor will take the input focus upon entering edit mode.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.ResolveShowInkButton(Infragistics.Win.IInkProvider,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Returns whether this editor displays an ink button.
            </summary>
            <param name="inkProvider">The IInkProvider implementor that provides the inking capabilities.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used by the specified owner.</param>
            <returns>A boolean indicating whether the editor displays an ink button.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnDispose">
            <summary>
            Called when the EditorWithText class is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetElementText(Infragistics.Win.EmbeddableUIElementBase,System.Boolean)">
            <summary>
            Returns the text that the specified element should display
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element</param>
            <param name="ignorePasswordChar">If true, the owner-provided PasswordChar will not be applied to the returned string.</param>
            <returns>The string that should be displayed by the element</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.DisplayTextBox">
            <summary>
            Sets the position of, initializes, and displays the EmbeddableTextBox
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.RepositionTextBox">
            <summary>
            Sets the position of the EmbeddableTextBox. Only applicable when
            in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.OnEmbeddableTextBoxDisposed">
            <summary>
            Called by the EmbeddableTextBox when it is being disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetDisplayValue">
            <summary>
            Provides editor-specific display value.
            </summary>
            <returns>Display string.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetEditorValue">
            <summary>
            Provides editor-specific editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Checks validity of converted values.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Automatic data conversions specific to this editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.CalculateBorderStyle(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Determines the border style to be displayed by the specified embeddable element 
            based on the display style, active state and other information available from 
            the editor and owner.
            </summary>
            <param name="element">Embeddable element to evaluate</param>
            <returns>The borderstyle that should be displayed by the element.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.EditorValue">
            <summary>
            Gets/Sets the editor value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.CanFocus">
            <summary>
            Returns whether the editor can receive input focus while in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.Focused">
            <summary>
            Returns whether the editor currently has input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.SupportsSelectableText">
            <summary>
            Returns whether the editor supports selecting text.
            </summary>
            <remarks>Returns true always since the EditorWithText supports text selection.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.SelectedTextInternal">
            <summary>
            Gets/sets a string that represents the currently selected text in the text box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.SelectionStartInternal">
            <summary>
            Gets/sets the number of characters selected in the text box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.SelectionLengthInternal">
            <summary>
            Gets/sets The starting position of text selected in the text box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.TextLengthInternal">
            <summary>
            Gets the length of the text in the editor.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.Value">
            <summary>
            Gets/sets the value being edited.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.SupportsAutoSizeEdit">
            <summary>
            Indicates whether the editor supports AutoSizeEdit
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.TextBox">
            <summary>
            Returns the EmbeddableTextBox used by this class
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.EditorWithTextUIElement">
            <summary>
            Returns the <see cref="T:Infragistics.Win.EditorWithTextUIElement"/> contained by the <see cref="P:Infragistics.Win.EmbeddableEditorBase.ElementBeingEdited"/> or null
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a mutiline editor creates a new line of text in the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.AcceptsTab">
            <summary>
            Gets or sets a value indicating whether pressing the TAB key in a multiline editor types a TAB character in the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.ScrollBars">
            <summary>
            Gets/sets whether vertical scrollbars are displayed for the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.BorderStyleTextBox">
            <summary>
            Gets/sets the BorderStyle for the EmbeddableTextBox displayed by the editor when in edit mode.
            The default value is None, because typically the EmbeddableTextUIElement handles the border drawing.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.ShowInkButton">
            <summary>
            Determines when to show the Ink Button on the editor
            </summary>
            <remarks>
            This property determines when to show the Ink Button on the editor
            </remarks>		
        </member>
        <member name="P:Infragistics.Win.EditorWithText.ValidateMaxLength">
            <summary>
            Gets/sets whether the value returned from the owner's <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMaxLength(System.Object,System.Int32@)"/> method is used to determine whether the editor's current value is valid.
            </summary>
            <seealso cref="P:Infragistics.Win.EmbeddableEditorBase.IsValid"/>
            <seealso cref="P:Infragistics.Win.EditorWithText.Value"/>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.AppliesFormatStringWhenInEditMode">
            <summary>
            Returns whether the editor applies the format string returned from the owner's <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)"/> method when it is in edit mode.
            </summary>
            <remarks><p class="body">Typically, format strings are not applied to the value when the editor is in edit mode. Returning true from this property will cause the editor to apply the format string when it is in edit mode.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.ShouldSelectAllTextOnFocus">
            <summary>
            Returns whether text should be selected when the editor receives the input focus
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EditorWithText,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated text editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithText.EditorWithTextAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.#ctor">
            <summary>
            Constructor - creates a new instance of the EditorWithTextAndDropDownBase class
            </summary>
            <remarks>
            This is for a generic Text Editor with a non-list dropdown 
            portion.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor - creates a new instance of the EditorWithTextAndDropDownBase class
            </summary>
            <param name="defaultOwner">The default owner associated with this editor</param>
            <remarks>
            This is for a generic Text Editor with a non-list dropdown 
            portion.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Infragistics#Win#IEmbeddableTextBoxListener#OnTextChanged">
            <summary>
            Called by the EmbeddableTextBox when its text has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Infragistics#Win#IEmbeddableTextBoxListener#OnLeave">
            <summary>
            Called by the EmbeddableTextBox class when its OnLeave method is called
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when a keystroke is received
            Since each editor might have different actions to perform for a given
            keystroke, this should be overridden by derived classes
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Listens to the embeddableTextBox keyUp messages
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.Infragistics#Win#IEmbeddableTextBoxListener#OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when the mouse wheel is moved
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key down while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnOwnerKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key up while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>The base implementation raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.GetEmbeddableElementType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.CreateEmbeddableUIElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="parentElement"></param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <param name="includeEditElements"></param>
            <param name="reserveSpaceForEditElements"></param>
            <param name="drawOuterBorders"></param>
            <param name="isToolTip"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.InitControlToDropValue">
            <summary>
            Initialize the value of the dropped control
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.DoCloseUp">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnBeforeDropDown(System.Boolean@)">
            <summary>
            Called before the dropdown has been dropped down. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnAfterDropDown">
            <summary>
            Called after the dropdown has been dropped down. 
            </summary>
            <remarks>The base implementation raises the AfterDropDown event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnAfterCloseUp">
            <summary>
            Called after the dropdown has been closed up. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.OnEmbeddableTextBoxListenerKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the actual implementation of the IEmbeddableTextBoxListener.OnKeyDown method
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Object whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Checks validity of converted values.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.ControlToDrop">
            <summary>
            Gets the control that will be dropped down when the
            user presses the dropdown arrow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.ControlToDropValue">
            <summary>
            Gets current value
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.ShouldCommitControlToDropValue">
            <summary>
            Gets whether or not the editor should commit the value returned by the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.CanFocus">
            <summary>
            Returns whether the editor can receive input focus while in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.Focused">
            <summary>
            Returns whether the editor currently has input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.IsValid">
            <summary>
            Returns whether the value being edited is valid (passes basic editing)
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.ShouldSelectAllTextOnFocus">
            <summary>
            Returns whether text should be selected when the editor receives the input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.SupportsAutoSizeEdit">
            <summary>
            Indicates whether the editor supports AutoSizeEdit
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.SupportsDropDown">
            <summary>
            Returns true to indicate that the editor supports a dropdown
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.SupportsSelectableText">
            <summary>
            Returns whether the editor supports selecting text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextUIElement">
            <summary>
            Returns the <see cref="P:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextUIElement"/> contained by the <see cref="P:Infragistics.Win.EmbeddableEditorBase.ElementBeingEdited"/> or null
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.SetFocusToEditControlOnCloseUp">
            <summary>
            Gets/sets whether the edit control should receive the input focus when the list portion is closed
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.ButtonAlignment">
            <summary>
            Gets/sets the alignment for the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.IncludeDropDownButton">
            <summary>
            Returns or sets whether the dropdown button should be displayed when 
            edit elements are displayed by the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EditorWithTextAndDropDownBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownBase.EditorWithTextAndDropDownAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Instantiates a new instance of the ColorPickerEditor class.
            </summary>
            <param name="defaultOwner"></param>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.#ctor">
            <summary>
            Instantiates a new instance of the ColorPickerEditor class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.OnDispose">
            <summary>
            Called when the object is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetElementText(Infragistics.Win.EmbeddableUIElementBase,System.Boolean)">
            <summary>
            Returns the text that the specified element should display
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element</param>
            <param name="ignorePasswordChar">If true, the owner-provided PasswordChar will not be applied to the returned string.</param>
            <returns>The string that should be displayed by the element</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.CreateEmbeddableUIElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the embeddable element
            </summary>
            <param name="parentElement"></param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <param name="includeEditElements"></param>
            <param name="reserveSpaceForEditElements"></param>
            <param name="drawOuterBorders"></param>
            <param name="isToolTip"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.InitControlToDropValue">
            <summary>
            Initializes the value of the dropped control
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData"></param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetDataFilteredColorName(System.Drawing.Color,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts Color to display text using DataFilter if needed.
            </summary>
            <param name="color">Color to convert.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <returns>Display text.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.CanRenderType(System.Type)">
            <summary>
            Renders any type convertable to color
            </summary>
            <param name="type"></param>
            <returns>true if type is color, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.CanEditType(System.Type)">
            <summary>
             Edits any type convertable to color
            </summary>
            <param name="type"></param>
            <returns>true if type is color, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.CanConvertColorFromString(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ColorFromString(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Returns a Color value from the specified text.
            </summary>
            <param name="text">String to convert</param>
            <param name="original">Default value in case of failure</param>
            <param name="allowEmpty">Determines whether clearing the edit portion results in the value reverting to Color.Empty. If false, the editor's value reverts to the value of the DefaultColor property.</param>
            <returns></returns>
            <remarks>
            <p class="body">In the case where an empty string is specified in the 'text' parameter, <b>Color.Empty</b> is returned.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.Color"/>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.DefaultColor"/>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.AllowEmpty"/>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ColorFromString(System.String,System.Drawing.Color)">
            <summary>
            Returns a Color value from the specified text.
            </summary>
            <param name="text">String to convert</param>
            <param name="original">Default value in case of failure</param>
            <returns></returns>
            <remarks>
            <p class="body">In the case where an empty string is specified in the 'text' parameter, <b>Color.Empty</b> is returned.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.Color"/>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.DefaultColor"/>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.AllowEmpty"/>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.IsHexString(System.String)">
            <summary>
            Checks to see if string is Hexidecimal
            </summary>
            <param name="hex">string to test</param>
            <returns><b>True</b> if hex, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.HexToColor(System.String)">
            <summary>
            
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.HexCharToInt(System.Char)">
            <summary>
            
            </summary>
            <param name="hexChar"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ShouldSerializeDefaultColor">
            <summary>
            Called to determine if default color should be serialized
            </summary>
            <returns><b>True</b> if property should be serialized, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ShouldSerializeColor">
            <summary>
            Called to determine if Color should be serialized
            </summary>
            <returns><b>True</b> if property should be serialized, <b>False</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ResetDefaultColor">
            <summary>
            Sets the property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.ResetColor">
            <summary>
            Sets the property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Object whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetTextSizeOfValue(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Int32)">
            <summary>
            Returns the size required to render the editor's value for the specified owner and ownerContext.
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="allowMultiline">Determines whether the value returned from the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsMultiLine(System.Object)"/> method is honored.</param>
            <param name="maxWidth">The constraining width</param>
            <returns>The size required to render the editor's value for the specified owner and ownerContext.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.OnAfterEnterEditMode">
            <summary>
            Fired after the editor enters edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetColorFromString(System.String,System.Drawing.Color@)">
            <summary>
            Parses the specified stringVal and attempts to get a Color out of it.
            Returns true if the specified stringVal was successfully parsed into a Color; false otherwise.
            </summary>
            <param name="stringVal">The string that to be parsed.</param>
            <param name="color">On return, will contain the resulting Color from the parsed string, if the operation was successful. If not successful, contains Color.Empty.</param>
            <returns>A boolean indicating whether a valid Color was successfully parsed out of the string.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetDisplayValue">
            <summary>
            Provides editor-specific display value.
            </summary>
            <returns>Display string.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetEditorValue">
            <summary>
            Provides editor-specific editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Checks validity of converted values.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="M:Infragistics.Win.ColorPickerEditor.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Automatic data conversions specific to this editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.TabbedColorPicker">
            <summary>
            Returns an instance of the tabbed color picker control used
            when the control is dropped down
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.ShouldCommitControlToDropValue">
            <summary>
            Used to determine if the base should commit the value in the dropped control
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.CustomColors">
            <summary>
            Returns an array of custom Colors
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.DefaultColor">
            <summary>
            Default color for the control. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.Color">
            <summary>
            The editors value as a Color
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.AllowEmpty">
            <summary>
            Gets/sets whether clearing the edit portion results in a value of <b>Color.Empty</b>.
            </summary>
            <remarks>
            <p class="body">When set to true (default), and the edit portion is cleared, the new value is assumed to be <b>Color.Empty</b>.</p>
            <p class="body">When set to false and the edit portion is cleared, the value of the <see cref="P:Infragistics.Win.ColorPickerEditor.DefaultColor"/> property is applied instead.</p>
            <p class="note"><b>Note:</b> In the case where the <see cref="P:Infragistics.Win.ColorPickerEditor.DefaultColor"/> property is set to <b>Color.Empty</b>, clearing the edit portion will result in a value of <b>Color.Empty</b>, regardless of the value of the <b>AllowEmpty</b> property.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.DefaultColor"/>
            <seealso cref="P:Infragistics.Win.ColorPickerEditor.Color"/>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.Value">
            <summary>
            Gets/Sets the value of the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.ControlToDrop">
            <summary>
            Gets the control to drop when dropdown arrow or F4 is pressed
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.ControlToDropValue">
            <summary>
            Gets the value of the control to drop
            </summary>
        </member>
        <member name="P:Infragistics.Win.ColorPickerEditor.ExpectedType">
            <summary>
            Default type used by the editor in the case of data filter. Null means that editor supports 
            multiple data types and expects type to be set or provided by the owner.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorPickerEditorPropertyIds">
            <summary>
            Summary description for ColorPickerPropertyIds.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorPickerEditorPropertyIds.Appearance">
            <summary>
            Appearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorPickerEditorPropertyIds.BorderStyle">
            <summary>
            Borderstyle
            </summary>
        </member>
        <member name="T:Infragistics.Win.ControlUIElementBase">
            <summary>
            An abstract class representing the main element of a control.  
            </summary>
            <seealso cref="T:Infragistics.Win.UIElement"/>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.#ctor(System.Windows.Forms.Control,Infragistics.Win.IUltraControl)">
            <summary>
            Constructor, initializes a new instance of the <b></b> class.
            </summary>
            <param name="control">A <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> derived class whose client area displays this ControlUIElementBase element.</param>
            <param name="ultraControl">A class that implements the <see cref="T:Infragistics.Win.IUltraControl"/> interface</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.#ctor(System.Windows.Forms.Control,Infragistics.Win.IUltraControl,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="control">A <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> derived class whose client area displays this ControlUIElementBase element.</param>
            <param name="ultraControl">A class that implements the <see cref="T:Infragistics.Win.IUltraControl"/> interface</param>
            <param name="hookEvents">If true listen to control's mouse and key events</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.#ctor(System.Windows.Forms.Control,Infragistics.Win.IUltraControl,Infragistics.Win.ControlUIElementBase.ProcessEvent)">
            <summary>
            Constructor
            </summary>
            <param name="control">A <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> derived class whose client area displays this ControlUIElementBase element.</param>
            <param name="ultraControl">A class that implements the <see cref="T:Infragistics.Win.IUltraControl"/> interface</param>
            <param name="eventsToProcess">A flagged Enum telling the ControlUIElement which events to hook.</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode)">
            <summary>
            Draws the control.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="invalidRectangle">Invalid <see cref="T:System.Drawing.Rectangle"/> that will be drawn.</param>
            <param name="doubleBuffer"><b>True</b> creates an offscreen buffer <see cref="T:System.Drawing.Graphics"/> object. All rendering is done to that and the result is copied to the screen. <b>False</b> all drawing is done directly to the screen.</param>
            <param name="alphaBlendMode">Enumeration indicating the mode of alphablending to use when rendering the control</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode,System.Drawing.Size)">
            <summary>
            Draws the control after sizing the element to the specified size.
            </summary>
            <param name="graphics"><see cref="T:System.Drawing.Graphics"/> object to render into.</param>
            <param name="invalidRectangle">Invalid <see cref="T:System.Drawing.Rectangle"/> that will be drawn.</param>
            <param name="doubleBuffer"><b>True</b> creates an offscreen buffer <see cref="T:System.Drawing.Graphics"/> object. All rendering is done to that and the result is copied to the screen. <b>False</b> all drawing is done directly to the screen.</param>
            <param name="alphaBlendMode">Enumeration indicating the mode of alphablending to use when rendering the control</param>
            <param name="elementSize">The width and height that should be used to size the element.  Pass Size.Empty to use the control size.</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.GetContext(System.Type,System.Boolean)">
            <summary>
            Returns an object of requested type that relates to the element or null.  
            </summary>
            <param name="type">The requested <see cref="T:System.Type"/> or null to pick up default context object. </param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element.
            The default implementation sets the backcolor to the system color
            for controls.
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.InternalSetElementsChanged">
            <summary>
            Dirties a flag that some descendant element have changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnCaptureAborted">
            <summary>
            Called when the mouse capture is aborted (e.g. if the
            user presses escape
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnDispose">
            <summary>
            Called when the object is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnFontChanged">
            <summary>
            Called when the control's font changes. The default implemention
            calls DirtyChildElements and invalidates this element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnPreMouseDown(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called when a mouse down message is received. Returning true will
            cause normal mouse down processing to be skipped
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.CaptureMouseForElement(Infragistics.Win.UIElement)">
            <summary>
            Captures the mouse for the passed in element.
            </summary>
            <param name="element">The element to capture the mouse for.</param>
            <remarks>
            <p>During mouse capture all mouse messages will be routed to the element.</p>
            <p>In other words, the elements <see cref="M:Infragistics.Win.UIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/> and <see cref="M:Infragistics.Win.UIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/> virtual methods will be called.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Is thrown if the passed in element is null.</exception>
            <exception cref="T:System.ArgumentException">Is thrown if the passed in element isn't a descendant of this ControlUIElementBase derived element.</exception>
            <seealso cref="M:Infragistics.Win.ControlUIElementBase.TerminateCapture"/>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.GetInkProvider">
            <summary>
            Gets and caches the InkProvider registered for the control's container.
            </summary>
            <returns>The InkProvider registered for the control's container.</returns>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.TerminateCapture">
            <summary>
            Cancels the mouse capture and notifies the selection strategy or element that has captured the mouse.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnGotFocus(System.Object,System.EventArgs)">
            <summary>
            GotFocus event handler. Gets called when the control takes focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnInkProviderRegistrationChanged(Infragistics.Win.IInkProvider,System.Int32)">
            <summary>
            Called when an InkProvider has been registered or unregistered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnInkProviderStateChange(System.Boolean)">
            <summary>
            Called when the InkProvider's state hase changed (e.g. when its Visble or Enabled property has changed).
            </summary>
            <param name="invalidate">If true the control should invalidate itself.</param>
            <remarks>The default implementation calls <see cref="M:Infragistics.Win.UIElement.DirtyChildElements(System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            GotFocus event handler. Gets called when the control takes focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.PerformKeyAction(System.Enum,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action
            </summary>
            <param name="actionCode">The action to perform</param>
            <param name="shiftKeyDown">True to behave as if the shift key is down</param>
            <param name="ctlKeyDown">True to behave as if the ctl key is down</param>
            <returns>True if the action was performed successfully</returns>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.SuspendSyncMouseEnter">
            <summary>
            Suspends the control element from calling SyncMouseEntered method. For
            every call to SuspendSyncMouseEnter there should be a corresponding call
            to ResumeSyncMouseEnter to properly resume the sync-mouse-entered logic.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.ResumeSyncMouseEnter">
            <summary>
            Resumes the control element from calling SyncMouseEntered method. For
            every call to SuspendSyncMouseEntered there should be a corresponding call
            to ResumeSyncMouseEntered to properly resume the sync-mouse-entered logic.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.ResumeSyncMouseEnter(System.Boolean)">
            <summary>
            Resumes the control element from calling SyncMouseEntered method. For
            every call to SuspendSyncMouseEntered there should be a corresponding call
            to ResumeSyncMouseEntered to properly resume the sync-mouse-entered logic.
            </summary>		
            <param name="syncOnResume">Specifies whether to call SyncMouseEntered on resumption.</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.ProcessKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            keydown event handler
            </summary>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.ProcessParentChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the parent property of the associated <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> has been changed.
            </summary>
            <param name="sender">Object invoking the event. This should be the associated <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/></param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ControlUIElementBase.ProcessVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the Visible property of the associated <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> has changed
            </summary>
            <param name="sender">Object invoking the event. This should be the associated <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/></param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.AccessibilityInstance">
            <summary>
            Returns the accessible object associated with the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.Control">
            <summary>
            Returns the <see cref="P:Infragistics.Win.ControlUIElementBase.Control"/> associated with this element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            Note: this will return false the element or any
            of its ancestors are disabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.Cursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.ControlElementWithMouseCapture">
            <summary>
            The control element that captured the mouse or null if the mouse hasn't been captured by any control element.
            (read-only)
            </summary>
            <remarks>
            <p>The is a static property that returns the control element that has capture.</p>
            <p>If this is not null, the <see cref="P:Infragistics.Win.ControlUIElementBase.ElementWithMouseCapture"/> property off the returned control element with return the element that actually captured the mouse.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ControlUIElementBase.ElementWithMouseCapture"/>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.ElementWithMouseCapture">
            <summary>
            The element that captured the mouse or null if the mouse hasn't been captured by an element.
            (read-only)
            </summary>
            <seealso cref="P:Infragistics.Win.ControlUIElementBase.ControlElementWithMouseCapture"/>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.LastElementEntered">
            <summary>
            Returns the last element that was entered with the mouse or null (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.PrintColorMode">
            <summary>
            Indicates how colors and images are rendered when printed.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This property only affects how a control element is rendered when its <see cref="P:Infragistics.Win.ControlUIElementBase.IsPrint"/> returns true.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.UltraControl">
            <summary>
            Returns the control's IUltraControl interface
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.CurrentCursor">
            <summary>
            Returns the current cursor that will be used based on the current
            position of the mouse. (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.CurrentState">
            <summary>
            Returns bit flags indicating the current state of the
            control (used to get appropriate key actions on keyDown)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.IsPrint">
            <summary>
            Returns true if this element is used for print rather than normal
            screen display operations (read-only).
            </summary>
            <remarks>The default implementation returns false. It must be overriden in a derived class to return true.</remarks>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.KeyActionMappings">
            <summary>
            Returns the control's key mappings collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.ControlUIElementBase.IsSyncMouseEnterSuspended">
            <summary>
            Indicates whether the sync-mouse-entered logic has been suspended.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ControlUIElementBase.ProcessEvent">
            <summary>
            A flags enum for listed possible events that the ControlUIElement will hook into on the control. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.None">
            <summary>
            Process No Events
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.Click">
            <summary>
            Process Click Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.Disposed">
            <summary>
            Process Disposed Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.DoubleClick">
            <summary>
            Process DoubleClick Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.FontChanged">
            <summary>
            Process FontChanged Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.GotFocus">
            <summary>
            Process GotFocus Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.KeyDown">
            <summary>
            Process KeyDown Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.LostFocus">
            <summary>
            Process LostFocus Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseDown">
            <summary>
            Process MouseDown Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseEnter">
            <summary>
            Process MouseEnter Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseHover">
            <summary>
            Process MouseHover Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseLeave">
            <summary>
            Process MouseLeave Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseMove">
            <summary>
            Process MouseMove Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.MouseUp">
            <summary>
            Process MouseUp Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.ParentChanged">
            <summary>
            Process ParentChanged Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.Resize">
            <summary>
            Process Resized Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.VisibleChanged">
            <summary>
            Process VisibleChanged Event
            </summary>
        </member>
        <member name="F:Infragistics.Win.ControlUIElementBase.ProcessEvent.All">
            <summary>
            Process all events
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColor">
            <summary>
            Custom Color is a serializable color item. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColor.#ctor(System.Drawing.Color)">
            <summary>
            Constructor, initializes a new instance of the <b>Custom Color</b> class.
            </summary>
            <param name="color"><see cref="P:Infragistics.Win.CustomColor.Color"/> to initialize to.</param>
        </member>
        <member name="M:Infragistics.Win.CustomColor.#ctor(System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>Custom Color</b> class.
            Initializes color to white.
            </summary>
            <param name="index">Index of color in parent collection</param>
        </member>
        <member name="M:Infragistics.Win.CustomColor.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>Custom Color</b> class.
            </summary>
            <param name="color"><see cref="P:Infragistics.Win.CustomColor.Color"/> to initialize to.</param>
            <param name="index">Index of color in parent collection</param>
        </member>
        <member name="P:Infragistics.Win.CustomColor.Color">
            <summary>
            Set/Get the Color.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColorBox">
            <summary>
            This control simulates the functionality of the Office 2000/XP color chooser.
            </summary>	
            <seealso cref="T:Infragistics.Win.UltraControlBase"/>
        </member>
        <member name="T:Infragistics.Win.UltraControlBase">
            <summary>
            Abstract base class for controls that want to inherit from a Win
            control and want to expose the MouseEnterElement/MouseLeaveElement
            events as well as the UIElement draw/cursor/creation filters
            </summary>
        </member>
        <member name="T:Infragistics.Win.IUltraControl">
            <summary>
            Implemented by the System.Windows.Forms.Control derived control
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUltraControl.FireMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUltraControl.FireMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is left (the mouse is moved
            off the element)
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.IsFlatMode">
            <summary>
            Returns true if borders should be displayed as flat.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.SupportThemes">
            <summary>
            Returns true if elements may be render using the System themes.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.DrawFilter">
            <summary>
            Returns a draw filter or null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.CreationFilter">
            <summary>
            Returns a creation filter or null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.CursorFilter">
            <summary>
            Returns a cursor filter or null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.SelectionManager">
            <summary>
            Returns the selection manager or null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControl.DefaultCursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element and that element (and all of the 
            elements in its parent chain) don't supply their own.
            Note: this is normally supplied by returning the 
            Control's cursor property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IUltraControlElement">
            <summary>
            Implemented by the System.Windows.Forms.Control derived control
            </summary>
        </member>
        <member name="P:Infragistics.Win.IUltraControlElement.MainUIElement">
            <summary>
            Returns the control's main UI element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>UltraControlBase</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.ScrollControl(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Boolean,System.Boolean,System.Boolean,System.Int16)">
            <summary>
            Will call ther native windows ScvrollWindowEx api if the caller
            has securoty permissions to call unmanaged code. If not this
            method will just invalidate the control.  
            </summary>
            <param name="xAmount">The amount to scroll left to right.</param>
            <param name="yAmount">The amount to scroll up and down.</param>
            <param name="scrollRect">The portion of the client area to be scrolled</param>
            <param name="clipRect">Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.</param>
            <param name="updateRect">Receives the boundaries of the rectangle invalidated by scrolling.</param>
            <param name="eraseBackground">Erases the newly invalidated region by sending a WM_ERASEBKGND message to the window when specified with the invalidate flag is true.</param>
            <param name="invalidate">Invalidates the exposed region after scrolling.</param>
            <param name="scrollChildren">Scrolls all child windows that intersect the scrollRect parameter. The child windows are scrolled by the number of pixels specified by the xAmount and yAmount parameters. The system sends a WM_MOVE message to all child windows that intersect scrollRect, even if they do not move.</param>
            <param name="smoothScrollAmount">If greatern than 0 scrolls using smooth scrolling. The amount is in milliseconds.</param>
            <returns>If the function succeeds, the return value is 2 for SIMPLEREGION (rectangular invalidated region), 3 for COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles), or 1 for NULLREGION (no invalidated region). If the function fails, the return value is 0.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.BeginUpdate">
            <summary>
            Sets the <see cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/> flag to true which prevents painting.
            </summary>
            <remarks>This is used to optimize performanance while setting a number of properties or adding a number of items (e.g. nodes in a tree control) so that all paint messages are ignored until <see cref="M:Infragistics.Win.UltraControlBase.EndUpdate"/> is called.</remarks>
            <seealso cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/>
            <seealso cref="M:Infragistics.Win.UltraControlBase.EndUpdate"/>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.EndUpdate">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/> flag to false and invalidates the control
            </summary>
            <remarks>
            <p class="body">This method must be called after <see cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/>. If <b>BeginUpdate</b> was called without a subsequent call to <b>EndUpdate</b> the control will not draw itself.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/>
            <seealso cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.EndUpdate(System.Boolean)">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/> flag to false and optionally invalidates the control.
            </summary>
            <param name="invalidate">True to invalidate the control and dirty the child elements; otherwise false.</param>
            <remarks>
            <p class="body">This method must be called after <see cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/>. If <b>BeginUpdate</b> was called without a subsequent call to <b>EndUpdate</b> the control will not draw itself.</p>
            <p class="note"><b>Note:</b> Calling this method passing in false should only be done when it is known that the changes made between 
            the <see cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/> and <b>EndUpdate</b> calls did not require invalidation or dirtying of the elements or when the invalidation 
            is being handled by the programmer.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraControlBase.IsUpdating"/>
            <seealso cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate">
            <summary>
            Invalidates the control and causes a paint message to be sent to the control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the control and causes a paint message to be posted to the control.
            </summary>
            <param name="rc">Represents the region to invalidate.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the specified region of the control and causes a paint message to be posted to the control.
            </summary>
            <param name="rc">Represents the region to invalidate.</param>
            <param name="invalidateChildren">Indicates whether to invalidate the child controls as well.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate(System.Boolean)">
            <summary>
            Invalidates the specified region of the control and causes a paint message to be posted to the control.
            </summary>
            <param name="invalidateChildren">Indicates whether to invalidate the child controls as well.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Invalidates the specified region of the control and causes a paint message to be posted to the control.
            </summary>
            <param name="region">Represents the region to invalidate.</param>
            <param name="invalidateChildren">Indicates whether to invalidate the child controls as well.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Invalidate(System.Drawing.Region)">
            <summary>
            Invalidates the specified region of the control and causes a paint message to be posted to the control.
            </summary>
            <param name="region">Represents the region to invalidate.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Update">
            <summary>
            Cuases the control to redraw the invalidated regions.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.GetSelectionManager">
            <summary>
            Returns the ISelectionManager. The default implementation
            tries to cast this object to an ISelectionManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#FireMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#FireMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.NotifyDesignEnvironmentOfChange">
            <summary>
            <p class="body">In design mode notifies the <see cref="T:System.ComponentModel.Design.IComponentChangeService"/> that the component has changed so that it can mark the component dirty.</p>
            <p class="body">At runtime this method does nothing.</p>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnPropertyChanged(Infragistics.Win.PropertyChangedEventArgs)">
            <summary>
            Called when a property or subobject's property value has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.NotifyPropChange(System.Enum)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.NotifyPropChange(System.Enum,Infragistics.Shared.PropChangeInfo)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
            <param name="propId">An ID that denotes the property.</param>
            <param name="trigger">Optional. Used during a prop change notification to create a complete context chain of what triggered the change. </param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
            <param name="e"><see cref="T:Infragistics.Win.UIElementEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is left (the mouse is moved
            off the element)
            </summary>
            <param name="e"><see cref="T:Infragistics.Win.UIElementEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Calls the ControlUIElement's draw method
            </summary>
            <param name="pe"><see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Does nothing since the background is drawn in OnPaint
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.IsPointDesignTimeActive(System.Drawing.Point)">
            <summary>
            Determines if the control should receive mouse notifications at design time for the specified point.
            </summary>
            <param name="pt">Point in client coordinates.</param>
            <returns>True if the control should receive any mouse notifications for the specified point.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.ForwardMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to forward mouse move messages to the control.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used to invoke the KeyDown event.
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.SetFocusToNextControl(System.Boolean)">
            <summary>
            Sets focus the next/previous control in the tab order.
            </summary>
            <param name="forward">True to set focus to the next control; false to set focus to the previous control.</param>
            <returns>A boolean indicating whether the next/previous control was successfully given the focus.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.DrawControl(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a control (and all of its descendant controls). 
            </summary>
            <param name="controlToDraw">The control to draw.</param>
            <param name="graphics">The graphics object to draw the control on.</param>
            <param name="rect">The destination rectangle.</param>
            <param name="clipRect">The clipping area.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.DrawControl(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Single)">
            <summary>
            Draws a control (and all of its descendant controls). 
            </summary>
            <param name="controlToDraw">The control to draw.</param>
            <param name="graphics">The graphics object to draw the control on.</param>
            <param name="rect">The destination rectangle.</param>
            <param name="clipRect">The clipping area.</param>
            <param name="opacity">The opacity (1.0 is completely opague, 0.0 is completely transparent).</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.DrawControl(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws a control (and all of its descendant controls). 
            </summary>
            <param name="controlToDraw">The control to draw.</param>
            <param name="graphics">The graphics object to draw the control on.</param>
            <param name="rect">The destination rectangle.</param>
            <param name="clipRect">The clipping area.</param>
            <param name="attributes">The image attributes to use.</param>
            <remarks>If the <paramref name="attributes"/> parameter is not null then an off-screen bitmap will be created regardless of the <paramref name="doubleBuffer"/> parameter value.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Forms.Control.BackColor"/> property of the control has been changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.PlaySound(System.String)">
            <summary>
            Plays the specified sound file.
            </summary>
            <param name="soundFile">Path to the sound file to be played.</param>
            <remarks>
            <p class="body">
            The specified sound file is played asynchronously, meaning that the main thread is <b>not</b> blocked while the sound file is being played.<br></br>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.PlaySound(System.String,Infragistics.Win.SoundFlags)">
            <summary>
            Plays the specified sound file.
            </summary>
            <param name="soundFile">Path to the sound file to be played.</param>
            <param name="flags">The <see cref="T:Infragistics.Win.SoundFlags"/> enumeration value that specifies how the sound file is to be played.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.PlaySound(Infragistics.Win.SoundEvents)">
            <summary>
            Plays the specified system sound event.
            </summary>
            <param name="soundEvent">The <see cref="T:Infragistics.Win.SoundEvents"/> enumeration value that specifies which system-defined sound event is to be played.</param>
            <remarks>
            <p class="body">
            The specified system sound event is played asynchronously, meaning that the main thread is <b>not</b> blocked while the sound file is being played.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.PlaySound(Infragistics.Win.SoundEvents,Infragistics.Win.SoundFlags)">
            <summary>
            Plays the specified system sound event.
            </summary>
            <param name="soundEvent">The <see cref="T:Infragistics.Win.SoundEvents"/> enumeration value that specifies which system-defined sound event is to be played.</param>
            <param name="soundFlags">The <see cref="T:Infragistics.Win.SoundFlags"/> enumeration value that specifies how the sound file is to be played.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnCreateControl">
            <summary>
            Invoked when the control is created.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed and unmanaged resources should be released.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.OnHandleCreated(System.EventArgs)">
            <summary>
            Invoked when the handle of the control is created.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.Refresh">
            <summary>
            Invalidates and updates the control immediately.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraControlBase.MouseEnterElement">
            <summary>
            Fired when the mouse enters a UIElement
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraControlBase.MouseLeaveElement">
            <summary>
            Fired when the mouse leaves a UIElement
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraControlBase.PropertyChanged">
            <summary>
            Fired after a property has changed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.IsUpdating">
            <summary>
            Returns true between <see cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/> and <see cref="M:Infragistics.Win.UltraControlBase.EndUpdate"/> method calls.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraControlBase.BeginUpdate"/>
            <seealso cref="M:Infragistics.Win.UltraControlBase.EndUpdate"/>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.FlatMode">
            <summary>
            Indicates whether the control has a flat appearance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.SupportThemes">
            <summary>
            Indicates whether the elements of a control may be rendered using system themes.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.DrawFilter">
            <summary>
            Gets/sets the draw filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.CreationFilter">
            <summary>
            Gets/sets the creation filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.CursorFilter">
            <summary>
            Gets/sets the cursor filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#SelectionManager">
            <summary>
            Gets the selection manager (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#IsFlatMode">
            <summary>
            Returns true if borders should be displayed as flat.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#SupportThemes">
            <summary>
            Returns true if the system themes should be used to render elements when possible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControl#DefaultCursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element and that element (and all of the 
            elements in its parent chain) don't supply their own.
            Note: this is normally supplied by returning the 
            Control's cursor property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Infragistics#Win#IUltraControlElement#MainUIElement">
            <summary>
            Returns the control's main UI element..
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Cursor">
            <summary>
            Overrides the Cursor to return the cursor from the UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.BaseCursor">
            <summary>
            Returns the Control's base cursor property (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.ControlUIElement">
            <summary>
            Abstract property for getting the control's main
            UI element 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.AlphaBlendEnabled">
            <summary>
            Determines whether alpha blending is enabled
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.AlphaBlendMode">
            <summary>
            Returns or sets how alpha blending is performed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.DesignerChangeNotificationsDisabled">
            <summary>
            Setting the property to true will cause the control to not fire any designer change
            notifications. If a designer change notification was suppressed after setting this 
            property to true, then it will be fired when this property is set back to false again.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.Events">
            <summary>
            Returns the list of event handlers that are attached to this component.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlBase.SupportsEditorWithMask">
            <summary>
            This member supports the Infragistics infrastructure and is not meant to be invoked externally.
            </summary>
            <remarks>
            <p class="body">Indicates whether the control can utilize an <see cref="T:Infragistics.Win.EditorWithMask"/></p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject">
            <summary>
            Accessible object representing a control
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject"/>
            </summary>
            <param name="control">Associated control</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetFocusedChildControl">
            <summary>
            Returns the accessible object of a child control that contains focus.
            </summary>
            <returns>Returns the accessible object of a child control that contains focus.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetChildControlAccessibleObject(System.Int32)">
            <summary>
            Returns the accessible object of a child control at the specified index.
            </summary>
            <returns>Returns the accessible object of a child control at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetChildControlAccessibleObject(System.Int32,System.Int32)">
            <summary>
            Returns the accessible object of a child control at the specified coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>Returns the accessible object of a child control at the specified coordinates.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetChild(System.Int32)">
            <summary>
            Returns the child at the specified index.
            </summary>
            <param name="index">Index of the child whose accessible object should be returned.</param>
            <returns>The control accessible object at the specified index</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>Returns the number of visible child controls.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.GetFocused">
            <summary>
            Retrieves the object that has the keyboard focus
            </summary>
            <returns>Returns the control that contains the input focus</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlBase.UltraControlAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>Returns the child control at the specified location or the <b>Owner</b>.</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>CustomColorBox</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Performs the work of setting the specified bounds of this control.
            The control is NOT sizable
            </summary>
            <param name="x">The new Left property value of the control.</param>
            <param name="y">The new Top property value of the control.</param>
            <param name="width">The new Width property value of the control.</param>
            <param name="height">The new Height property value of the control. </param>
            <param name="specified">A bitwise combination of the BoundsSpecified values. </param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles Key Down Messages
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/>KeyEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Used to determine which keys we are interested in
            </summary>
            <param name="keyData">Keys</param>
            <returns>Returns true if the key is a valid input key for this control</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new accessibility object for the control.</returns>
        </member>
        <member name="E:Infragistics.Win.CustomColorBox.MouseUpOnColor">
            <summary>
            Fires When mouse is released on color
            </summary>
        </member>
        <member name="E:Infragistics.Win.CustomColorBox.ColorChanged">
            <summary>
            Fires when color is changed or selected
            </summary>
        </member>
        <member name="E:Infragistics.Win.CustomColorBox.BeforeShowMoreColorsDialog">
            <summary>
            Fires before more colors button is pressed
            </summary>
        </member>
        <member name="E:Infragistics.Win.CustomColorBox.AfterShowMoreColorsDialog">
            <summary>
            Fires after more colors button is pressed
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.ControlUIElement">
            <summary>
            Returns Control UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.DefaultSize">
            <summary>
            The controls default size
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.DisplayStyle">
            <summary>
            Visual Style for the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColors">
            <summary>
            An array of user defined colors that are used in the show more colors dialog.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.Color">
            <summary>
            Currently selected color
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.UseSharedCustomColors">
            <summary>
            Indicates whether or not custom colors should be shared across all instances of the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.ShowTransparentColor">
            <summary>
            Returns or sets whether a button representing Color.Transparent is displayed.
            </summary>
            <remarks>
            <p class="note">Note: This property does not affect the control when the <see cref="P:Infragistics.Win.CustomColorBox.DisplayStyle"/> is set to <b>VisualStudio</b></p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.ShowAutomaticColor">
            <summary>
            Returns or sets whether a button representing SystemColors.WindowText is displayed.
            </summary>
            <remarks>
            <p class="note">Note: This property does not affect the control when the <see cref="P:Infragistics.Win.CustomColorBox.DisplayStyle"/> is set to <b>VisualStudio</b></p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject">
            <summary>
            Accessibility object representing a <see cref="T:Infragistics.Win.CustomColorBox"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.#ctor(Infragistics.Win.CustomColorBox)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject"/>
            </summary>
            <param name="colorBox">Associated <b>CustomColorBox</b> control</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Index">
            <summary>
            Returns the index of the option set item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBox.CustomColorBoxControlAccessibleObject.CustomColorBoxButtonAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxDisplayStyle">
            <summary>
            Controls the display style of the colorbox
            </summary>
        </member>
        <member name="F:Infragistics.Win.CustomColorBoxDisplayStyle.VisualStudio">
            <summary>
            Display like the visual Studio color picker show custom
            color boxes
            </summary>
        </member>
        <member name="F:Infragistics.Win.CustomColorBoxDisplayStyle.OfficeXP">
            <summary>
            Display like Office XP flat, has custom color button
            </summary>
        </member>
        <member name="F:Infragistics.Win.CustomColorBoxDisplayStyle.Office2000">
            <summary>
            Display like the Office2000 3D, has custom color button
            </summary>
        </member>
        <member name="F:Infragistics.Win.CustomColorBoxDisplayStyle.Office2003">
            <summary>
            Office 2003 style color box
            </summary>
        </member>
        <member name="F:Infragistics.Win.CustomColorBoxDisplayStyle.VisualStudio2005">
            <summary>
            Visual Studio 2005 style color box
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxAutomaticTrackingButtonUIElement">
            <summary>
            CustomColorBoxAutomaticTrackingButtonUIElement. A color box that highlights/draws border around
            itself when the mouse is over it.
            </summary>
            <seealso cref="T:Infragistics.Win.ButtonUIElement"/>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxSpecialButtonUIElement">
            <summary>
            Button element for a <see cref="T:Infragistics.Win.CustomColorBox"/> that displays a color box and some associated text.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxChildElement">
            <summary>
            Base class for a button element displayed in a custom colorbox control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.CustomColor,System.Boolean)">
            <summary>
            Constuctor initializes a new instance of the <b>CustomColorBoxChildElement</b> class.
            </summary>
            <param name="parent">Parent Element</param>
            <param name="customColor">Custom color represented by the element</param>
            <param name="isCustomizable">Indicates if the color is customizable.</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.OnMouseLeave">
            <summary>
            Fired when mouse leaves the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.OnMouseEnter">
            <summary>
            Fired when mouse enters the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Used by an element to render using the system theme. This method will not
            be invoked if the themes are not supported.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>Returning true will prevent the invocation of the DrawBackColor,
            DrawImageBackground, DrawBorders, DrawImage and DrawForeground. Return
            false when themes are not supported by the element or if unable to 
            render using the system theme.</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Buttons capture the mouse. So this method sets captureMouse
            to true and returns true
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.OnButtonStateChange">
            <summary>
            Invoked when the button state of the element changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxChildElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.ButtonStyle">
            <summary>
            Handles the borderstyle for the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.CanClickButton">
            <summary>
            Returns whether the button may be pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.Color">
            <summary>
            Returns or sets the color represented by the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.WantsMouseHoverNotification">
            <summary>
            Return true if this element wants to be notified when the mouse hovers over it. This property is read-only.
            If we are not in visual studio mode we want this notification.
            </summary>
            <remarks>The default implemenation returns false. This should be overridden by elements that want their OnMouseHover method to be called.</remarks>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.HasColor">
            <summary>
            True if we have a color false otherwise
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxChildElement.ButtonState">
            <summary>
            Returns information regarding the mouse in relation to the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxSpecialButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Drawing.Color)">
            <summary>
            Initializes a new <b>CustomColorBoxSpecialButtonUIElement</b>
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxSpecialButtonUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.CustomColor,System.Boolean)">
            <summary>
            Initializes a new <b>CustomColorBoxSpecialButtonUIElement</b>
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
            <param name="isCustomizable">Indicates if the color is customizable</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxSpecialButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxSpecialButtonUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxSpecialButtonUIElement.ToolTip">
            <summary>
            Returns or sets the tooltip that is displayed by the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxAutomaticTrackingButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Drawing.Color)">
            <summary>
            Constructor, initializes a new instance of <b>CustomColorBoxAutomaticTrackingButtonUIElement</b>
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxAutomaticTrackingButtonUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.CustomColor)">
            <summary>
            Constructor, initializes a new instance of <b>CustomColorBoxAutomaticTrackingButtonUIElement</b>
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement">
            <summary>
            Summary description for CustomColorBoxHotTrackingButtonUIElement.
            </summary>
            <seealso cref="T:Infragistics.Win.ButtonUIElement"/>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.#ctor(Infragistics.Win.CustomColorBoxUIElement)">
            <summary>
            Constuctor initializes a new instance of the <b>CustomColorBoxHotTrackingButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent Element</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.#ctor(Infragistics.Win.CustomColorBoxUIElement,Infragistics.Win.CustomColor,System.Boolean)">
            <summary>
            Constuctor initializes a new instance of the <b>CustomColorBoxHotTrackingButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
            <param name="customizable">True if color is customizable</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.#ctor(Infragistics.Win.CustomColorBoxUIElement,Infragistics.Win.CustomColor)">
            <summary>
            Constuctor initializes a new instance of the <b>CustomColorBoxHotTrackingButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent Element</param>
            <param name="color">Color to be displayed</param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders.
            Draw focus around the currently selected bucket.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draw the foreground of the element
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.GetToolTipText">
            <summary>
            Returns the string associated with this element from the
            string res
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.Invalidate(System.Boolean)">
            <summary>
            Invalidates this element
            </summary>
            <param name="update">True to force an immediate update</param>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.DrawsFocusRect">
            <summary>
            Handles whether or not we draw focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxHotTrackingButtonUIElement.HasColor">
            <summary>
            True if we have a color false otherwise
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomColorBoxUIElement">
            <summary>
            Summary description for UltraCustomColorChooserUIElement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.#ctor(Infragistics.Win.CustomColorBox)">
            <summary>
            CTor
            </summary>
            <param name="colorChooser"></param>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.OnPreMouseDown(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called when a mouse down message is received. Returning true will
            cause normal mouse down processing to be skipped
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.PositionChildElements">
            <summary>
            Position Child Elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.OnDispose">
            <summary>
            On Dispose
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            GotFocus event handler. Gets called when the control takes focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomColorBoxUIElement.OnGotFocus(System.Object,System.EventArgs)">
            <summary>
            GotFocus event handler. Gets called when the control takes focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomColorBoxUIElement.FocusedElement">
            <summary>
            Returns the element that has focus
            </summary>
        </member>
        <member name="T:Infragistics.Win.CustomToggleButton">
            <summary>
            Summary Description for Custom toggle button
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomToggleButton.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UIElementButtonType)">
            <summary>
            Initializes	a new ImageAndTextButtonUIElement.
            </summary>
            <param name="parent">Parent element</param>
            <param name="buttonType">Type of button</param>
        </member>
        <member name="M:Infragistics.Win.CustomToggleButton.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Init appearance for the toggle button
            </summary>
            <param name="appearance"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.CustomToggleButton.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e"></param>
            <param name="adjustableArea"></param>
            <param name="captureMouseForElement"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CustomToggleButton.OnCheckStateChange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.Win.CustomToggleButton.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CustomToggleButton.ButtonStyle">
            <summary>
            Custom Toggle buttons will have no border
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataBindingUtils">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataBindingUtils.GetItemProperties(System.Windows.Forms.BindingManagerBase,Infragistics.Win.DataBindingUtils.ValuePropertyDescriptorCreator)">
            <summary>
            Gets the collection of property descriptors. 
            </summary>
            <param name="bm">Binding manager.</param>
            <param name="customDescriptorCreator">Property descriptor creator method.</param>
            <returns>Property collection.</returns>
        </member>
        <member name="M:Infragistics.Win.DataBindingUtils.IsKnownType(System.Type)">
            <summary>
            Checks if the type is a known type (to Infragistics controls).
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataBindingUtils.StripMember(System.String)">
            <summary>
            Used to strip out all characters that are before the last period
            of the passed in value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataBindingUtils.GetObjectForComparison(System.Object)">
            <summary>
            This method returns the object that will be compared against when syncing data bound items
            with the underlying bound list.
            </summary>
            <param name="listObject"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DataBindingUtils.DataBindConvert(System.Object,System.Type,System.Globalization.CultureInfo,System.String,System.IFormatProvider,System.Boolean@)">
            <summary>
            Converts source value to destination type using specific culture.
            </summary>
            <param name="source">Value to convert. Can be null or DBNull.</param>
            <param name="destinationType">Type to convert to.</param>
            <param name="culture">Specific culture used for conversion. If null, default culture is used.</param>
            <param name="formatString">Format string.</param>
            <param name="formatInfo">Format provider.</param>
            <param name="validConversion">True if the conversion was valid.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Infragistics.Win.DataBindingUtils.ValuePropertyDescriptorCreator">
            <summary>
            Delegate for property descriptor creators.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValuePropertyDescriptorBase">
            <summary>
            Represents a pseudo property to deal with arrays of 
            primitive types.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValuePropertyDescriptorBase.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:Infragistics.Win.ValuePropertyDescriptorBase.CanResetValue(System.Object)">
            <summary>
            Returns false.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValuePropertyDescriptorBase.GetValue(System.Object)">
            <summary>
            Returns the passed in object.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValuePropertyDescriptorBase.ResetValue(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Infragistics.Win.ValuePropertyDescriptorBase.ShouldSerializeValue(System.Object)">
            <summary>
            Returns true.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.ValuePropertyDescriptorBase.ComponentType">
            <summary>
            Gets component type.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValuePropertyDescriptorBase.PropertyType">
            <summary>
            Gets property type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IEditorDataFilter">
            <summary>
            Interface for custom data filters. Data filter is used for conversion between Display (user), Editor and Owner (data source).
            </summary>
        </member>
        <member name="M:Infragistics.Win.IEditorDataFilter.Convert(Infragistics.Win.EditorDataFilterConvertArgs)">
            <summary>
            Converts data between Display (user), Editor and Owner (data source).
            </summary>
            <param name="conversionArgs">Input arguments.</param>
            <returns>Converted data.</returns>
        </member>
        <member name="T:Infragistics.Win.DataFilterException">
            <summary>
            Custom exception thrown if user code in <see cref="M:Infragistics.Win.IEditorDataFilter.Convert(Infragistics.Win.EditorDataFilterConvertArgs)"/> throws an exception.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Infragistics.Win.ConversionDirection">
            <summary>
            Different types of conversion requested in custom data filter (<see cref="P:Infragistics.Win.EmbeddableEditorBase.DataFilter"/>).
            </summary>
        </member>
        <member name="F:Infragistics.Win.ConversionDirection.DisplayToEditor">
            <summary>
            Conversion from user entered data to data used by the editor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ConversionDirection.EditorToDisplay">
            <summary>
            Conversion from data used by the editor to data displayed to the user.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ConversionDirection.OwnerToEditor">
            <summary>
            Conversion from owner data to data used by the editor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ConversionDirection.EditorToOwner">
            <summary>
            Conversion from data used by the editor to owner data.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorDataFilterConvertArgs">
            <summary>
            Method arguments for data filter Convert() method.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorDataFilterConvertArgs.#ctor(Infragistics.Win.ConversionDirection,System.Object,System.Type,Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.Direction">
            <summary>
            Specifies direction of conversion which is taking place.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.Handled">
            <summary>
            Set to true if data filter handles conversion.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.Value">
            <summary>
            Source object for conversion.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.DestinationType">
            <summary>
            Type of destination object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.IsValid">
            <summary>
            Set to false if source data was invalid.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.Editor">
            <summary>
            Editor which requests the conversion.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorDataFilterConvertArgs.Context">
            <summary>
            Owner context.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DateTimeEditor">
            <summary>
            DateTimeEditor class implementation
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask">
            <summary>
            MaskedEdit class
            </summary>	
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>EditorWithMask</b> class.
            </summary>		
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            constructor, initializes a new instance of the <b>EditorWithMask</b> class.
            </summary>
            <param name="defaultOwner">The default owner associated with this editor</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type"></param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The type to test.</param>
            <returns>Returns true if the type can be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include the borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyDataArg"></param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.ResolveShowInkButton(Infragistics.Win.IInkProvider,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Returns whether this editor displays an ink button.
            </summary>
            <param name="inkProvider">The IInkProvider implementor that provides the inking capabilities.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used by the specified owner.</param>
            <returns>A boolean indicating whether the editor displays an ink button.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.IsValidValue(System.String@)">
            <summary>
            Returns true if the edited value is valid (read-only).
            If the value is invalid, the 'errorMessage' out parameter can contain an error message.
            </summary>
            <param name="errorMessage">If the value is invalid, this out parameter can contain an error message.</param>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
            <returns>True if the editor's value is valid, else false.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key down while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnOwnerKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Occurs when the owner gets a key press while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnOwnerKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key up while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnDispose">
            <summary>
            Called when the editor is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>It raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Called before edit mode has been exited. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <param name="forceExit">If true must exit even if exit event is cancelled.</param>
            <param name="applyChanges">If true any changes made while in edit mode will be applied.</param>
            <remarks>The base implementation raises the BeforeExitEditMode if fireEvent is true.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnAfterExitEditMode">
            <summary>
            Called after edit mode has been exited. 
            </summary>
            <remarks>It raises the AfterExitEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Reset">
            <summary>
            resets all the properties to their original values
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetMaskForType(System.Type,System.IFormatProvider)">
            <summary>
            Returns the default mask used for editing values of dataType. 
            If the dataType is not supported then returns null.
            </summary>
            <remarks>
            Default masks are used in case where no input mask is specified.
            </remarks>
            <param name="dataType"></param>
            <param name="formatProvider">A CultureInfo or DateTimeFormatInfo or NumberFormatInfo</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.SetText(Infragistics.Win.UltraWinMaskedEdit.SectionsCollection,System.String,System.Char,System.Char)">
            <summary>
            Sets the text to sections collection.
            </summary>
            <param name="sections"></param>
            <param name="text"></param>
            <param name="promptChar"></param>
            <param name="padChar"></param>
            <returns>Number of characters from text that matched.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.ResetSpinButtonDisplayStyle">
            <summary>
            Reset SpinButtonDisplayStyle
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Beep">
            <summary>
            Calls the MessageBeep api
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.SupportsDataType(System.Type)">
            <summary>
            Returns true if the data type is supported by the EditorWithMask, false otherwise.
            </summary>
            <param name="dataType"><see cref="T:System.Type"/></param>
            <returns><b>True</b> if type is supported, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultTimeMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for currency based on the cultureInfo.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultDateMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for currency based on the cultureInfo.
            </summary>
            <param name="formatProvider">Can be a CultureInfo or a DateTimeFormatInfo.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultCurrencyMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for currency based on the cultureInfo.
            </summary>
            <param name="formatProvider">Format provider to use to construct a default mask with. Can be a CultureInfo or a NumberFormatInfo.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultCurrencyMask(System.IFormatProvider,System.Int32,System.Int32,System.Char)">
            <summary>
            Calculates the default mask for currency based on the cultureInfo.
            </summary>
            <param name="formatProvider">Format provider to use to construct a default mask with. Can be a CultureInfo or a NumberFormatInfo.</param>
            <param name="integerDigits">Number of digits in integer section. -1 means use a default. Can be 0 in which case there won't be an integer portion.</param>
            <param name="fractionDigits">Number of digits in fraction section. -1 means use one specified by culture info. Can be 0 in which case there won't be fraction section.</param>
            <param name="allowNegatives">If '-' or '+' then negative numbers are allowed. '-' specifies that the minus sign should be displayed only when the number is negative. '+' specifies that the plus or minus sign will always be displayed depending on whther the number is negative or positive. If this parameter is any other character then it's ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultDoubleMask(System.IFormatProvider)">
            <summary>
            Calculates the default mask for double mask based on the CultureInfo
            </summary>
            <param name="formatProvider">Can be a CultureInfo or a NumberFormatInfo.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CalcDefaultDoubleMask(System.IFormatProvider,System.Int32,System.Int32,System.Char)">
            <summary>
            Calculates the default mask for double mask based on the CultureInfo
            </summary>
            <param name="formatProvider">Format provider to use to construct a default mask with. Can be a CultureInfo or a NumberFormatInfo.</param>
            <param name="integerDigits">Number of digits in integer section. -1 means use a default. Can be 0 in which case there won't be an integer portion.</param>
            <param name="fractionDigits">Number of digits in fraction section. -1 means use one specified by culture info. Can be 0 in which case there won't be fraction section.</param>
            <param name="allowNegatives">If '-' or '+' then negative numbers are allowed. '-' specifies that the minus sign should be displayed only when the number is negative. '+' specifies that the plus or minus sign will always be displayed depending on whther the number is negative or positive. If this parameter is any other character then it's ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.IsMaskValidForDataType(System.Type,System.String,System.IFormatProvider)">
            <summary>
            Returns true if mask is valid for the type.
            </summary>
            <param name="dataType"><see cref="T:System.Type"/></param>
            <param name="mask">mask string</param>
            <param name="formatProvider"><see cref="T:System.Globalization.CultureInfo"/></param>
            <returns><b>True</b> if mask is valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetText(Infragistics.Win.UltraWinMaskedEdit.MaskMode)">
            <summary>
            Returns the text for the object using the specified mask mode.
            </summary>
            <param name="maskMode">The mode that determines how literals and prompt characters are accounted for.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.ResetSelectedTextBackColor">
            <summary>
            Reset TextSlectionBackColor
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.ResetSelectedTextForeColor">
            <summary>
            Reset TextSlectionForeColor
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.SelectAll">
            <summary>
            Selects all the text in the control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Delete">
            <summary>
            Deletes currently selected text if possible and shifts characters accordingly.
            </summary>
            <remarks>
            <p class="body">When you invoke this method, the control tries to delete the  currently selected text and shift characters. If nothing is selected, it tries to delete the character at the current input position.</p> 
            <p class="body">This method returns True if the operation was successful. If the operation fails because characters after the selection could not be shifted, the method returns False.</p>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Copy">
            <summary>
            Performs a Copy edit operation on the currently selected text, placing it on the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Cut">
            <summary>
            Performs a Cut edit operation on the currently selected text, removing it from the control and placing it on the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Paste">
            <summary>
            Performs a Paste edit operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.ToggleInsertMode">
            <summary>
            Toggles between insert and overstrike mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.PerformAction(Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction,System.Boolean,System.Boolean)">
            <summary>
            Simulates user interaction with the control.
            </summary>
            <param name="actionCode"></param>
            <param name="shift"></param>
            <param name="control"></param>
            <returns></returns>
            <remarks>
            <p class="body">Invoke this method to simulate an action the user can perform.</p>
            <p class="body">Many actions are only appropriate in certain situations; if an action is inappropriate, it will not be performed.</p>
            <p class="body">You can use the <see cref="P:Infragistics.Win.EditorWithMask.CurrentState"/> property to determine the state of the control when the action is about to be performed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetDefaultInputMask(System.IFormatProvider)">
            <summary>
            Gets the default mask for the editor. When the owner doesn't provide any
            mask, value of this property will be used as the default mask. Default value is
            null. You should only override this property if your editor only supports a specific 
            type. For example, DateTimeEditor only supports Date. Editing numbers, or strings 
            do not make sense for a date time editor. So for such editors, override and return
            a default mask for that editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.System#ICloneable#Clone">
            <summary>
            Clones the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.DataValueToText(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts data value to text making use of any format provider and format strings that owner may provide. If unsuccessful, returns null.
            </summary>
            <param name="valueToConvert"></param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetDisplayValue">
            <summary>
            Provides editor-specific display value.
            </summary>
            <returns>Display string.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.GetEditorValue">
            <summary>
            Provides editor-specific editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Checks validity of converted values.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="E:Infragistics.Win.EditorWithMask.InvalidOperation">
            <summary>
            Occurs when the user attempts to perform an operation that cannot be completed.
            </summary>
            <remarks>
            <p class="body">Event that is fired when user performs an action that can not be executed because the state of the control (caret position, selection and other properties) does not allow it. For example, when the user presses left arrow key when caret is already at the first display character in the MaskedEdit, the left arrow key action (which is to move the caret to previous display character) can not be performed. In this case such an action is cosidered an invalid operation and this event is fired.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.Win.EditorWithMask.InvalidChar">
            <summary>
            Occurs when the user types a character that fails mask validation.
            </summary>
            <remarks>
            The InvalidChar event is fired when user types a character that does not match the input mask associated with the current input position.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.CanFocus">
            <summary>
            Returns true if the editor can take focus while in edit mode (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.Focused">
            <summary>
            Returns true if the editor has focus (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.Value">
            <summary>
            The current value being edited.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.IsValid">
            <summary>
            Returns true if the edited value is valid (read-only).
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SupportsSelectableText">
            <summary>
            Returns true if this editor supports selecting text.
            </summary>
            <remarks>The default implementation returns false. Derived classes that override this property and return true must also override the <see cref="P:Infragistics.Win.EditorWithMask.SelectionStartInternal"/>, <see cref="P:Infragistics.Win.EditorWithMask.SelectionLengthInternal"/>, <see cref="P:Infragistics.Win.EditorWithMask.SelectedTextInternal"/> and <see cref="P:Infragistics.Win.EditorWithMask.TextLengthInternal"/> properties.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SelectionLengthInternal">
            <summary>
            Gets or sets the number of characters selected in the editor.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SelectionStartInternal">
            <summary>
            Gets or sets the starting point of text selected in the editor.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SelectedTextInternal">
            <summary>
            Gets or sets the currently selected text in the editor.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.TextLengthInternal">
            <summary>
            Gets the length of the text in the editor.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SpinButtonDisplayStyle">
            <summary>
            SpinButtonDisplay style dictates whether to show spin buttons and
            where to show them.
            </summary>
            <remarks>
            Spin buttons allow the user to increment and decrement values in current section ( section where the caret is ). This can be used for editing numbers for example.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SpinWrap">
            <summary>
            Returns or sets a value indicating whether the control's spin buttons should wrap its value.
            </summary>
            <remarks>
            <p class="body">If true the spin button will wrap the value incremented/decremented based on its Min/Max value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.Sections">
            <summary>
            A collection of the sections used in the control. Only returns
            a valid collection if currently in edit mode and if mask has been parsed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.DisplayChars">
            <summary>
            A collection of the display characters used in the control. Only returns
            a valid collection if currently in edit mode and if mask has been parsed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SelectedTextBackColor">
            <summary>
            Returns or sets the background color of selected text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.SelectedTextForeColor">
            <summary>
            gets or sets the fore color of the selected text
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.InsertMode">
            <summary>
            Returns or sets the editing mode (insert or overstrike) of the control.
            </summary>
            <remarks>
            <p class="body">When this property is set to True, characters typed will be inserted at the current text caret position and any following characters will be moved. When set to false, typing at an insertion point that contains an existing character will replace that character. The value of this flag also affects how characters are deleted using either The Delete key or the Backspace key. When in insert mode, characters after the character being deleted will be shifted by one to the left within the section.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.CurrentState">
            <summary>
            Returns bit flags that signify the current editing state of the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.KeyActionMappings">
            <summary>
            Gives you the ability to reconfigure the way the control responds to user keystrokes.
            </summary>
            <remarks>
            <p class="body">The <b>KeyActionMappings</b> property provides access to the control's mechanism for handling keyboard input from users. All keystrokes for actions such as selection, navigation and editing are stored in a table-based system that you can examine and modify using this property. Through the <b>KeyActionsMappings</b> property, you can customize the keyboard layout of the control to match your own standards for application interactivity.</p>
            <p class="body">For example, if you wanted users to be able to navigate between cells by pressing the F8 key, you could add this behavior. You can specify the key code and any special modifier keys associated with an action, as well as determine whether a key mapping applies in a given context.</p>
            <p class="body"><table border="1" cellpadding="3" width="100%" class="FilteredItemListTable">
            <thead>
            <tr>
            <th>KeyCode</th>
            <th>ActionCode</th>
            <th>StateRequired</th>
            <th>StateDisallowed</th>
            <th>SpecialKeysRequired</th>
            <th>SpecialKeysDisallowed</th>
            </tr>
            </thead>
            <tbody>
            <tr><td class="body">Right</td><td class="body">NextCharacter</td><td class="body">Character</td><td class="body">None</td><td class="body">None</td><td class="body">Ctrl</td></tr>
            <tr><td class="body">Right</td><td class="body">NextSection</td><td class="body">Character</td><td class="body">LastSection</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">Right</td><td class="body">AfterLastCharacter</td><td class="body">LastSection</td><td class="body">None</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">Right</td><td class="body">SetPivot</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Left</td><td class="body">PrevCharacter</td><td class="body">None</td><td class="body">FirstCharacter</td><td class="body">None</td><td class="body">Ctrl</td></tr>
            <tr><td class="body">Left</td><td class="body">PrevSection</td><td class="body">None</td><td class="body">FirstSection</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">Left</td><td class="body">FirstCharacter</td><td class="body">FirstSection</td><td class="body">FirstCharacter</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">Left</td><td class="body">SetPivot</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Home</td><td class="body">FirstCharacter</td><td class="body">None</td><td class="body">FirstCharacter</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">Home</td><td class="body">SetPivot</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">End</td><td class="body">AfterLastCharacter</td><td class="body">None</td><td class="body">AfterLastCharacter</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">End</td><td class="body">SetPivot</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">NextSection</td><td class="body">Character</td><td class="body">LastSection</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">SetPivot</td><td class="body">Character</td><td class="body">LastSection</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">SelectSection</td><td class="body">Character</td><td class="body">LastSection</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">NextControl</td><td class="body">LastSection</td><td class="body">None</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">NextControl</td><td class="body">AfterLastCharacter</td><td class="body">None</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Tab</td><td class="body">NextControl</td><td class="body">UnInitialized</td><td class="body">Character, AfterLastCharacter</td><td class="body">None</td></tr>
            <tr><td class="body">Tab</td><td class="body">PrevSection</td><td class="body">None</td><td class="body">FirstSection</td><td class="body">Shift</td><td class="body">None</td></tr>
            <tr><td class="body">Tab</td><td class="body">SetPivot</td><td class="body">None</td><td class="body">FirstSection</td><td class="body">Shift</td><td class="body">None</td></tr>
            <tr><td class="body">Tab</td><td class="body">SelectSection</td><td class="body">None</td><td class="body">FirstSection</td><td class="body">Shift</td><td class="body">None</td></tr>
            <tr><td class="body">Tab</td><td class="body">PrevControl</td><td class="body">FirstSection</td><td class="body">None</td><td class="body">Shift</td><td class="body">None</td></tr>
            <tr><td class="body">Tab</td><td class="body">PrevControl</td><td class="body">UnInitialized</td><td class="body">Character, AfterLastCharacter</td><td class="body">Shift</td></tr>
            <tr><td class="body">Delete</td><td class="body">Delete</td><td class="body">Selected</td><td class="body">None</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">Delete</td><td class="body">Delete</td><td class="body">Character</td><td class="body">Selected</td><td class="body">None</td><td class="body">Shift</td></tr>
            <tr><td class="body">Delete</td><td class="body">Backspace</td><td class="body">None</td><td class="body">None</td><td class="body">Shift</td><td class="body">Ctrl</td></tr>
            <tr><td class="body">Delete</td><td class="body">AfterLastCharacter</td><td class="body">Character</td><td class="body">Selected</td><td class="body">Ctrl</td><td class="body">Shift</td></tr>
            <tr><td class="body">Delete</td><td class="body">Delete</td><td class="body">Character</td><td class="body">Selected</td><td class="body">Ctrl</td><td class="body">Shift</td></tr>
            <tr><td class="body">Back</td><td class="body">Backspace</td><td class="body">Selected</td><td class="body">None</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">Back</td><td class="body">Backspace</td><td class="body">None</td><td class="body">FirstCharacter, Selected</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">C</td><td class="body">Copy</td><td class="body">Selected</td><td class="body">None</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">X</td><td class="body">Cut</td><td class="body">Selected</td><td class="body">None</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">V</td><td class="body">Paste</td><td class="body">None</td><td class="body">None</td><td class="body">Ctrl</td><td class="body">None</td></tr>
            <tr><td class="body">Insert</td><td class="body">ToggleInsertionMode</td><td class="body">None</td><td class="body">None</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">Up</td><td class="body">UpKeyAction</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">None</td></tr>
            <tr><td class="body">Down</td><td class="body">DownKeyAction</td><td class="body">None</td><td class="body">UnInitialized</td><td class="body">None</td><td class="body">None</td></tr>
            </tbody></table>
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.DisplayNullTextWhenNotFocused">
            <summary>
            Indicates whether the mask editor displays NullText if the value entered 
            is null and the control doesn't have focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.ShowInkButton">
            <summary>
            Determines when to show the Ink Button on the editor
            </summary>
            <remarks>
            This property determines when to show the Ink Button on the editor
            </remarks>		
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.TabNavigation">
            <summary>
            Determines whether the Tab key will tab between number sections in
            a masked editor control. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.AllowShiftingAcrossSections">
            <summary>
            Specifies whether to shift characters across section boundaries when deleting characters.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.ExpectedType">
            <summary>
            Default type used by the editor in the case of data filter. Null means that editor supports 
            multiple data types and expects type to be set or provided by the owner.
            <remarks>
            If <see cref="P:Infragistics.Win.EmbeddableEditorBase.DataFilter"/> is used for conversions between 
            Owner and Editor, this property should also be set. EditorWithMask will use specified type to set 
            default mask in editor constructor (before first call to <see cref="M:Infragistics.Win.IEditorDataFilter.Convert(Infragistics.Win.EditorDataFilterConvertArgs)"/>).
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.InvalidOperationEventHandler">
            <summary>
            Delegate associated with the InvalidOperation event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.InvalidCharEventHandler">
            <summary>
            Delegate associated with the InvalidChar event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.MaskCache.Equals(System.Object)">
            <summary>
            Indicates whether this object is equal to the passed in obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.MaskCache.GetHashCode">
            <summary>
            Rerturns thehas code of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EditorWithMask,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated mask editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.GetSelected">
            <summary>
            Returns the selected object.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject">
            <summary>
            Accessible object representing the spin button for a masked editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject.DoDefaultAction(System.Boolean)">
            <summary>
            Invoked when the default action of the child spin button item is invoked.
            </summary>
            <param name="increment">True if the up/more spin button is pressed, otherwise false.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject.CanSpin(System.Boolean)">
            <summary>
            Used to determine the available state of the spin button item
            </summary>
            <param name="increment">True to determine the state of the up/more spin button, otherwise false to determine the state of the down/less spin button item.</param>
            <returns>True if the value can be changed by the specified spin button direction</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.EditorWithMaskSpinButtonAccessibleObject.GetSpinElement(System.Boolean)">
            <summary>
            Returns the UIElement for the specified spin button item
            </summary>
            <param name="increment">Direction of the spin button item whose element should be returned.</param>
            <returns>The uielement representing the spin button item or null if one is not available</returns>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject">
            <summary>
            Accessible object representing the area containing the mask display characters.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.GetSelected">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.Value">
            <summary>
            Returns the text of the masked edit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject">
            <summary>
            Accessible object representing a display character.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.#ctor(Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="index">Index of the display character associated with the accessible instance</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object
            </summary>
            <param name="flags">One of the <b>AccessibleSelection</b> values</param>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Value">
            <summary>
            Returns the text of the masked edit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.DisplayCharacterAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject">
            <summary>
            Accessible object representing a text selection in a masked editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.#ctor(Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object
            </summary>
            <param name="flags">One of the <b>AccessibleSelection</b> values</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMask.EditorWithMaskAccessibleObject.MaskEditAreaAccessibleObject.SelectedTextAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMask.InvalidMaskedEditorValueException">
            <summary>
            Custom exception thrown in the case of invalid masked editor value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMask.InvalidMaskedEditorValueException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.#ctor">
            <summary>
            Creates a new instance of the DateTimeEditor class
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor - creates a new instance of the DateTimeEditor class
            </summary>
            <param name="defaultOwner">The default owner associated with this editor</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.OnDispose">
            <summary>
            Called when the FontNameEditor class is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.AdjustSizeForOwnerBorders(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Drawing.Size@)">
            <summary>
            Adjusts the specified Size to account for the owner-specified borders
            </summary>
            <param name="owner">The EmbeddableEditorOwnerBase-derived owner</param>
            <param name="ownerContext">The owner context</param>
            <param name="size">A reference to the Size to be adjusted</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>The base implementation raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DoCloseUp">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData"></param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.GetDefaultInputMask(System.IFormatProvider)">
            <summary>
            Returns the default input mask for the DateTimeEditor.
            </summary>
            <param name="formatProvider">The owner-supplied format information.</param>
            <returns>The input mask to use by default.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.GetSpinButtonDisplayStyle">
            <summary>
            Returns the display style for the DateTimeEditor's spin buttons
            </summary>
            <returns>Infragistics.Win.ButtonDisplayStyle</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.SetSpinButtonDisplayStyle(Infragistics.Win.ButtonDisplayStyle)">
            <summary>
            Sets the display style for the DateTimeEditor's spin buttons
            </summary>
            <param name="newVal"></param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.OnMonthDropDownLeave">
            <summary>
            Called when the MonthDropDown's OnLeave event fires
            </summary>
            <remarks>
            Right after this returns, the MonthDropDown hides itself
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key down while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Called before the editor exits edit mode
            </summary>
            <param name="cancel"></param>
            <param name="forceExit"></param>
            <param name="applyChanges"></param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.System#ICloneable#Clone">
            <summary>
            Clones the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.Value">
            <summary>
            Gets/sets the value being edited.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.Focused">
            <summary>
            Returns whether the editor currently has input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.CanFocus">
            <summary>
            Returns whether the editor can receive input focus while in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.DropDownButtonDisplayStyle">
            <summary>
            Gets/sets the display style for the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.DropDownButtonAlignment">
            <summary>
            Gets/sets the alignment for the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.SpinButtonAlignment">
            <summary>
            Gets/sets the alignment for the spin buttons
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.DropDownListAlignment">
            <summary>
            Gets/sets the alignment for the dropdown list
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.WantsOwnerKeyEvents">
            <summary>
            Returns whether the editor wants to receive the owner's key events
            </summary>
            <remarks>
            The DateTimeEditor always returns true because the EditorWithMaskEmbeddableUIElement does not take input focus
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.SupportsDropDown">
            <summary>
            Returns true to indicate that the editor supports a dropdown
            </summary>
        </member>
        <member name="T:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.DateTimeEditor,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated datetime editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditor.DateTimeEditorAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.MonthDropDownWithUIPermissions">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Infragistics.Win.MonthDropDown">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Infragistics.Win.MonthDropDown.ownerControl">
            <summary>
            Holds a reference to the control returned from the
            EmbeddableEditorOwnerBase's GetControl method
            </summary>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.#ctor(Infragistics.Win.DateTimeEditor)">
            <summary>
            Constructor
            </summary>
            <param name="editor">The DateTimeEditor associated with this MonthDropDown</param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is pressed down
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyUp
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            OnKeyPress
            </summary>
            <param name="e">KeyPress event arguments</param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the OnMouseDown base method.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse button is released
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.OnDateChanged(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Called when the selected date range changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.MonthDropDown.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the specified key is used by the control
            </summary>
            <param name="keyData"></param>
            <returns>A boolean indicating whether the specified key is used by the control</returns>
        </member>
        <member name="M:Infragistics.Win.MonthDropDownWithUIPermissions.#ctor(Infragistics.Win.DateTimeEditor)">
            <summary>
            Constructor
            </summary>
            <param name="editor">The DateTimeEditor associated with this MonthDropDown</param>
        </member>
        <member name="P:Infragistics.Win.MonthDropDownWithUIPermissions.CreateParams">
            <summary>
            Overridden method. Applies solid border to the month calendar.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DateTimeEditorUIElement">
            <summary>
            DateTimeEditorUIElement class
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISupportsActiveBorders">
            <summary>
            Implemented by UIElements that support "active borders"
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISupportsActiveBorders.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Returns the resolved ButtonAppearance
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsActiveBorders.DisplayStyle">
            <summary>
            Returns the DisplayStyle to be applied to the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsActiveBorders.IsMouseOver">
            <summary>
            Returns whether the cursor is currently positioned over the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsActiveBorders.BackColor">
            <summary>
            Returns the resolved BackColor
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.OnBeforeDraw">
            <summary>
            Called before the element draw process starts.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.Infragistics#Win#ISupportsActiveBorders#ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the ButtonAppearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.OnMouseEnter">
            <summary>
            OnMouseEnter
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.OnMouseLeave">
            <summary>
            OnMouseLeave
            </summary>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.Infragistics#Win#ISupportsActiveBorders#DisplayStyle">
            <summary>
            Returns the DisplayStyle provided by the EmbeddableEditorOwnerInfoBase-derived owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.Infragistics#Win#ISupportsActiveBorders#IsMouseOver">
            <summary>
            Returns whether the cursor is currently positioned over the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.Infragistics#Win#ISupportsActiveBorders#BackColor">
            <summary>
            Returns the BackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.BorderStyle">
            <summary>
            <see cref="T:Infragistics.Win.UIElementBorderStyle"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorUIElement.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DateTimeEditorDropDownButtonUIElement">
            <summary>
            The UIElement used to represent the DateTimeEditor's dropdown button
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithComboDropDownButtonUIElement">
            <summary>
            The UIElement used to represent the EditorWithCombo's dropdown button
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownButtonUIElement">
            <summary>
            A drop down button UI element
            </summary>
            <seealso cref="T:Infragistics.Win.ButtonUIElementBase"/>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>DropDownButtonUIElement</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawImageBackground and do nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.DrawPressedButton">
            <summary>
            Draws the element in its pressed state
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders.
            Do not draw the focus.
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse is pressed over the button
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the dropdown button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.DropDownButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="F:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.defaultDropDownButtonWidth">
            <summary>
            The width of the dropdown button when the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDisplayStyle(System.Object)"/> method returns a value other than <b>Standard</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.#ctor(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the element is double clicked
            </summary>
            <param name="adjustableArea">If true the mouse was double-clicked over the adjustable area of the element</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draws the button's borders
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the dropdown button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <remarks>
            Since the actual button style is flat when the display style is Office2000 or OfficeXP, we need to override this so the arrow indicator shifts when it is clicked
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.AlignedLeft">
            <summary>
            Indicates if the button is aligned to the left of the edit area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
            <remarks>
            We override this so that we can change style on the fly, based on the owner's display style, and whether the mouse is over the parent
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextBaseDropDownButtonUIElement.Pushed">
            <summary>
            Gets/sets whether the button appears in a pressed state
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithComboDropDownButtonUIElement.#ctor(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorDropDownButtonUIElement.#ctor(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="M:Infragistics.Win.DateTimeEditorDropDownButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="P:Infragistics.Win.DateTimeEditorDropDownButtonUIElement.AlignedLeft">
            <summary>
            Indicates if the button is aligned to the left of the edit area.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DefaultableInteger">
            <summary>
            An structure that contains an immutable integer value which can also be marked as default (no value).
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.#ctor(Infragistics.Win.DefaultableInteger)">
            <summary>
            Constructor
            </summary>
            <param name="value">Initial value</param>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">Compares this instance to a specified object and returns an indication of their relative values.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.FromInteger(System.Int32)">
            <summary>
            Converts the integer to a DefaultableInteger equivalent.
            </summary>
            <param name="value">An integer.</param>
            <returns>A DefaultableInteger equivalent of the integer.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its DefaultableInteger equivalent.
            </summary>
            <param name="s">A string to convert.</param>
            <returns>A DefaultableInteger equivalent to the string.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its DefaultableInteger equivalent.
            </summary>
            <param name="s">A string to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.</param>
            <returns>A DefaultableInteger equivalent to the string.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its DefaultableInteger equivalent.
            </summary>
            <param name="s">A string to convert.</param>
            <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicates the permitted format of s.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.</param>
            <returns>A DefaultableInteger equivalent to the string.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number to its DefaultableInteger equivalent.
            </summary>
            <param name="s">A string to convert.</param>
            <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicates the permitted format of s.</param>
            <returns>A DefaultableInteger equivalent to the string.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.ToString">
            <summary>
            Returns a string that represents the object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Equality(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Inequality(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Addition(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Addition operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Subtraction(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Multiply(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Multiplication operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Division(Infragistics.Win.DefaultableInteger,Infragistics.Win.DefaultableInteger)">
            <summary>
            Division operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Implicit(Infragistics.Win.DefaultableInteger)~System.Int32">
            <summary>
            Implicit conversion operator.
            </summary>
            <param name="value">The source value.</param>
            <returns>An integer value. If the defaultableInteger was defualt then 0 is returned.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.op_Implicit(System.Int32)~Infragistics.Win.DefaultableInteger">
            <summary>
            Implicit conversion operator.
            </summary>
            <param name="value">The source value.</param>
            <returns>A DefaultableInteger set to value.</returns>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.ToString(System.String)">
            <summary>
            Returns a string that represents the object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.ToString(System.IFormatProvider)">
            <summary>
            Returns a string that represents the object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DefaultableInteger.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string that represents the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DefaultableInteger.Default">
            <summary>
            Returns a new instance of DefaultableInteger which is marked as default. 
            </summary>
            <seealso cref="P:Infragistics.Win.DefaultableInteger.IsDefault"/>
        </member>
        <member name="P:Infragistics.Win.DefaultableInteger.IsDefault">
            <summary>
            Returns whether the <see cref="P:Infragistics.Win.DefaultableInteger.Value"/> is marked as default. 
            </summary>
            <seealso cref="P:Infragistics.Win.DefaultableInteger.Default"/>
        </member>
        <member name="P:Infragistics.Win.DefaultableInteger.Value">
            <summary>
            Returns the integer value. 
            </summary>
            <seealso cref="P:Infragistics.Win.DefaultableInteger.Default"/>
            <seealso cref="P:Infragistics.Win.DefaultableInteger.IsDefault"/>
        </member>
        <member name="T:Infragistics.Win.Design.DefaultableIntegerTypeConverter">
            <summary>
            TypeConverter for the <see cref="T:Infragistics.Win.DefaultableInteger"/> structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.DefaultableIntegerTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.DefaultableIntegerTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.DefaultableIntegerTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert from the type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.DefaultableIntegerTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from one type to another.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.MultiLineTextEditor">
            <summary>
            UITypeEditor for entering multiple lines of text.
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.MultiLineTextEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.MultiLineTextEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.MultiLineTextEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if the a small representation of the value is rendered in the property grid.
            </summary>
            <param name="context">Context information about the property to render</param>
            <returns>True to indicate that a value will be rendered</returns>
        </member>
        <member name="M:Infragistics.Win.Design.MultiLineTextEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Invoked when a small representation of the value should be rendered.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Infragistics.Win.Design.TrackBarEditor">
            <summary>
            UITypeEditor for selecting a numeric value from a range using a slider/trackbar.
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.InitializeTrackBar(System.Windows.Forms.TrackBar)">
            <summary>
            Invoked when the trackbar is created so that minimum and maximum values can be initialized.
            </summary>
            <param name="trackBar">TrackBar control to be displayed</param>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.OnEditCancelled(System.Object,System.EventArgs)">
            <summary>
            Invoked when the edit has been cancelled
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.OnValueChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the value changes
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditor.OnPaintPreview(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Invoked when the preview needs to be updated
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="P:Infragistics.Win.Design.TrackBarEditor.CurrentValue">
            <summary>
            Returns the current edited value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.TrackBarEditor.Context">
            <summary>
            Returns the context specified during the editing of the value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.TrackBarEditor.ServiceProvider">
            <summary>
            Returns the service provider specified in the editing of the value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Design.TrackBarEditor.PaintPreviewSupported">
            <summary>
            Used to indicate if a preview window should be displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.Design.TrackBarEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.TrackBarEditorControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Invoked when a dialog key such as Escape or Enter are pressed.
            </summary>
            <param name="keyData">Key</param>
            <returns>True if the key is processed</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinDock.DockingAreaManager">
            <summary>
            The DockingAreaManager class exposes static methods for registering and unregistering windows with multiple docking areas.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinDock.IDockingArea"/>
            <seealso cref="M:Infragistics.Win.UltraWinDock.DockingAreaManager.RegisterDockingAreaParent(System.Windows.Forms.Control)"/>
            <seealso cref="M:Infragistics.Win.UltraWinDock.DockingAreaManager.UnregisterDockingAreaParent(System.Windows.Forms.Control)"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_DOCKED_WINDOW">
            <summary>
            Docked windows are inside both toolbars and unpinned dockings areas. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_UNPINNED_TAB_AREA_HORIZONTAL">
            <summary>
            The unpinned tab areas used by dockable windows are inside the toolbar docking areas. The vertical unpinned tab areas are placed outside the horizontal ones.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_UNPINNED_TAB_AREA_VERTICAL">
            <summary>
            The unpinned tab areas used by dockable windows are inside the toolbar docking areas. The vertical unpinned tab areas are placed outside the horizontal ones.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_TOOLBAR_VERTICAL">
            <summary>
            The toolbar docking areas are inside the status bar but outside the unpinned tab areas used by dockable windows. The horizontal toolbar docking areas are placed outside the vertical ones.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_TOOLBAR_HORIZONTAL">
            <summary>
            The toolbar docking areas are inside the status bar but outside the unpinned tab areas used by dockable windows. The horizontal toolbar docking areas are placed outside the vertical ones.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_STATUSBAR">
            <summary>
            Since the status bar is normally docked to the bottom of the window it has the highest priority and is therefore placed outside all other docking areas. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinDock.DockingAreaManager.RegisterDockingAreaParent(System.Windows.Forms.Control)">
            <summary>
            Registers a parent control to ensure that the position of docked child controls takes into account the <see cref="P:Infragistics.Win.UltraWinDock.IDockingArea.PriorityLevel"/> of the docking areas.&gt;
            </summary>
            <param name="dockingAreaParent">The control or form whose child docking areas positions are to be maintained.</param>
            <remarks>
            <p>Controls that are docked and implement the <see cref="T:Infragistics.Win.UltraWinDock.IDockingArea"/> interface will positioned so that the ones with the highest <see cref="P:Infragistics.Win.UltraWinDock.IDockingArea.PriorityLevel"/> will be placed outsied ones with lower priorties.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UltraWinDock.IDockingArea"/>
            <seealso cref="M:Infragistics.Win.UltraWinDock.DockingAreaManager.UnregisterDockingAreaParent(System.Windows.Forms.Control)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinDock.DockingAreaManager.UnregisterDockingAreaParent(System.Windows.Forms.Control)">
            <summary>
            Unregisters the parent control.
            </summary>
            <param name="dockingAreaParent">The control or form to unregister.</param>
            <remarks>
            <p>Register calls need to be matched with unregister calls.</p>
            <p>Each call to <see cref="M:Infragistics.Win.UltraWinDock.DockingAreaManager.RegisterDockingAreaParent(System.Windows.Forms.Control)"/> adds to a 'register' count and each call to <b>UnregisterDockingAreaParent</b> decrements it.</p>
            <p>The parent control is monitored until the 'register' count goes to 0 or the control is disposed.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.UltraWinDock.DockingAreaManager.RegisterDockingAreaParent(System.Windows.Forms.Control)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinDock.DockingAreaManager.GetPriorityLevel(System.Windows.Forms.Control)">
            <summary>
            Returns the docking priority level assigned to the specified control.
            </summary>
            <param name="control">Control whose priority level should be checked.</param>
            <returns>If the control implements the IDockingArea interface, the <see cref="P:Infragistics.Win.UltraWinDock.IDockingArea.PriorityLevel"/>
            is returned. If the control is a <see cref="T:System.Windows.Forms.StatusBar"/> or 
            <see cref="T:System.Windows.Forms.ToolBar"/> control, the corresponding priority
            level will be returned. For all other controls, 0 is returned to indicate that it
            has no docking priority specified.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinDock.DockingAreaManager.ControlDockingManager.#ctor(System.Windows.Forms.Control)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinDock.IDockingArea">
            <summary>
            Implemented by a control that needs to expose the priority the <see cref="T:Infragistics.Win.UltraWinDock.DockingAreaManager"/> should use when adjusting the z-order of its doced sibling controls.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinDock.IDockingArea.PriorityLevel">
            <summary>
            The priority used to control which areas are docked outside of other areas.
            </summary>
            <remarks>
            <p>The higher the priority the farther outside the docking area is placed.</p>
            <p>Any control that implements <b>IDockingArea</b> and returns a PriorityLevel &gt; 0 will be placed outside of all docked controls that don't implement <b>IDockingArea</b>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_DOCKED_WINDOW"/>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_UNPINNED_TAB_AREA_VERTICAL"/>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_UNPINNED_TAB_AREA_HORIZONTAL"/>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_TOOLBAR_VERTICAL"/>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_TOOLBAR_HORIZONTAL"/>
            <seealso cref="F:Infragistics.Win.UltraWinDock.DockingAreaManager.PRIORITY_LEVEL_STATUSBAR"/>
            <seealso cref="T:Infragistics.Win.UltraWinDock.DockingAreaManager"/>
        </member>
        <member name="T:Infragistics.Win.UltraWinDock.IDockableControl">
            <summary>
            Implemented by a control that does not support being docked by an <b>UltraDockManager</b>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinDock.IDockableControl.AllowDocking">
            <summary>
            Indicates if the control should be allowed to be docked by an <b>UltraDockManager</b>
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropIndicatorControl">
            <summary>
            Control used to display a drop point indication.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.ILayoutItem">
            <summary>
            Interface for implementing layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.ILayoutItem.PreferredSize">
            <summary>
            Gets the preferred size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.ILayoutItem.MinimumSize">
            <summary>
            Gets the minimum size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.ILayoutItem.IsVisible">
            <summary>
            Indicates whether the item is visible or not. Items that are not visible are ignored.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropIndicatorControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DropIndicatorControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropIndicatorControl.UpdateRegion">
            <summary>
            Invoked when the region for the control should be created.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropIndicatorControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.DropIndicatorControl.OnCreateControl">
            <summary>
            Called when the control is first created
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropIndicatorControl.GetDropIndicatorLocation(System.Drawing.Rectangle,Infragistics.Win.IndicatorAlignment)">
            <summary>
            Returns the location that the indicators should be positioned at based on the specified item rect.
            </summary>
            <param name="itemBounds">Location and size of the item</param>
            <param name="alignment">Alignment of the indicator</param>
            <returns>The location where the control should be positioned.</returns>
        </member>
        <member name="P:Infragistics.Win.DropIndicatorControl.ItemSize">
            <summary>
            Indicates the size of the item that where the indicator will be displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropIndicatorControl.Orientation">
            <summary>
            Indicates the orientation of the indicator arrows
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropIndicatorControl.Brush">
            <summary>
            Returns or sets the current brush.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropIndicatorControl.DropIndicatorArrowSize">
            <summary>
            Determines the size of drop indicator arrows 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropIndicatorControl.DropIndicatorShape">
            <summary>
            Determines the shape of the drop indicator. Arrows or a rectangle 
            </summary>
        </member>
        <member name="T:Infragistics.Win.DragIndicatorControl">
            <summary>
            Control used to display an element that is being dragged
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragIndicatorControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DragIndicatorControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragIndicatorControl.Initialize(Infragistics.Win.UIElement)">
            <summary>
            Initializes the image that will be rendered by the drag indicator
            </summary>
            <param name="element">UIElement used to create the display</param>
        </member>
        <member name="M:Infragistics.Win.DragIndicatorControl.Initialize(Infragistics.Win.UIElement[])">
            <summary>
            Initializes the image that will be rendered by the drag indicator
            </summary>
            <param name="elements">An array of UIElements used to create the display</param>
        </member>
        <member name="M:Infragistics.Win.DragIndicatorControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.DragIndicatorControl.Dispose(System.Boolean)">
            <summary>
            Dispose any resources used by the control
            </summary>
        </member>
        <member name="T:Infragistics.Win.IndicatorAlignment">
            <summary>
            Enumeration of arrow alignments
            </summary>
        </member>
        <member name="F:Infragistics.Win.IndicatorAlignment.Near">
            <summary>
            Near
            </summary>
        </member>
        <member name="F:Infragistics.Win.IndicatorAlignment.Far">
            <summary>
            Far
            </summary>
        </member>
        <member name="F:Infragistics.Win.IndicatorAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="T:Infragistics.Win.DragDropIndicatorManager">
            <summary>
            Class for managing the display of drag drop indicators
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.#ctor(System.Windows.Forms.Orientation,System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DragDropIndicatorManager"/> for use only as a DropIndicator. The DragIndicator will not work using this constructor.
            </summary>
            <param name="indicatorOrientation">Orientation of the drop indicators</param>
            <param name="dropSource">Root control that the drag operation will be over</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.#ctor(System.Drawing.Point,Infragistics.Win.UIElement,System.Windows.Forms.Orientation,System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DragDropIndicatorManager"/>
            </summary>
            <param name="offset">Amount that the drag indicator should be offset from the mouse location when displayed</param>
            <param name="element">Element that should be rendered in the drag indicator</param>
            <param name="indicatorOrientation">Orientation of the drop indicators</param>
            <param name="dropSource">Root control that the drag operation will be over</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.#ctor(System.Drawing.Point,Infragistics.Win.UIElement[],System.Windows.Forms.Orientation,System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.DragDropIndicatorManager"/>
            </summary>
            <param name="offset">Amount that the drag indicator should be offset from the mouse location when displayed</param>
            <param name="elements">An array of Elements that should be rendered in the drag indicator</param>
            <param name="indicatorOrientation">Orientation of the drop indicators</param>
            <param name="dropSource">Root control that the drag operation will be over</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.CreateDropIndicatorControl">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.DropIndicatorControl"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.CreateDragIndicatorControl">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.DragIndicatorControl"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.HideDragIndicator">
            <summary>
            Hides the drag indicator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.HideDropIndicator">
            <summary>
            Hides the drop indicator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.InitializeDragIndicator(Infragistics.Win.UIElement)">
            <summary>
            Initializes the <see cref="T:Infragistics.Win.DragIndicatorControl"/> with the specified element
            </summary>
            <param name="element">Element that should be rendered in the drag indicator</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.InitializeDragIndicator(Infragistics.Win.UIElement[])">
            <summary>
            Initializes the <see cref="T:Infragistics.Win.DragIndicatorControl"/> with the specified element
            </summary>
            <param name="elements">An array of Elements that should be rendered in the drag indicator</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.InitializeDropIndicator(System.Drawing.Brush)">
            <summary>
            Initializes the <see cref="T:Infragistics.Win.DropIndicatorControl"/> with the specified brush
            </summary>
            <param name="brush">Brush that should be used to render the indicator arrows</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.OnDispose">
            <summary>
            Invoked when the object is disposed and should released any resources used by the class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.ShowDragIndicator">
            <summary>
            Positions and displays the drag indicator based on the specified screen location
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.ShowDragIndicator(System.Drawing.Point)">
            <summary>
            Positions and displays the drag indicator based on the specified screen location
            </summary>
            <param name="mouseLocation">Location of the mouse in screen coordinates</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.ShowDropIndicator(System.Drawing.Rectangle,Infragistics.Win.IndicatorAlignment)">
            <summary>
            Positions and displays the drop indicator based on the specified drop rect in screen coordinates
            </summary>
            <param name="dropRect">Drop rect in screen coordinates</param>
            <param name="alignment">Alignment of the indicator with respect to the drop rect</param>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.ShowDropIndicator(System.Drawing.Rectangle,Infragistics.Win.IndicatorAlignment,System.Windows.Forms.Orientation)">
            <summary>
            Positions and displays the drop indicator based on the specified drop rect in screen coordinates
            </summary>
            <param name="dropRect">Drop rect in screen coordinates</param>
            <param name="alignment">Alignment of the indicator with respect to the drop rect</param>
            <param name="orientation">Orientation of the drop indicator</param>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DragIndicatorOffset">
            <summary>
            Amount that the drag indicator should be offset from the mouse location when displayed 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropIndicatorOrientation">
            <summary>
            Orientation of the drop indicator
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropSource">
            <summary>
            Root control that the drag operation will be over
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropIndicatorArrowSize">
            <summary>
            Determines the size of drop indicator arrows 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropIndicatorShape">
            <summary>
            Determines the size of drop indicator arrows 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DragIndicator">
            <summary>
            Returns the managed <see cref="T:Infragistics.Win.DragIndicatorControl"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropIndicator">
            <summary>
            Returns the managed <see cref="T:Infragistics.Win.DropIndicatorControl"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.IsDragIndicatorVisible">
            <summary>
            Indicates if the drag indicator is currently visible
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.IsDropIndicatorVisible">
            <summary>
            Indicates if the drop indicator is currently visible
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DragIndicatorRectangle">
            <summary>
            Returns the current location of the indicator in screen coordinates
            </summary>
        </member>
        <member name="P:Infragistics.Win.DragDropIndicatorManager.DropIndicatorRectangle">
            <summary>
            Returns the current location of the indicator in screen coordinates
            </summary>
        </member>
        <member name="T:Infragistics.Win.DragDropIndicatorManager.ArrowSize">
            <summary>
            Used to determine the size of Drop Indicator arrows when dragging and dropping column in an UltraWinGrid using RowLayouts.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DragDropIndicatorManager.ArrowSize.Small">
            <summary>
            Use small arrows
            </summary>
        </member>
        <member name="F:Infragistics.Win.DragDropIndicatorManager.ArrowSize.Large">
            <summary>
            Use large arrows
            </summary>
        </member>
        <member name="T:Infragistics.Win.DragDropIndicatorManager.IndicatorShape">
            <summary>
            Determines the shape of the Drop Indicator
            </summary>
        </member>
        <member name="F:Infragistics.Win.DragDropIndicatorManager.IndicatorShape.Arrows">
            <summary>
            Dislpay arrows
            </summary>
        </member>
        <member name="F:Infragistics.Win.DragDropIndicatorManager.IndicatorShape.Rectangle">
            <summary>
            Display a Rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Win.DragDropIndicatorManager.IndicatorForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overriden. Receives message notifications for the tooltip form.
            </summary>
            <param name="m">By reference message</param>
        </member>
        <member name="T:Infragistics.Win.DrawCache">
            <summary>
            The DrawCache class is used during a drawing operation to cache pens and brushes. It also provides alpha blending staging and consolidation.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="M:Infragistics.Win.DrawCache.#ctor(System.Drawing.Graphics,Infragistics.Win.UIElement,System.Boolean,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of the <b>DrawCache</b> class.
            </summary>
            <param name="graphics">The graphics object to render on</param>
            <param name="element">The element to be drawn</param>
            <param name="isAlphaBlendingSupported">True to support alphablending (ignored if print is true)</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
        </member>
        <member name="M:Infragistics.Win.DrawCache.#ctor(System.Drawing.Graphics,Infragistics.Win.UIElement,Infragistics.Win.AlphaBlendMode,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of the <b>DrawCache</b> class.
            </summary>
            <param name="graphics">The graphics object to render on</param>
            <param name="element">The element to be drawn</param>
            <param name="alphaBlendMode">The mode of alpha blending used (ignored if print is true)</param>
            <param name="doubleBuffer">True means a memory graphics object will always be created to cache drawing untilthe end.</param>
        </member>
        <member name="M:Infragistics.Win.DrawCache.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawCache.Dispose">
            <summary>
            Cleans up (disposes) the cached resources 
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawCache.DrawArrowIndicator(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Size,System.Windows.Forms.ScrollButton,System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="g">Graphics object used to render the arrow.</param>
            <param name="rect">Rect in which the arrow will be centered.</param>
            <param name="maxArrowSize">Maximum size for the arrow to be rendered.</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="offsetSize">Size indicating how much to offset the arrow.</param>
            <param name="edgeColor">Color used to render the outline for the arrow.</param>
            <param name="fillColor">Color used to fill the arrow.</param>
            <param name="minMax">Boolean indicating if a line at the head of the arrow should be rendered (i.e. for indicating first/last or min/max).</param>
        </member>
        <member name="M:Infragistics.Win.DrawCache.DrawXPStyleArrowIndicator(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Draws a Windows XP-style arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="g">Graphics object used to render the arrow.</param>
            <param name="rect">Rect in which the arrow will be centered.</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="offset">The amount by which to offset the placement of the arrow indicator.</param>
            <param name="color">Color used to draw the arrow.</param>
            <remarks>
            <p class="note"><b>Note</b>: The values <b>Min</b> and <b>Max</b> are not supported for the 'direction' parameter.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DrawCache.GetButtonImageOffset(Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType)">
            <summary>
            Determines how much the image should be offset based on the button type, state and style.
            </summary>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <returns>The amount the image should be offset.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawCache.GetButtonImageOffset(Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Boolean)">
            <summary>
            Determines how much the image should be offset based on the button type, state and style.
            </summary>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <param name="maxOffset">Indicates if the maximum offset for the button style should be returned.</param>
            <returns>The amount the image should be offset.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawCache.GetButtonTextOffset(Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType)">
            <summary>
            Determines how much the text should be offset based on the button type, state and style.
            </summary>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <returns>The amount the text should be offset.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawCache.GetButtonTextOffset(Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Boolean)">
            <summary>
            Determines how much the text should be offset based on the button type, state and style.
            </summary>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <param name="maxOffset">Indicates if the maximum offset for the button style should be returned.</param>
            <returns>The amount the text should be offset.</returns>
        </member>
        <member name="T:Infragistics.Win.DrawCache.PenType">
            <summary>
            An enumerator specifying the pen type
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Solid">
            <summary>
            A 1 pixel wide solid pen
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Dashed">
            <summary>
            A dashed line pen
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Dotted">
            <summary>
            A dotted line pen
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Light">
            <summary>
            A pen in a hilighted color (based on the original requetsed color)
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.LightLight">
            <summary>
            A pen in a very hilighted color (based on the original requetsed color)
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Dark">
            <summary>
            A pen in a dark color (based on the original requetsed color)
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.DarkDark">
            <summary>
            A pen in a very dark color (based on the original requetsed color)
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.Control">
            <summary>
            A pen in the 3D face color
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.ControlLight">
            <summary>
            A pen in the 3D hilite color
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.ControlLightLight">
            <summary>
            A pen in the 3D very hilite color
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.ControlDark">
            <summary>
            A pen in the 3D shadow color
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawCache.PenType.ControlDarkDark">
            <summary>
            A pen in the 3D very shadow color
            </summary>
        </member>
        <member name="T:Infragistics.Win.DrawUtility">
            <summary>
            Contains some static utility drawing methods
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching">
            <summary>
            Called at the start of operations that may require multiple calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> to do metrics calculations.
            </summary>
            <remarks>
            <p>Each call to this method must be eventually paired with a call to <see cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.EndGraphicsCaching">
            <summary>
            Called at the end of operations that may require multiple calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> to do metrics calculations.
            </summary>
            <remarks>
            <p>Each call to this method must be paired with a prior call to <see cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)">
            <summary>
            Called to get a graphics object suitable for doing metrics calculations only.
            </summary>
            <returns>A graphics object suitable for doing metrics calculations only. This graphics object shouldn't be rendered on.</returns>
            <param name="control">The control to base the graphics on.</param>
            <remarks>
            <p>Do NOT call the <b>Dispose</b> method on the graphics object returned from this method.</p>
            <p>Instead, each call to this method should be paired with a call to <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)">
            <summary>
            Called to release a graphics object that was returned from a prior call to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="g">The graphics object to release.</param>
            <remarks>
            <p>Do NOT call the <b>Dispose</b> method on the graphics object returned from <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>. Use this method instead.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.ScrollControl(System.Windows.Forms.Control,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Boolean,System.Boolean,System.Boolean,System.Int16)">
            <summary>
            Will call ther native windows ScvrollWindowEx api if the caller
            has securoty permissions to call unmanaged code. If not this
            method will just invalidate the control.  
            </summary>
            <param name="control">The control to scroll.</param>
            <param name="xAmount">The amount to scroll left to right.</param>
            <param name="yAmount">The amount to scroll up and down.</param>
            <param name="scrollRect">The portion of the client area to be scrolled</param>
            <param name="clipRect">Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.</param>
            <param name="updateRect">Receives the boundaries of the rectangle invalidated by scrolling.</param>
            <param name="eraseBackground">Erases the newly invalidated region by sending a WM_ERASEBKGND message to the window when specified with the invalidate flag is true.</param>
            <param name="invalidate">Invalidates the exposed region after scrolling.</param>
            <param name="scrollChildren">Scrolls all child windows that intersect the scrollRect parameter. The child windows are scrolled by the number of pixels specified by the xAmount and yAmount parameters. The system sends a WM_MOVE message to all child windows that intersect scrollRect, even if they do not move.</param>
            <param name="smoothScrollAmount">If greatern than 0 scrolls using smooth scrolling. The amount is in milliseconds.</param>
            <returns>If the function succeeds, the return value is 2 for SIMPLEREGION (rectangular invalidated region), 3 for COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles), or 1 for NULLREGION (no invalidated region). If the function fails, the return value is 0.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CreateReferenceGraphics(System.Windows.Forms.Control)">
            <summary>
            Obsolete. Use <see cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/> and <see cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/> instead.
            </summary>
            <param name="control">Control to base graphics on.</param>
            <returns>A graphics object</returns>
            <remarks>It is the callers responsibility to dispose of this object when done.</remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateBorderWidths(Infragistics.Win.UIElementBorderStyle)">
            <summary>
            Static method that calculates the widths of all 4 borders.
            </summary>
            <param name="style">The style of the borders</param>
            <returns>A UIElementBorderWidth structure which contains the width of each border.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Static method that calculates the widths of all 4 borders.
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Flags indicating which sides the borders will be drawn on.</param>
            <returns>A UIElementBorderWidth structure which contains the width of each border.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,Infragistics.Win.UIElement)">
            <summary>
            Static method that calculates the widths of all 4 borders.
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Flags indicating which sides the borders will be drawn on.</param>
            <param name="element">The element with the borders.</param>
            <returns>A UIElementBorderWidth structure which contains the width of each border.</returns>
            <remarks>The element parameter is used because solid borders are substituted for 3D borders during a printing operation and the element's ControlElement's IsPrint property can be checked.</remarks>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateButtonBorderWidths(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState)">
            <summary>
             Static method that calculates the widths of all 4 button borders
            </summary>
            <param name="buttonStyle">The button style of the element</param>
            <param name="buttonState">The button state of the element.</param>
            <returns>A UIElementBorderWidths structure which contains the width of each border.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateButtonBorderWidths(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState,System.Windows.Forms.Border3DSide,Infragistics.Win.UIElement,System.Boolean)">
            <summary>
            Static method that calculates the widths of all 4 button borders.
            </summary>
            <param name="buttonStyle">The button style of the element.</param>
            <param name="buttonState">The button state of the element.</param>
            <param name="sides">Flags indicating which sides the borders will be drawn on.</param>
            <param name="element">The element with the borders.</param>
            <param name="smallestInsideRect">A boolean indicating if the smallest area for the specified button style that is always available is returned.</param>
            <returns>A UIElementBorderWidth structure which contains the width of each border.</returns>
            <remarks>The element parameter is used because solid borders are substituted for 3D borders during a printing operation and the element's ControlElement's IsPrint property can be checked.</remarks>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CalculateSmallestButtonClientRect(Infragistics.Win.UIElementButtonStyle,System.Drawing.Rectangle,Infragistics.Win.UIElement)">
            <summary>
            Calculates the area inside the button borders that is available regardless of the button state.
            </summary>
            <param name="buttonStyle">UIElementButtonStyle</param>
            <param name="rect">Rectangle to adjust based on the border widths</param>
            <param name="element">Element</param>
            <returns>A rectangle which includes the client area always available based on the rect and button style specified.</returns>
            <remarks>Some button style has different thickness borders depending on the state however, it is often necessary
            to know what the rect will be regardless of the state - especially when offsetting images and text.</remarks>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustBorderStyle(Infragistics.Win.UIElementBorderStyle,Infragistics.Win.UIElement)">
            <summary>
            Returns the border style based on the state (i.e. IsPrint, FlatMode, etc.) of the element.
            </summary>
            <param name="borderStyle">BorderStyle</param>
            <param name="element">UIElement from the control</param>
            <returns>A UIElementBorderStyle based on the state of the element.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustBorderStyle(Infragistics.Win.UIElementBorderStyle,System.Boolean)">
            <summary>
            Returns the border style based on the state (i.e. IsPrint, FlatMode, etc.) of the element.
            </summary>
            <param name="borderStyle">BorderStyle</param>
            <param name="flat">Boolean indicating if the borderstyle should be mapped to flat (e.g. if FlatMode is true or the element is being printed).</param>
            <returns>A UIElementBorderStyle based on the state of the element.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustedButtonStyle(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElement)">
            <summary>
            Returns the button style based on the state (i.e. IsPrint, FlatMode, etc. ) of the element.
            </summary>
            <param name="buttonStyle">ButtonStyle</param>
            <param name="element">UIElement from the control.</param>
            <returns>A UIElementButtonStyle based on the state of the element.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustedButtonStyle(Infragistics.Win.UIElementButtonStyle,System.Boolean)">
            <summary>
            Returns the button style based on the state (i.e. IsPrint, FlatMode, etc. ) of the element.
            </summary>
            <param name="buttonStyle">ButtonStyle</param>
            <param name="flat">Boolean indicating if the borderstyle should be mapped to flat (e.g. if FlatMode is true or the element is being printed).</param>
            <returns>A UIElementButtonStyle based on the state of the element.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustHAlign(Infragistics.Win.HAlign,System.Drawing.Rectangle@,System.Drawing.Rectangle)">
            <summary>
            Adjusts one rect relative to another horizontally.
            </summary>
            <param name="hAlign">The alignment enumeration value to use</param>
            <param name="innerRect">The rectangle to adjust</param>
            <param name="outerRect">The reference rectangle</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.AdjustVAlign(Infragistics.Win.VAlign,System.Drawing.Rectangle@,System.Drawing.Rectangle)">
            <summary>
            Adjusts one rect relative to another horizontally.
            </summary>
            <param name="vAlign">The alignment enumeration value to use</param>
            <param name="innerRect">The rectangle to adjust</param>
            <param name="outerRect">The reference rectangle</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            "Obsolete method. Use overload that takes a Control as its 1st parameter. This is required to support the new GradientAlignment property on Appearance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Windows.Forms.Control,System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Helper method that draws the backcolor based on the setting in the appearance data structure.
            </summary>
            <param name="control">The control (required for GradiantAlignment support).</param>
            <param name="graphics">The graphics object to render on.</param>
            <param name="appearanceData">Contains backcolor and gradient settings.</param>
            <param name="rect">The overall rect the area that's going to contain the gradient..</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">False will used the BackColorDisabled.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode)">
            <summary>
            "Obsolete method. Use overload that takes a Control as its 1st parameter. This is required to support the new GradientAlignment property on Appearance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Windows.Forms.Control,System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode)">
            <summary>
            Helper method that draws the backcolor based on the setting in the appearance data structure.
            </summary>
            <param name="control">The control (required for GradiantAlignment support).</param>
            <param name="graphics">The graphics object to render on.</param>
            <param name="appearanceData">Contains backcolor and gradient settings.</param>
            <param name="rect">The overall rect the area that's going to contain the gradient..</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">False will used the BackColorDisabled.</param>
            <param name="alphaBlendMode">Determines whether alphablending is enabled</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Windows.Forms.Control,System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode,Infragistics.Win.ColorRenderMode)">
            <summary>
            Helper method that draws the backcolor based on the setting in the appearance data structure.
            </summary>
            <param name="control">The control (required for GradiantAlignment support).</param>
            <param name="graphics">The graphics object to render on.</param>
            <param name="appearanceData">Contains backcolor and gradient settings.</param>
            <param name="rect">The overall rect the area that's going to contain the gradient..</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">False will used the BackColorDisabled.</param>
            <param name="alphaBlendMode">Determines whether alphablending is enabled</param>
            <param name="colorRenderMode">Determines how colors are rendered</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBackColor(System.Windows.Forms.Control,System.Drawing.Graphics,Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,Infragistics.Win.AlphaBlendMode,Infragistics.Win.ColorRenderMode,System.Drawing.Drawing2D.Blend)">
            <summary>
            Helper method that draws the backcolor based on the setting in the appearance data structure.
            </summary>
            <param name="control">The control (required for GradiantAlignment support).</param>
            <param name="graphics">The graphics object to render on.</param>
            <param name="appearanceData">Contains backcolor and gradient settings.</param>
            <param name="rect">The overall rect the area that's going to contain the gradient..</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">False will used the BackColorDisabled.</param>
            <param name="alphaBlendMode">Determines whether alphablending is enabled</param>
            <param name="colorRenderMode">Determines how colors are rendered</param>
            <param name="blend">Defines a blend pattern for a LinearGradientBrush</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.VerticalTranslateAlignment(Infragistics.Win.HAlign@,Infragistics.Win.VAlign@)">
            <summary>
            Converts the horizontal and vertical alignments to the appropriate corresponding alignments to support vertical elements.
            </summary>
            <param name="halign">Horizontal alignment to convert</param>
            <param name="valign">Vertical alignment to convert</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.VerticalTranslateAlignment(Infragistics.Win.HAlign@,Infragistics.Win.VAlign@,System.Boolean)">
            <summary>
            Converts the horizontal and vertical alignments to the appropriate corresponding alignments to support vertical elements.
            </summary>
            <param name="halign">Horizontal alignment to convert</param>
            <param name="valign">Vertical alignment to convert</param>
            <param name="rotated">True if the text is rotated</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.VerticalTranslateTextPlacement(Infragistics.Win.TextPlacement@)">
            <summary>
            Converts the TextPlacement to the appropriate TextPlacement to support vertical elements.
            </summary>
            <param name="placement">TextPlacement to convert</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.VerticalTranslateTextPlacement(Infragistics.Win.TextPlacement@,System.Boolean)">
            <summary>
            Converts the TextPlacement to the appropriate TextPlacement to support vertical elements.
            </summary>
            <param name="placement">TextPlacement to convert</param>
            <param name="rotated">True if the text is rotated 180 degrees</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.GetAlphaBlendColor(System.Drawing.Color,System.Int16)">
            <summary>
            Returns a color with the alpha channel set based on the specified alpha level. If
            the color already has its alpha channel set, it will be adjusted based on the
            specified alpha level. e.g. If the color's A = 100 and the alphaLevel is 123,
            the new color's A will be approximately 50.
            </summary>
            <param name="color">Color to modify</param>
            <param name="alphaLevel">Alpha level by which the color should be adjusted</param>
            <returns>The specified color with its <see cref="P:System.Drawing.Color.A"/> modified.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImageBackground(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Drawing.Rectangle,Infragistics.Win.UIElement,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="appearanceData">AppearanceData containing the ImageBackground properties</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="element">Element used to determine the location of the rendered image</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImageBackground(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Drawing.Rectangle,System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="appearanceData">AppearanceData containing the ImageBackground properties</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="control">Control used to determine the origin of the image background</param>
            <param name="relativeRect">Rectangle where the image will be rendered. e.g. Element.RectInsideBorders</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImageBackground(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Drawing.Rectangle,System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,Infragistics.Win.ColorRenderMode)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="appearanceData">AppearanceData containing the ImageBackground properties</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="control">Control used to determine the origin of the image background</param>
            <param name="relativeRect">Rectangle where the image will be rendered. e.g. Element.RectInsideBorders</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="colorRenderMode">Determines how the colors of the image are rendered.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="appearanceData">AppearanceData containing the Image information</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="appearanceData">AppearanceData struct containing information about the image rendering</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="appearanceData">AppearanceData struct containing information about the image rendering</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean,System.Boolean)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="appearanceData">AppearanceData struct containing information about the image rendering</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
            <param name="drawBorderShadow">True if a shadow should be drawn around the image</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean,System.Boolean,System.Drawing.Color,System.Byte,System.Byte,System.Byte)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="appearanceData">AppearanceData struct containing information about the image rendering</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
            <param name="drawBorderShadow">True if a shadow should be drawn around the image</param>
            <param name="shadowColor">The color of the shadow to be drawn around the image</param>
            <param name="startAlpha">The alpha level of the start of the shadow around the image</param>
            <param name="endAlpha">The alpha level of the end of the shadow around the image</param>
            <param name="shadowDepth">The depth, or width, of the shadow around an image</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean,System.Boolean,System.Drawing.Color,System.Byte,System.Byte,System.Byte,Infragistics.Win.ColorRenderMode)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="appearanceData">AppearanceData struct containing information about the image rendering</param>
            <param name="alphaMode">AlphaBlendMode indicating whether alpha blend is enabled and if so, how it is being rendered</param>
            <param name="scaled">True if the image should be scaled to the specified rect</param>
            <param name="renderRect">Rect into which the image should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
            <param name="drawBorderShadow">True if a shadow should be drawn around the image</param>
            <param name="shadowColor">The color of the shadow to be drawn around the image</param>
            <param name="startAlpha">The alpha level of the start of the shadow around the image</param>
            <param name="endAlpha">The alpha level of the end of the shadow around the image</param>
            <param name="shadowDepth">The depth, or width, of the shadow around an image</param>
            <param name="colorRenderMode">Determines how colors are rendered in the image.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Int16,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="alphaLevel">Actual alpha level to use when rendering the image. This value should be calculated using the <see cref="M:Infragistics.Win.DrawUtility.GetAlphaLevel(Infragistics.Win.AlphaBlendMode,Infragistics.Win.Alpha,System.Int16)"/> method.</param>
            <param name="destRect">Rect into which the image should be rendered</param>
            <param name="srcRect">Portion of the image that should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="tile">True to tile the image</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Int16,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean,Infragistics.Win.ColorRenderMode)">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the <see cref="T:Infragistics.Win.AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="alphaLevel">Actual alpha level to use when rendering the image. This value should be calculated using the <see cref="M:Infragistics.Win.DrawUtility.GetAlphaLevel(Infragistics.Win.AlphaBlendMode,Infragistics.Win.Alpha,System.Int16)"/> method.</param>
            <param name="destRect">Rect into which the image should be rendered</param>
            <param name="srcRect">Portion of the image that should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="tile">True to tile the image</param>
            <param name="colorRenderMode">Determines how colors in the image are rendered.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBorderShadow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Byte,System.Byte,System.Byte)">
            <summary>
            Draws a shadow around an image rectangle
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="invalidRect">The rect that this shadow should be restricted to</param>
            <param name="imgRect">The Rectangle wher the image will be drawn</param>
            <param name="shadowColor">The color of the shadow</param>
            <param name="startAlpha">The starting alpha</param>
            <param name="endAlpha">The ending alpha</param>
            <param name="shadowDepth">The depth of the shadow</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CreateDisabledImage(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Creates a disabled copy of the specified image
            </summary>
            <param name="original">Original image</param>
            <param name="backColor">Backcolor used to fill the background of the image</param>
            <returns>A copy of the specified image rendered as disabled</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CreateDisabledImage(System.Drawing.Image,System.Drawing.Color,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Creates a disabled copy of the specified image
            </summary>
            <param name="original">Original image</param>
            <param name="backColor">Backcolor used to fill the background of the image</param>
            <param name="imgAttributes">Image Attributes used to copy the image.</param>
            <returns>A copy of the specified image rendered as disabled</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CopyImage(System.Drawing.Image,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Creates a copy of the specified image using the specified Image attributes
            </summary>
            <param name="original">Image to copy</param>
            <param name="imgAttributes">Image attributes to use when copying the image</param>
            <returns>A copy of the original image</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CopyImage(System.Drawing.Image,System.Drawing.Imaging.ImageAttributes,System.Drawing.Size)">
            <summary>
            Creates a copy of the specified image using the specified Image attributes
            </summary>
            <param name="original">Image to copy</param>
            <param name="imgAttributes">Image attributes to use when copying the image</param>
            <param name="destinationSize">Size of the image copy.</param>
            <returns>A copy of the original image</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CreateShadowImage(System.Drawing.Image,System.Drawing.Color,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Creates an image 2 pixels wider and taller than the original that contains the original image above a shadowed copy of the image
            </summary>
            <param name="original">Image to shadow</param>
            <param name="backColor">Backcolor used when rendering the shadow</param>
            <param name="imgAttributes">ImageAttributes or null</param>
            <returns>An image with a shadow of the original down and to the right of the original</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.CreateScaledImage(System.Drawing.Image,System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Creates a new image using a scaled portion of the original image.
            </summary>
            <param name="original">Original image containing the image area to scale</param>
            <param name="destinationSize">Size of the new bitmap</param>
            <param name="srcRect">Portion of the original image to scale</param>
            <returns>A new bitmap or null if there was no portion of the original to scale</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.GetAlphaLevel(Infragistics.Win.AlphaBlendMode,Infragistics.Win.Alpha,System.Int16)">
            <summary>
            Returns the alpha level to use when rendering based upon the current alpha blend mode, alpha setting and alpha level.
            </summary>
            <param name="mode">Current alpha blend mode</param>
            <param name="alpha">Alpha setting to evaluate</param>
            <param name="alphaLevel">Resolved alpha level</param>
            <returns>The adjusted alpha level based on the AlphaBlendMode, Alpha setting and resolved alpha level.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DarkDark(System.Drawing.Color)">
            <summary>
            Creates a new dark color from the specified base color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to darken</param>
            <returns>A darkened <see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.Dark(System.Drawing.Color)">
            <summary>
            Creates a new dark color from the specified base color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to darken</param>
            <returns>A darkened <see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.LightLight(System.Drawing.Color)">
            <summary>
            Creates a new light color from the specified base color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to lighten</param>
            <returns>A lightened <see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.Light(System.Drawing.Color)">
            <summary>
            Creates a new light color from the specified base color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to lighten</param>
            <returns>A lightened <see cref="T:System.Drawing.Color"/></returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.GetRoundedRectPath(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for a rectangle with rounded corners
            </summary>
            <param name="rect">Rectangle whose corners should be rounded</param>
            <param name="radius">Radius of the corner arcs</param>
            <returns>A <b>GraphicsPath</b> for the rounded rectangle</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.GetRoundedRectPath(System.Drawing.Rectangle,System.Int32,Infragistics.Win.Corners)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for a rectangle with the specified rounded corners
            </summary>
            <param name="rect">Rectangle whose corners should be rounded</param>
            <param name="radius">Radius of the corner arcs</param>
            <param name="corners">Enumeration indicating which corners should be rounded</param>
            <returns>A <b>GraphicsPath</b> for the rounded rectangle</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawBorders(System.Drawing.Graphics,Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,Infragistics.Win.AppearanceData@,Infragistics.Win.AlphaBlendMode,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.ColorRenderMode)">
            <summary>
            Renders the specified borderstyle into the graphics object.
            </summary>
            <param name="graphics">Graphics object into which the borders will be rendered</param>
            <param name="borderStyle">BorderStyle to render</param>
            <param name="sides">Indicates which sides should be rendered</param>
            <param name="appearanceData">Appearance information used to determine the color of the borders</param>
            <param name="alphaMode">Determines the current alphablend setting</param>
            <param name="rect">The location where the rectangle should be rendered</param>
            <param name="invalidRect">The invalid area to render</param>
            <param name="colorRenderMode">Determines how colors are rendered</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.ConvertToGrayScale(System.Drawing.Color)">
            <summary>
            Converts the specified <b>Color</b> to a grayscale color.
            </summary>
            <param name="color">Color to convert</param>
            <returns>Returns a color representing the grayscale version of the specified color.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="width">The constaining width for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="width">The constaining width for the measurement</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.SizeF)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="layoutArea">The maximum layout area for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object from which the IDeviceContext will be obtained</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="origin">The point that represents the upper-left corner of the string.</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="layoutArea">The maximum layout area for the measurement</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="layoutArea">The maximum layout area for the measurement</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <param name="charactersFitted">[out] The number of characters that were fitted into the layoutArea</param>
            <param name="linesFilled">[out] The number of text lines that were filled into the layoutArea.</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the draw text.</param>
            <param name="x">The left corner of the drawn text.</param>
            <param name="y">The top corner of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the draw text.</param>
            <param name="point">The PointF that represents the upper-left corner of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the drawn text.</param>
            <param name="bounds">The RectangleF that specifies the location of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the draw text.</param>
            <param name="x">The left corner of the drawn text.</param>
            <param name="y">The top corner of the drawn text.</param>
            <param name="stringFormat">The StringFormat that specifies formatting attributes.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the draw text.</param>
            <param name="point">The PointF that represents the upper-left corner of the drawn text.</param>
            <param name="stringFormat">The StringFormat that specifies formatting attributes.</param>
        </member>
        <member name="M:Infragistics.Win.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="font">The Font that defines the text format of the string.</param>
            <param name="brush">The Brush that determines the color and texture of the draw text.</param>
            <param name="bounds">The RectangleF that specifies the location of the drawn text.</param>
            <param name="stringFormat">The StringFormat that specifies formatting attributes.</param>
        </member>
        <member name="T:Infragistics.Win.DropDownPosition">
            <summary>
            An enumerator for specifying position of the dropdown window with respect to the exclusion rect.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownPosition.BelowExclusionRect">
            <summary>
            Align below the exclusion rect.  Will automatically align above the exclusion rect if there is not enough space below. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownPosition.LeftOfExclusionRect">
            <summary>
            Align to the left of the exclusion rect.  Will automatically align to the right of the exclusion rect if there is not enough space on the left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownPosition.RightOfExclusionRect">
            <summary>
            Align to the Right of the exclusion rect.  Will automatically align to the left of the exclusion rect if there is not enough space on the right.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager">
            <summary>
            The DropDownManager class exposes static properties, methods and events for creating a dropdown window and closing it up when the user clicks outside of the owning control.
            </summary>
            <seealso cref="T:Infragistics.Win.DropDownManager.DropDownForm"/>
            <seealso cref="T:System.Windows.Forms.IMessageFilter"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.IsDroppedDown(System.Windows.Forms.Control)">
            <summary>
            Static method that returns whether the drop down is dropped down
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <returns>True if the drop down window is dropped down.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.GetDropDownScreenRect(System.Windows.Forms.Control)">
            <summary>
            Static method that returns the rect of the dropdown in screen coordinates.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <returns>The rect of the dropdown in screen coordinates, or an empty rect if a dropdown with the specified owner was not found.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.GetExclusionScreenRect(System.Windows.Forms.Control)">
            <summary>
            Static method that returns the rect of the exclusion area in screen coordinates.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <returns>The rect of the dropdown in screen coordinates, or an empty rect if a dropdown with the specified owner was not found.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.SetExclusionScreenRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Static method that sets the rect of the exclusion area in screen coordinates.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <param name="newExclusionRect">The new value for the exclusion rect in screen coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.GetOriginalRequestedScreenRect(System.Windows.Forms.Control)">
            <summary>
            Static method that returns the original requested rect of the dropdown in screen coordinates.
            This rect can differ from the dropdown rect if the window had to be repositioned by the manager due to screen size limitations.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <returns>The original requested rect of the dropdown in screen coordinates, or an empty rect if a dropdown with the specified owner was not found.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.ResetDropDownPositionAndSize(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Static method that resizes and repositions the dropdown based on the supplied screen rect.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will the dropdown state,. Otherwise it will return false.</param>
            <param name="newDropDownRect">The new rect of the dropdown in screen coordinates.  Pass Rectangle.Empty to keep the current dropdown rect.</param>
            <param name="newExclusionRect">The new exclusion rect of the dropdown in screen coordinates.  Pass Rectangle.Empty to keep the current exclusion rect.</param>
            <returns>The actual new rect of the dropdown in screen coordinates, or null if a dropdown with the specified owner was not found.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.CloseDropDown(System.Windows.Forms.Control)">
            <summary>
            Static method that closes the dropdown
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method. If it is the same or null it will close the dropdown.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.InternalCloseDropDown(System.Windows.Forms.Control)">
            <summary>
            Walks down the list closing each item until it finds the specified owner or
            the top of the list.
            </summary>
            <param name="owner">Owning control for which to close the dropdown.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDown(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Control,System.EventHandler,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Point,System.Boolean)">
            <summary>
            Static method that creates and displays a dropdown window
            </summary>
            <param name="owner">The control that owns the dropdown</param>
            <param name="dropdownControl">The control that will be placed on the dropdown form to take up its entire client area.</param>
            <param name="editControl">An optional edit control. Clicking on this edit window with the mouse will not cause the dropdown to closeup.</param>
            <param name="closeUpHandler">The method will be called after the dropdown closes up.</param>
            <param name="exclusionArea">This rect (in screen coordinates) will not be obscured by the dropdown.</param>
            <param name="dropDownSize">The requested size of the dropdown.</param>
            <param name="location">Where to try to place the dropdown (in screen coordinates) .</param>
            <param name="alignRight">If true wil attempt to place the dropdown's upper right corner at the location point.</param>
            <seealso cref="T:Infragistics.Win.DropDownManager.DropDownForm"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDown(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Control,System.EventHandler,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.DropDownPosition)">
            <summary>
            Static method that creates and displays a dropdown window
            </summary>
            <param name="owner">The control that owns the dropdown</param>
            <param name="dropdownControl">The control that will be placed on the dropdown form to take up its entire client area.</param>
            <param name="editControl">An optional edit control. Clicking on this edit window with the mouse will not cause the dropdown to closeup.</param>
            <param name="closeUpHandler">The method will be called after the dropdown closes up.</param>
            <param name="exclusionArea">This rect (in screen coordinates) will not be obscured by the dropdown.</param>
            <param name="dropDownSize">The requested size of the dropdown.</param>
            <param name="location">Where to try to place the dropdown (in screen coordinates) .</param>
            <param name="alignRight">If true wil attempt to place the dropdown's upper right corner at the location point.</param>
            <param name="clearExisting">If any currently dropped down windows should be closed.</param>
            <param name="autoCloseUp">If dropdown should be automatically closed when mouse is clicked outside of dropdown.</param>
            <param name="ignoreClicksInExclusionArea">If false then clicks inside the exclusion area should automatically close the dropdown.</param>
            <param name="dropDownPosition">Determines where to place the dropdown with respect to the exclusion rect.</param>
            <seealso cref="T:Infragistics.Win.DropDownManager.DropDownForm"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDown(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Windows.Forms.Control,System.EventHandler,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.DropDownPosition,System.Boolean)">
            <summary>
            Static method that creates and displays a dropdown window
            </summary>
            <param name="owner">The control that owns the dropdown</param>
            <param name="dropdownControl">The control that will be placed on the dropdown form to take up its entire client area.</param>
            <param name="editControl">An optional edit control. Clicking on this edit window with the mouse will not cause the dropdown to closeup.</param>
            <param name="closeUpHandler">The method will be called after the dropdown closes up.</param>
            <param name="exclusionArea">This rect (in screen coordinates) will not be obscured by the dropdown.</param>
            <param name="dropDownSize">The requested size of the dropdown.</param>
            <param name="location">Where to try to place the dropdown (in screen coordinates) .</param>
            <param name="alignRight">If true wil attempt to place the dropdown's upper right corner at the location point.</param>
            <param name="clearExisting">If any currently dropped down windows should be closed.</param>
            <param name="autoCloseUp">If dropdown should be automatically closed when mouse is clicked outside of dropdown.</param>
            <param name="ignoreClicksInExclusionArea">If false then clicks inside the exclusion area should automatically close the dropdown.</param>
            <param name="dropDownPosition">Determines where to place the dropdown with respect to the exclusion rect.</param>
            <param name="eatMouseMessageOnAutoCloseup">If true will eat the mouse message that caused the closeup.</param>
            <seealso cref="T:Infragistics.Win.DropDownManager.DropDownForm"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.HideDropDown(System.Windows.Forms.Control)">
            <summary>
            Static method that hides the dropdown.
            </summary>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.UnHideDropDown(System.Windows.Forms.Control)">
            <summary>
            Static method that unhides (shows) the dropdown.
            </summary>
            <remarks>
            It is not necessary to call this method after calling the DropDown static
            method.  The DropDown method will automatically show the window.  This
            method is meant to be called to show the dropdown after calling HideDropDown.
            </remarks>
            <param name="owner">Used to compare to the owner that was passed into
            the DropDown method.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.ResumeAutoCloseUp">
            <summary>
            Static method that resumes close up requests based on mouse clicks outside the dropdown areas.
            </summary>
            <returns>The location, in screen coordinates, of the last mouse click that would have triggered a closeup. This can be used to determine if the <see cref="M:Infragistics.Win.DropDownManager.CloseDropDown(System.Windows.Forms.Control)"/> method should be called.</returns>
            <remarks>
            <p>This is called for example when a combo is closed up on a popup menu.</p>
            <p>If the user had clicked on the combo list's scroll bar we wanted to postpone the menu close up until after the combo closes up. This is accomplished by calling <see cref="M:Infragistics.Win.DropDownManager.SuspendAutoCloseUp"/> when the combo dropped down its list.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DropDownManager.SuspendAutoCloseUp"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.SuspendAutoCloseUp">
            <summary>
            Static method that suspends close up requests based on mouse clicks outside the dropdown areas.
            </summary>
            <remarks>
            <p>This is used for example when a combo is dropped down on a popup menu.</p>
            <p>If the user clicks on the combo list's scroll bar we want to postpone the menu close up until after the combo closes up. This is accomplished by calling <see cref="M:Infragistics.Win.DropDownManager.ResumeAutoCloseUp"/></p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DropDownManager.ResumeAutoCloseUp"/>
        </member>
        <member name="E:Infragistics.Win.DropDownManager.CloseUp">
            <summary>
            fired after the list is closed up
            </summary>
        </member>
        <member name="E:Infragistics.Win.DropDownManager.ActivationChanged">
            <summary>
            Raised when a WM_ACTIVATEAPP or a WM_MDIACTIVATE message is received.
            </summary>
            <remarks>
            <p>Adding a listener here will cause a message hook to be added.</p>
            <p>Only one hook is created no matter how many event listeners there are. The hook is removed when there are no more listeners.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.AutoCloseUpSuspended">
            <summary>
            Returns true between calls to <see cref="M:Infragistics.Win.DropDownManager.SuspendAutoCloseUp"/> and <see cref="M:Infragistics.Win.DropDownManager.ResumeAutoCloseUp"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager.ActivationChangeType">
            <summary>
            The message that triggered the ActivationChange event
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownManager.ActivationChangeType.Activate">
            <summary>
            A WM_ACTIVATE message was received.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownManager.ActivationChangeType.ActivateApp">
            <summary>
            A WM_ACTIVATEAPP message was received.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownManager.ActivationChangeType.MDIActivate">
            <summary>
            A WM_MDIACTIVATE message was received.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager.ActivationChangedEventHandler">
            <summary>
            Event handler used ActivationChanged event
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager.ActivationChangedEventArgs">
            <summary>
            Event parameters used for the ActivationChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.ActivationChangedEventArgs.#ctor(System.Int32,Infragistics.Win.DropDownManager.ActivationChangeType,System.IntPtr,System.IntPtr)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.ActivationChangedEventArgs.HookCode">
            <summary>
            The code passed into the hook procedure. Refer to API documentation for <b>SetWindowsHookEx</b>..
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.ActivationChangedEventArgs.Type">
            <summary>
            Identified the message that triggered the ActivationChange event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.ActivationChangedEventArgs.HwndActivated">
            <summary>
            The handle of the window being activated
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.ActivationChangedEventArgs.HwndDeactivated">
            <summary>
            The handle of the window being de-activated
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager.DropDownFormBase">
            <summary>
            A form used as a parent for controls that will be dropped down.
            </summary>
            <seealso cref="T:Infragistics.Win.DropDownManager"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownFormBase.#ctor(Infragistics.Win.DropDownManager)">
            <summary>
            Constructor
            </summary>
            <param name="dropDownManager"></param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownFormBase.Dispose(System.Boolean)">
            <summary>
            Called when the form is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownFormBase.OnDeactivate(System.EventArgs)">
            <summary>
            Called when the form is deactivated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownFormBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.ProcessDialogKey(System.Windows.Forms.Keys)"/>
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values that represent the key to process</param>
            <returns><b>true</b> for Alt-F4 to prevent the form from closing</returns>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.DropDownFormBase.IsFullTrust">
            <summary>
            Returns true if the window was created in a full truct environment. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownManager.DropDownForm">
            <summary>
            A form used as a parent for controls that will be dropped down.
            </summary>
            <remarks>
            <p>Clicking on this form with the mouse will not automatically activate it.</p>
            <p>It returns <b>MA_NOACTIVATE</b> for the <b>WM_MOUSEACTIVATE</b> message.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.DropDownManager"/>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownForm.#ctor(Infragistics.Win.DropDownManager)">
            <summary>
            Constructor
            </summary>
            <param name="dropDownManager"></param>
        </member>
        <member name="M:Infragistics.Win.DropDownManager.DropDownForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override WndProc to trap the WM_MOUSEACTIVATE message and return
            NOACTIVATE
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.DropDownForm.CreateParams">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DropDownManager.DropDownForm.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwner">
            <summary>
            Used to provide default owner information to an editor.
            </summary>
            <remarks>
            <p class="body">The <b>DefaultEditorOwner</b> class may be used to provide 
            default values to an editor. Each editor class takes a "default owner" to one 
            of its constructors. When the editor requests a property value of its owner, 
            the owner may or may not provide the value for that property. When the owner 
            does not provide the value for the editor, the value used is returned from the 
            default owner, if there is one.</p>
            <p class="body">The DefaultEditorOwner overrides several of the members of the base 
            <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class and returns a value from its <see cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.Settings"/> 
            object. An instance of a <see cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings"/> should be provided either 
            in the constructor of the DefaultEditorOwner or by setting the <see cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.Settings"/> 
            property directly. Then when the editor class is created, the constructor overload 
            that takes an EmbeddableEditorOwnerBase should be used and an instance of the DefaultEditorOwner provided 
            for that parameter. If the owner that actually utilizes the editor does not provide a 
            value for a property value requested, the DefaultEditorOwner will then be queried, which 
            will return the value from its associated <see cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.Settings"/> property.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorOwnerBase">
            <summary>
            Implemented by an object that can embed an EmbeddableEditor to render a value.
            </summary>
            <seealso cref="T:Infragistics.Win.EmbeddableEditorBase"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>EmbeddableEditorOwnerBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.EnterEditModeOnClick(System.Object)">
            <summary>
            If true is returned, the editor will enter edit mode on either
            MouseDown or MouseUp, depending on the nature of the editor
            </summary>
            <param name="ownerContext">The owner context</param>
            <returns>The default implemenation returns true</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetControl(System.Object)">
            <summary>
            Returns the owner's control. 
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The owner's control. This is used e.g. to re-parent the edit control.</returns>
            <remarks>The default implementation returns <b>null</b> (Nothing in VB)</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDataType(System.Object)">
            <summary>
            Returns the data type.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <remarks>The default implementation returns type of <b>string</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)">
            <summary>
            Returns information needed to format a string.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="format">Returns the format string or null.</param>
            <param name="provider">Returns the IFormatProvider or null.</param>
            <remarks>The default implementation returns <b>null</b> (Nothing in VB)</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)">
            <summary>
            Returns the value that should be rendered.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsEnabled(System.Object)">
            <summary>
            Returns whether the value is enabled for editing.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>True if the value is enabled for editing.</returns>
            <remarks>The default implementation returns <b>true</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsNullable(System.Object)">
            <summary>
            Returns whether the value can be set to null.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>True if the value can be set to null.</returns>
            <remarks>The default implementation returns <b>true</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for an element.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="appearance">The apperance structure to initialize.</param>
            <param name="requestedProps">The appearance properties to resolve.</param>
            <returns>True if the owner supplies an appearance.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Boolean)">
            <summary>
            Resolves the appearance for an element.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="appearance">The apperance structure to initialize.</param>
            <param name="requestedProps">The appearance properties to resolve.</param>
            <param name="hotTracking">Boolean indicating whether the owner should apply its 'HotTrackingAppearance'</param>
            <returns>True if the owner supplies an apperance.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.EmbeddableEditorArea,System.Boolean)">
            <summary>
            Resolves the appearance for an element.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="appearance">The apperance structure to initialize.</param>
            <param name="requestedProps">The appearance properties to resolve.</param>
            <param name="area">Enumeration of type <see cref="T:Infragistics.Win.EmbeddableEditorArea"/> describing the area of the embeddable element to which the appearance will be applied</param>
            <param name="hotTracking">Boolean indicating whether the owner should apply its 'HotTrackingAppearance'</param>
            <returns>True if the owner supplies an appearance.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.EmbeddableEditorArea)">
            <summary>
            Resolves the appearance for an element.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="appearance">The apperance structure to initialize.</param>
            <param name="requestedProps">The appearance properties to resolve.</param>
            <param name="area">Enumeration of type <see cref="T:Infragistics.Win.EmbeddableEditorArea"/> describing the area of the embeddable element to which the appearance will be applied</param>
            <returns>True if the owner supplies an appearance.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.EmbeddableEditorArea,System.Boolean,System.String)">
            <summary>
            Resolves the appearance for an element.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="appearance">The appearance structure to initialize.</param>
            <param name="requestedProps">The appearance properties to resolve.</param>
            <param name="area">Enumeration of type <see cref="T:Infragistics.Win.EmbeddableEditorArea"/> describing the area of the embeddable element to which the appearance will be applied</param>
            <param name="hotTracking">Boolean indicating whether the owner should apply its 'HotTrackingAppearance'</param>
            <param name="customArea">A string that denotes which appearance to resolve. Applicable only when the 'area' parameter is set to Custom.</param>
            <returns>True if the owner recognizes and supports the named appearance.</returns>
            <remarks>The default implementation returns <b>false</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ShouldDrawFocus(System.Object)">
            <summary>
            Determines if a focus rect should be drawn.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>Returns true if a focus rect should be drawn.</returns>
            <remarks>The default implementation returns <b>false</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetEditor(System.Object)">
            <summary>
            Returns the editor for the passed in ownerContext. This is used by the base implementation of EmbeddableOwnerBase.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCharacterCasing(System.Object)">
            <summary>
            Determines how the text will be cased. 
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The CharacterCasing to be applied to the text</returns>
            <remarks>The default implementation returns <b>CharacterCasing.Normal</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMaskInfo(System.Object,System.String@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@)">
            <summary>
            Returns masking information. This is only of ibterest to a editor that supports masking.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="mask">The string used for masking the value or null if there is no mask.</param>
            <param name="dataMode">Determines whether literals and prompt characters are included in Value property of the Editor.</param>
            <param name="displayMode">Determines whether literals and prompt characters are displayed when not in edit mode.</param>
            <param name="clipMode">Determines whether literals and prompt characters are included when the editor copyies text to the clipboard.</param>
            <returns>True only if masking info is available.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMaxLength(System.Object,System.Int32@)">
            <summary>
            Returns the maximum length for a string.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="maxLength">(out) The maximum value or 0 if there is no maximum.</param>
            <returns>A boolean indicating whether a meaningful value was returned.</returns>
            <remarks>The default implementation returns <b>0</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMaxLines(System.Object,System.Int32@)">
            <summary>
            Returns the maximum number of text lines displayed.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="maxLines">(out) The maximum value or 0 if there is no maximum.</param>
            <returns>A boolean indicating whether a meaningful value was returned.</returns>
            <remarks>The default implementation returns <b>0</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMaxValue(System.Object)">
            <summary>
            Returns the maximum allowable value.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The maximum value or null if there is no maximum.</returns>
            <remarks>The default implementation returns <b>null</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetMinValue(System.Object)">
            <summary>
            Returns the minimum allowable value.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The minimum value or null if there is no minimum.</returns>
            <remarks>The default implementation returns <b>null</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetNullText(System.Object,System.String@)">
            <summary>
            The string to display for a null value.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="nullText">(out) The string that should be used if the value is null or DB_Null.</param>
            <returns>A boolean indicating whether a meaningful value was returned.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetPadChar(System.Object,System.Char@)">
            <summary>
            Returns character used as a substitute for spaces.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="padChar">Pad character.</param>
            <returns>True only if pad character info is available.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetPromptChar(System.Object,System.Char@)">
            <summary>
            Returns the character used as prompt during editing (e.g. '_').
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="promptChar">Prompt character.</param>
            <returns>True only if prompt character info is available.</returns>
            <remarks>The default implementation returns <b>false</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetPasswordChar(System.Object,System.Char@)">
            <summary>
            Returns the character used to mask characters. 
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="passwordChar">The character to display when entering a password.</param>
            <returns>True only if passwordChar character info is available.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValueList(System.Object)">
            <summary>
            Returns a list of predefined values.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>Returns a list of predefined values or null.</returns>
            <remarks>The default implementation returns <b>null</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsKeyMapped(System.Windows.Forms.Keys,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns whether the key is used by the owner.
            </summary>
            <param name="keyData"></param>
            <param name="element">The EmbeddableUIElementBase-derived element</param>
            <returns>True if the key is used by the owner (e.g. an arrow or tab key used for internal navigation).</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsMultiLine(System.Object)">
            <summary>
            Returns whether the text is multiline.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the text is multiline</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsVertical(System.Object)">
            <summary>
            Returns whether the element should display vertical.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the display is vertical</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsReadOnly(System.Object)">
            <summary>
            Returns true is the value is read-only
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the value is read only</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.MustSelectFromList(System.Object)">
            <summary>
            Returns whether a selection can only be made from the value list.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>If true will act as a combo with a style of DropDownList.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.MustDisplayFromList(System.Object)">
            <summary>
            Returns whether the text an element displays must correspond to the text of an item in a list
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>If true and the editor's Value does not match an item in the list, an empty string will be displayed.</returns>
            <remarks>The default implementation returns <b>true</b>, meaning that if an editor's Value does not correspond to an item in the list, and <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.MustSelectFromList(System.Object)"/> returns true, an empty string will be displayed.</remarks>
            <remarks><b>Note:</b>The base class implementation will <b>always</b> return false when <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.MustSelectFromList(System.Object)"/> returns false.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.EnsureValueIsInList(System.Object)">
            <summary>
            Returns whether an editor's value must correspond to an item in its ValueList
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <remarks>The default implementation returns <b>false</b>.</remarks>
            <remarks>When an instance of an EmbeddableEditorOwnerBase-derived class returns true from this method, the editor will validate its text against the items in its ValueList and return false from the IsValid property if the text does not match any items.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.WrapText(System.Object)">
            <summary>
            Returns whether the text should be wrapped if it doesn't fit.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the text should be wrapped</returns>
            <remarks>The default implementation calls the IsMultiLine method and returns its value</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDropDownListOffset(System.Object)">
            <summary>
            Returns the horizontal and vertical offset to apply to the DropDown's list
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The additional offset to apply to the dropdown</returns>
            <remarks>
            Since it is implied that a ValueList's DropDown is displayed at the bottom left<br></br>
            corner of the element that displays it, this property provides a way to compensate for<br></br>
            control borders, etc.
            </remarks>
            <remarks>The default implementation returns <b>Size.Empty</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDropDownListAdditionalWidth(System.Object)">
            <summary>
            Returns the number of pixels by which to increase the dropdown list's width to compensate for borders, etc.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The additional width to apply to the dropdown</returns>
            <remarks>
            If the owner returns a non-zero value from the GetDropDownListOffset method, the dropdown list's width might need to be increased so that it covers the width of the owner; this method allows that.<br></br>
            The owner will typically return the sum of the widths of its left and right borders.
            </remarks>
            <remarks>The default implementation returns <b>0</b></remarks>
            <seealso cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDropDownListOffset(System.Object)"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetExternalContext(System.Object)">
            <summary>
            Returns an object that may be provided to the programmer using an editor.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>An object that the programmer may use to determine which object was associated with an action.</returns>
            <remarks>
            <p class="body">The <see cref="P:Infragistics.Win.EmbeddableUIElementBase.OwnerContext"/> is provided to the editor when it creates or reinitializes an embeddable uielement. 
            The embeddable element in turn uses that information when making requests to the owner for information but the editor. That object is opaque to the editor but provides context to the owner 
            so that it knows which object the editor is dealing with. An owner may change the contents of the <b>OwnerContext</b> or the object may not be useful to the programmer using an editor. For example, a CellUIElement 
            may be the <b>OwnerContext</b> for a grid's cell editor but that isn't normally the level of information that the programmer would need. The programmer needs a 
            Cell object and shouldn't be expected to extract that from the OwnerContext. Instead, an editor will ask the owner via this method to translate the <b>OwnerContext</b> to 
            something that the programmer can use.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetImageList(System.Object)">
            <summary>
            Returns the image list to be used by the editor's ValueList, or null
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>An ImageList, or null if not supported</returns>
            <remarks>The default implementation returns <b>null</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValueListsCollection(System.Object)">
            <summary>
            Returns the image list to be used by the editor's ValueList, or null
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>An ValueListsCollection, or null if not supported</returns>
            <remarks>The default implementation returns <b>null</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetSizeOfImages(System.Object,System.Drawing.Size@)">
            <summary>
            Returns the size of images to be used by the editor's ValueList
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="sizeOfImages">The size of the images</param>
            <returns>A boolean indicating whether a meaningful value was supplied</returns>
            <remarks>The default implementation returns <b>false</b>, with sizeOfImages set Size.Empty.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetBorderStyle(System.Object,Infragistics.Win.UIElementBorderStyle@)">
            <summary>
            Returns the BorderStyle to be used by the editor's embeddable element
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="borderStyle">The BorderStyle to be used by the editor's embeddable element</param>
            <returns></returns>
            <remarks>The default implementation returns <b>false</b>, with borderStyle set to UIElementBorderStyle.Default.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetButtonStyle(System.Object,Infragistics.Win.UIElementButtonStyle@)">
            <summary>
            Returns the ButtonStyle to be used by the embeddable element's button
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="buttonStyle">The ButtonStyle to be used by the embeddable element's buttons</param>
            <returns></returns>
            <remarks>The default implementation returns <b>false</b>, with buttonStyle set to UIElementButtonStyle.Default.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetDisplayStyle(System.Object)">
            <summary>
            Returns the DisplayStyle to be used by the embeddable element
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The DisplayStyle to be used by the embeddable element</returns>
            <remarks>The default implementation returns <b>EmbeddableElementDisplayStyle.Standard</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsHotTrackingEnabled(System.Object)">
            <summary>
            Returns whether "hot tracking" effects should be enabled
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The default implementation returns <b>true</b>.</returns>
            <remarks>
            When one embeddable element is in edit mode, others might want to disable hot tracking effects; in that case, the owner should return false from this method.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.DrawAsActive(System.Object)">
            <summary>
            Returns whether the element should be drawn as if it were in its "active" state. Only applicable if the return from the DisplayStyle property is not Standard.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The default implementation returns DefaultableBoolean.Default</returns>
            <remarks>
            The default implementation returns <b>DefaultableBoolean.Default</b>, for which the element should follow the cursor position.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetAutoEdit(System.Object)">
            <summary>
            Indicates whether AutoEdit should enabled.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>
            Indicates whether AutoEdit should enabled.
            </returns>
            <remarks>
            The default implementation returns <b>false</b>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetPadding(System.Object,System.Drawing.Size@)">
            <summary>
            The padding to place around the value to display.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="padding">(out) The padding to place around the value to display.</param>
            <returns>A boolean indicating whether a meaningful value was returned.</returns>
            <remarks>The default implementation returns <b>false</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEnterEditor(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Called when focus is entering the editor. 
            </summary>
            <param name="editor">The editor who is getting focus.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnLeaveEditor(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Called when focus is leaving the editor. 
            </summary>
            <param name="editor">The editor who is losing focus.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorGotFocus(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Called when the editor gets focus. 
            </summary>
            <param name="editor">The editor who is getting focus.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorLostFocus(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Called when the editor loses focus. 
            </summary>
            <param name="editor">The editor who is losing focus.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorMouseDown(Infragistics.Win.EmbeddableUIElementBase,Infragistics.Win.EmbeddableMouseDownEventArgs)">
            <summary>
            The editor calls this method whenever any of its embeddable elements gets a mouse down.
            </summary>
            <param name="embeddableElem"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorMouseUp(Infragistics.Win.EmbeddableUIElementBase,Infragistics.Win.EmbeddableMouseEventArgs)">
            <summary>
            The editor calls this method whenever any of its embeddable elements gets a mouse up.
            </summary>
            <param name="embeddableElem"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorDoubleClick(Infragistics.Win.EmbeddableUIElementBase,Infragistics.Win.EmbeddableClickEventArgs)">
            <summary>
            The editor calls this method whenever any of its embeddable elements gets a double click.
            </summary>
            <param name="embeddableElem"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.OnEditorBeforeEnterEditMode(Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called before edit mode has been entered. 
            </summary>
            <param name="editor">The editor about to enter edit mode.</param>
            <param name="element">The element entering edit mode.</param>
            <returns>False to cancel the operation.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ShouldShowOverflowIndicator(System.Object,System.Boolean@,System.Boolean@,System.Drawing.Image@)">
            <summary>
            Sets the out parameters to values relating to the overflow indicator's existence and if it should show a tooltip.
            </summary>
            <param name="ownerContext">Not used in this override.</param>
            <param name="showOverflowIndicator">Will be set to true if the overflow indicator should be shown.</param>
            <param name="showToolTip">Will be set to true if the overflow indicator should show a tooltip.</param>
            <param name="indicatorImage">Set to null by default.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetConstraints(System.Object)">
            <summary>
            Returns a <see cref="T:Infragistics.Win.ValueConstraint"/> object associated with the owner context, if any.
            </summary>
            <param name="ownerContext">An object which represents the context for which the constraints should be returned.</param>
            <returns>A <see cref="T:Infragistics.Win.ValueConstraint"/> object.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.RaiseKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Rases KeyDown event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.RaiseKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises KeyUp event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.RaiseKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises KeyPress event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetImageTransparentColor(System.Object)">
            <summary>
            Returns the color that is used as the transparent color for images displayed by the editor
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The color that is used as the transparent color for images displayed by the editor</returns>
            <remarks>The default implementation returns <b>Color.Transparent</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetContextMenu(System.Object)">
            <summary>
            Returns the ContextMenu that will be displayed by the editor
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A ContextMenu</returns>
            <remarks>The default implementation returns <b>null</b></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetAutoSizeEditInfo(System.Object,System.Boolean@,System.Drawing.Size@,System.Drawing.Size@)">
            <summary>
            Returns the AutoSizeEdit information to be used by editors that support AutoSizing
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="autoSizeEdit">(out) Indicates whether the owner supports AutoSizeEditing.</param>
            <param name="startSize">(out) A Size struct containing the starting width and height to which the editor should be set.</param>
            <param name="maxSize">(out) A Size struct containing the maximum width and height to which the editor should be allowed to grow.</param>
            <returns>A boolean indicating whether AutoSizeEdit functionality is supported by the owner.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetExtendedInfo(System.Object,System.Object@)">
            <summary>
            Returns owner-specific information to an editor
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="info">The information requested by the editor and returned from the owner.</param>
            <returns>A boolean indicating whether the specified information is supported by the owner.</returns>
            <remarks>
            The default implementation returns <b>false</b>.<br></br>
            Typically, an editor will set the <i>info</i> parameter to a string or enumeration that identifies the information it is trying to obtain from the owner. The owner will then set the <i>info</i> parameter to a value that is meaningful to the editor, and return true to indicate that the request was recognized and a meaningful value was returned.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.UseDefaultEditorCursor(System.Object)">
            <summary>
            Returns whether the editor should use its default cursor
            </summary>
            <remarks>
            <p class="body">
            By default, an editor might display a custom cursor, appropriate to the type of editor it is; for example, the <see cref="T:Infragistics.Win.EditorWithText"/> editor displays an "I-Beam" cursor when it is enabled to indicate that it supports selection of text.<br></br>
            If the editor's owner does not want the editor to display its default cursor, it must return <b>false</b> from this method.<br></br><br></br>
            The default implementation returns <b>true</b>.
            </p>
            </remarks>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the editor should use its default cursor.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetTextBoxScrollBars(System.Object)">
            <summary>
            Returns which scrollbars should appear in an editor's multiline TextBox.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating which scrollbars should appear in an editor's multiline TextBox.</returns>
            <remarks>
            <p class="body">The default implementation returns <b>true</b>.</p>
            <p class="note"><b>Note</b>: This method is only applicable when the owner returns true from the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsMultiLine(System.Object)"/> method.<br></br>
            Also, when the owner returns true from the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.WrapText(System.Object)"/> method, horizontal scrollbars are <b>not</b> displayed, regardless of the value returned from this method.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.IsMultiLine(System.Object)"/>
            <seealso cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.WrapText(System.Object)"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetEditorContext(System.Object)">
            <summary>
            Gets the editor context that was set with SetEditorContext method.
            </summary>
            <param name="ownerContext"></param>
            <returns>Editor context that was last set with SetEditorContext for the passed in ownerContext.</returns>
            <remarks>
            <p>GetEditorContext and <seealso cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.SetEditorContext(System.Object,System.Object)"/> can be used to cache objects per owner context.</p>
            <p>Implementing owner will return the object that was last cached using SetEditorContext method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.SetEditorContext(System.Object,System.Object)">
            <summary>
            Sets the editor context for the passed in ownerContext.
            </summary>
            <param name="ownerContext"></param>
            <param name="editorContext"></param>
            <remarks>
            <p><seealso cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetEditorContext(System.Object)"/> and SetEditorContext can be used to cache objects per owner context.</p>
            <p>Implementing owner will return the object that was last cached using SetEditorContext method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ShowHotkeyPrefix(System.Object)">
            <summary>
            Returns whether the ampersand character is interpreted as a hotkey prefix.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A boolean indicating whether the ampersand character is interpreted as a hotkey prefix.</returns>
            <remarks><p class="body">When the owner returns true from the ShowHotkeyPrefix method, and there exists an ampersand character in the string representation of its value, the character following the ampersand is displayed as a hotkey. When the owner returns false from the ShowHotkeyPrefix method, ampersands are treated as standard characters.</p>
            <p class="body">The default implementation returns <b>false</b>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetEditorElement(System.Object)">
            <summary>
            Returns the embeddable uielement associated with a particular object or null if none is available.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <returns>The embeddable uielement representing the specified owner context.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetShowInkButton(System.Object)">
            <summary>
            Determines when to show the Ink Button on the editor.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A ShowInkButton value indicating when the InkButton will be shown.</returns>
            <remarks><p class="body">The default implementation returns <b>ShowInkButton.Default</b>.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.AccessibilityNotifyClients(System.Object,System.Windows.Forms.AccessibleEvents)">
            <summary>
            Notifies the owner that an accessible event has occurred.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <param name="eventId">Enumeration indicating the event that occurred.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCachedGraphics(System.Object)">
            <summary>
            Called to get a graphics object suitable for doing metrics calculations only.
            </summary>
            <returns>A graphics object suitable for doing metrics calculations only. This graphics object shouldn't be rendered on.</returns>
            <param name="ownerContext">The owner context which will be used to get the Control this owner is associated with.</param>
            <remarks>
            <p>Do NOT call the <b>Dispose</b> method on the graphics object returned from this method.</p>
            <p>Instead, each call to this method should be paired with a call to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.ReleaseCachedGraphics(System.Drawing.Graphics)"/>.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCachedGraphics(System.Object)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.ReleaseCachedGraphics(System.Drawing.Graphics)"/>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorOwnerBase.ReleaseCachedGraphics(System.Drawing.Graphics)">
            <summary>
            Called to release a graphics object that was returned from a prior call to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCachedGraphics(System.Object)"/>.
            </summary>
            <param name="g">The graphics object to release.</param>
            <remarks>
            <p>Do NOT call the <b>Dispose</b> method on the graphics object returned from <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCachedGraphics(System.Object)"/>. Use this method instead.</p>
            <p>During graphics caching calls to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetCachedGraphics(System.Object)"/> will return a single cached graphics object and calls to <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.ReleaseCachedGraphics(System.Drawing.Graphics)"/> will be ignored.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.DrawUtility.BeginGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.EndGraphicsCaching"/>
            <seealso cref="M:Infragistics.Win.DrawUtility.GetCachedGraphics(System.Windows.Forms.Control)"/>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorOwnerBase.DesignMode">
            <summary>
            Returns true if in design mode, false otherwise.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorOwnerBase.KeyDown">
            <summary>
            Occurs on a key down while the editor is in edit mode and the owner has focus.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorOwnerBase.KeyPress">
            <summary>
            Occurs on a key press while the editor is in edit mode and the owner has focus.
            </summary>
        </member>
        <member name="E:Infragistics.Win.EmbeddableEditorOwnerBase.KeyUp">
            <summary>
            Occurs on a key up while the editor is in edit mode and the owner has focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.#ctor(Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwner"/>
            </summary>
            <param name="settings">Object used to provide the default owner settings for an editor</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwner"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetValue(System.Object)">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetEditor(System.Object)">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetDataType(System.Object)">
            <summary>
            Returns the data type.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <remarks>The default implementation returns type of <b>string</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetEditorElement(System.Object)">
            <summary>
            Returns the embeddable uielement associated with a particular object or null if none is available.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <returns>The embeddable uielement representing the specified owner context.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetValueList(System.Object)">
            <summary>
            Returns a list of predefined values.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ValueList"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)">
            <summary>
            Returns information needed to format a string.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.Format"/>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.FormatProvider"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetMaskInfo(System.Object,System.String@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@)">
            <summary>
            Returns masking information. This is only of ibterest to a editor that supports masking.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskInput"/>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskDataMode"/>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskDisplayMode"/>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskClipMode"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetMaxLength(System.Object,System.Int32@)">
            <summary>
            Returns the maximum length for a string.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaxLength"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetMaxValue(System.Object)">
            <summary>
            Returns the maximum allowable value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaxValue"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetMinValue(System.Object)">
            <summary>
            Returns the minimum allowable value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MinValue"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetButtonStyle(System.Object,Infragistics.Win.UIElementButtonStyle@)">
            <summary>
            Returns the ButtonStyle to be used by the embeddable element's button
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ButtonStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetImageTransparentColor(System.Object)">
            <summary>
            Returns the color that is used as the transparent color for images displayed by the editor
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ImageTransparentColor"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.GetTextBoxScrollBars(System.Object)">
            <summary>
            Returns which scrollbars should appear in an editor's multiline TextBox.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.TextBoxScrollbars"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.Settings">
            <summary>
            Returns or sets the object that provides the default owner settings for an editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwner.DesignMode">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings">
            <summary>
            Defaultable owner settings for an editor.
            </summary>
            <remarks>
            <p class="body">The <b>DefaultEditorOwnerSettings</b> is essentially a property bag of 
            settings for a <see cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwner"/> to return to an editor when a property is 
            requested of the editor's owner, that is, the object that is utilizing the editor.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwner"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ValueList">
            <summary>
            Returns or sets the <see cref="T:Infragistics.Win.IValueList"/> used by an editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.Format">
            <summary>
            Returns or sets the string used to format the value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.FormatProvider">
            <summary>
            Returns or sets the <see cref="T:System.IFormatProvider"/> instance that supplies culture-specific formatting information.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskInput">
            <summary>
            Returns or sets the input mask for the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskDataMode">
            <summary>
            Returns or sets whether literals and prompt characters are included in the editor value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskDisplayMode">
            <summary>
            Returns or sets whether literals and prompt characters are displayed when the editor is not in edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaskClipMode">
            <summary>
            Returns or sets whether literals and prompt characters are included when the editor copies the value to the clipboard.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaxLength">
            <summary>
            Returns or sets the maximum length for a string.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MaxValue">
            <summary>
            Returns or sets the maximum value for the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.MinValue">
            <summary>
            Returns or sets the minimum value for the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ButtonStyle">
            <summary>
            Returns or sets the button style for the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.ImageTransparentColor">
            <summary>
            Returns or sets the color that is used as the transparent color for images displayed by the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.TextBoxScrollbars">
            <summary>
            Returns or sets which scroll bars are displayed by a multiline editors textbox.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DefaultEditorOwnerSettings.DataType">
            <summary>
            Returns or sets the data type. When the owner doesn't have information on the DataType this data type will be used by the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonBase">
            <summary>
            Abstract base class for editor buttons
            </summary>
            <remarks>
            <p class="body">The <b>EditorButtonBase</b> is the base class for an editor button. An editor button 
            provides a way to display a generic button within a text or mask editor. Many of 
            the editor classes already provide their own buttons that relate specifically to 
            their value and are controlled by the editor itself. The editor buttons allow you to 
            add additional buttons and affect the editor as required. For example, you can use an 
            <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton"/> to display a custom control in a dropdown window.</p>
            <p class="body">As well as providing several basic properties (e.g. <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Visible"/>, <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/>, etc), 
            there are also several members that must be overriden. The <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)"/> member is used to determine 
            the size requested by the editor button to display its contents. The <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)"/> method is used 
            to obtain the <see cref="T:Infragistics.Win.UIElement"/> that will provide the display for the button. The <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.UIElementType"/> 
            member should return the type of UIElement that will be used to display the button. Implements should also 
            override the <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.Clone"/> and <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)"/> methods.</p>
            <p class="body">Implements that provide events should derive their event arguments from <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs"/> 
            or <see cref="T:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs"/> to provide both the button instance related to the 
            event as well as the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/>.</p>
            <p class="note"><b>Note</b> The editor buttons do not automatically affect the value of the 
            editor in any way. The <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Editor"/> property is provided from the button so that you 
            can manipulate the editor as required.</p>
            <p class="note"><b>Note</b> Implementors must override the <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)"/> if 
            the object is to be properly serialized at design time.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton"/>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton"/>
            <seealso cref="T:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.ShouldSerializeAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.GetDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Returns the description of the default action of the button.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.OnDispose">
            <summary>
            Used to notify the object that it is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a sub object
            </summary>
            <param name="propChange">PropChangeInfo object containing information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Used to obtain the uielement that will be used to display the button. 
            </summary>
            <param name="previousElement">Previous uielement or null</param>
            <param name="parentElement">The parent element</param>
            <returns>If the <paramref name="previousElement"/> may be used, that can be returned. Otherwise a new uielement with the specified parent should be returned.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Used to determine if the specified key is used by the button.
            </summary>
            <param name="keyData">Key to evaluate</param>
            <returns>True if the key is used by the button. Otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used to notify the button that its input key was pressed
            </summary>
            <param name="e">Key event information</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used to notify the button that its input key was released
            </summary>
            <param name="e">Key event information</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.InitializeAppearances">
            <summary>
            Invoked when the Appearances collection of the object changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.InitializeEditor(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Sets the associated <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Editor"/>
            </summary>
            <param name="editor">Owning editor</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.ToString">
            <summary>
            Returns the string representation of the button
            </summary>
            <returns>A string containing the name of the button type</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Invoked when the preferred size of button should be calculated.
            </summary>
            <param name="buttonInfo">Provides information that can be used to calculate the size</param>
            <returns>A size structure containing the preferred size for the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.CreateAccessibilityInstance(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Creates an accessible object representing the editor button.
            </summary>
            <param name="parent">Parent accessible object</param>
            <returns>An accessible object representing the editor button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.DoDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Invoked when the default action of the accessible object representing the button is invoked.
            </summary>
            <param name="button">Accessible object representing a button instance.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance">
            <summary>
            Default appearance for the button
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.HasAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearances">
            <summary>
            Returns or sets the collection that provides appearance information for the appearance properties
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Editor">
            <summary>
            Returns the owning <b>Editor</b>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Enabled">
            <summary>
            Returns or sets whether the button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Visible">
            <summary>
            Returns or sets whether the button is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Width">
            <summary>
            Returns or sets the width of the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.WidthResolved">
            <summary>
            Returns the resolved width of the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.UIElementType">
            <summary>
            Returns the type of uielement that is used to represent the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.AccessibleName">
            <summary>
            Returns or sets the name used by accessibility clients to identify the button.
            </summary>
            <remarks>
            <p class="body">The <b>AccessibleName</b> property is used by accessibility clients to identify the object to the user.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.AccessibleDescription">
            <summary>
            Returns or sets the description of the button used by accessibility client applications.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.AccessibleRole">
            <summary>
            Returns the accessible role for the button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseConverter">
            <summary>
            Type converter for <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> classes
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject">
            <summary>
            Base accessible object for an Editor button
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject,Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="button">Associated button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.EditorButtonBaseAccessibleObject.Button">
            <summary>
            Associated button
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButton">
            <summary>
            Standard button style editor button.
            </summary>
            <remarks>
            <p class="body">The <b>EditorButton</b> is an editor button designed to 
            display image and/or text. The button acts as a standard button invoking its 
            <see cref="E:Infragistics.Win.UltraWinEditors.EditorButton.Click"/> event when the button is released.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.ShouldSerializePressedAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.ResetPressedAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property. If the <see cref="T:Infragistics.Win.Appearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.GetDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Returns the description of the default action of the button.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.OnDispose">
            <summary>
            Used to notify the object that it is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a sub object
            </summary>
            <param name="propChange">PropChangeInfo object containing information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Used to obtain the uielement that will be used to display the button. 
            </summary>
            <param name="previousElement">Previous uielement or null</param>
            <param name="parentElement">The parent element</param>
            <returns>If the <paramref name="previousElement"/> may be used, that can be returned. Otherwise a new uielement with the specified parent should be returned.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.InitializeAppearances">
            <summary>
            Invoked when the Appearances collection of the object changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.OnClick(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButton.Click"/> event.
            </summary>
            <param name="e">EditorButtonEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.ResolveAppearance(Infragistics.Win.UIElementButtonState,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the button.
            </summary>
            <param name="state">Current button state</param>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedPropFlags">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Invoked when the preferred size of button should be calculated.
            </summary>
            <param name="buttonInfo">Provides information that can be used to calculate the size</param>
            <returns>A size structure containing the preferred size for the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.CalculateTextSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Calculates the size of the button's text.
            </summary>
            <param name="buttonInfo">Editor button size information</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButton.DoDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Invoked when the default action of the accessible object representing the button is invoked.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing a button instance.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance">
            <summary>
            Appearance for the button when pressed down
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.HasPressedAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.UIElementType">
            <summary>
            Returns the type of uielement that is used to represent the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.ButtonStyle">
            <summary>
            Returns or sets the style of the button border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.Text">
            <summary>
            Returns or sets the text displayed by the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButton.AccessibleRole">
            <summary>
            Returns the accessible role for the button.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButton.Click">
            <summary>
            Fired when the button is clicked
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton">
            <summary>
            Editor button class with auto-repeat functionality.
            </summary>
            <remarks>
            <p class="body">The <b>AutoRepeatEditorButton</b> is similar to the 
            <see cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/> in that it may display image and/or text. The 
            button displayed is different, however, in that the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButton.Click"/> 
            event is invoked when the button is pressed down and will continue to invoke 
            the event at regular intervals (see	<see cref="P:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.Interval"/>).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Used to obtain the uielement that will be used to display the button. 
            </summary>
            <param name="previousElement">Previous uielement or null</param>
            <param name="parentElement">The parent element</param>
            <returns>If the <paramref name="previousElement"/> may be used, that can be returned. Otherwise a new uielement with the specified parent should be returned.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.InitialDelay">
            <summary>
            Returns or sets the delay before entering autorepeat mode when the button is pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.Interval">
            <summary>
            Returns or sets the delay between click events after entering auto repeat mode
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.StateEditorButton">
            <summary>
            Editor button class for a button that displays a checked state.
            </summary>
            <remarks>
            <p class="body">The <b>StateEditorButton</b> is used to display a 
            checkbox, state button or option set within a text or mask editor. The type 
            of display used is based on the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.DisplayStyle"/> property.</p>
            <p class="body">The class provides 4 events. The <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged"/> event is 
            invoked before the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> property is changed. The event may be cancelled or 
            the CheckState may be modified. If the event is not cancelled, the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.AfterCheckStateChanged"/> 
            event is invoked. When the button is clicked via the ui, the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButton.Click"/> event 
            will also be invoked. The other event is  the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.InitializeCheckState"/> event. This event is 
            primarily available for when the editor is used by a control that will display multiple instances 
            of the element - e.g. UltraGrid. The event is invoked when the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> 
            of the button is required by the element to initialize the value it will display. The 
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> property of the <see cref="T:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs"/> passed to 
            that event should be used to determine for which object the check state is being initialized.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.GetDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Returns the description of the default action of the button.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing an instance of the state editor button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Used to obtain the uielement that will be used to display the button. 
            </summary>
            <param name="previousElement">Previous uielement or null</param>
            <param name="parentElement">The parent element</param>
            <returns>If the <paramref name="previousElement"/> may be used, that can be returned. Otherwise a new uielement with the specified parent should be returned.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Invoked when the preferred size of button should be calculated.
            </summary>
            <param name="buttonInfo">Provides information that can be used to calculate the size</param>
            <returns>A size structure containing the preferred size for the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.InitCheckState(System.Windows.Forms.CheckState)">
            <summary>
            Initializes the <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> without invoking the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged"/> and <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.AfterCheckStateChanged"/> events
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.DoDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Invoked when the default action of the accessible object representing the button is invoked.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing a button instance.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.OnInitializeCheckState(Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.InitializeCheckState"/> event.
            </summary>
            <param name="e">InitializeCheckStateEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.OnAfterCheckStateChanged(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.AfterCheckStateChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.StateEditorButton.OnBeforeCheckStateChanged(Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState">
            <summary>
            Returns or sets the check state of the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.StateEditorButton.Checked">
            <summary>
            Returns or sets whether the button is checked or unchecked.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.StateEditorButton.DisplayStyle">
            <summary>
            Returns or sets the style used to display the check state.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.StateEditorButton.AccessibleRole">
            <summary>
            Returns the accessible role for the button.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.StateEditorButton.InitializeCheckState">
            <summary>
            Fired when the checkstate for the element needs to be determined.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.StateEditorButton.AfterCheckStateChanged">
            <summary>
            Fired when the checkstate for a <see cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/> has changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged">
            <summary>
            Fired before the checkstate for a <see cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/> has changed
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase">
            <summary>
            Abstract base class for an editor button that displays a dropdown.
            </summary>
            <remarks>
            <p class="body">The <b>DropDownEditorButtonBase</b> is a base editor button class 
            for displaying a dropdown window. It exposes common events relating to dropping 
            down a separate window including the <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.BeforeDropDown"/> and <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.AfterCloseUp"/> 
            events. It also exposes methods for programatically displaying (<see cref="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.DropDown"/>) or hiding 
            (<see cref="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.CloseUp"/>) the dropdown window.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.GetDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Returns the description of the default action of the button.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing an isntance of the dropdown editor button.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.CloseUp">
            <summary>
            Used to close up the dropdown window.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.DropDown">
            <summary>
            Used to display the dropdown window
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.OnAfterCloseUp(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.AfterCloseUp"/> event.
            </summary>
            <param name="e">EditorButtonEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.OnBeforeDropDown(Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.BeforeDropDown"/> event.
            </summary>
            <param name="e">EditorButtonEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Invoked when the preferred size of button should be calculated.
            </summary>
            <param name="buttonInfo">Provides information that can be used to calculate the size</param>
            <returns>A size structure containing the preferred size for the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.DoDefaultAction(System.Windows.Forms.AccessibleObject)">
            <summary>
            Invoked when the default action of the accessible object representing the button is invoked.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing a button instance.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.IsDroppedDown">
            <summary>
            Indicates if the associated dropdown is currently displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.RightAlignDropDown">
            <summary>
            Returns or sets whether the dropdown is aligned to the right edge of the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.AccessibleRole">
            <summary>
            Returns the accessible role for the button.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.AfterCloseUp">
            <summary>
            Fired when the dropdown has been closed
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.BeforeDropDown">
            <summary>
            Fired when the dropdown window is about to be displayed
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton">
            <summary>
            Editor button class for displaying a <see cref="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.Control"/> in a dropdown window.
            </summary>
            <remarks>
            <p class="body">The <b>DropDownEditorButton</b> represents an editor button that is 
            capable of displaying a <see cref="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.Control"/> in a separate window.</p>
            <p class="body">The <see cref="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDown"/> method may be used to display the 
            dropdown window while the editor is in edit mode. The <see cref="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.CloseUp"/> method 
            can be used to hide the dropdown window. There is also a static method, <see cref="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.FromControl(System.Windows.Forms.Control)"/>, 
            that may be used to determine the DropDownEditorButton that is displaying a specified control 
            or child control.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.CloseUp">
            <summary>
            Used to close up the dropdown window.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDown">
            <summary>
            Used to display the dropdown window
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.FromControl(System.Windows.Forms.Control)">
            <summary>
            Returns a dropped down <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton"/> that contains the specified control.
            </summary>
            <param name="control">Control to evaluate. May be the control dropped down from the button or a child of that control.</param>
            <returns>The <b>DropDownEditorButton</b> displaying the specified control in a dropdown window or null if the control is not contained in a dropdown from an <b>DropDownEditorButton</b></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.Control">
            <summary>
            Returns or sets the control to dropdown.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> Attempting to set the Control property 
            while the associated dropdown window is displayed will result in 
            an exception.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.IsDroppedDown">
            <summary>
            Indicates if the associated dropdown is currently displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.AutoFocus">
            <summary>
            Returns or sets whether or not the DropDownEditorButton will set focus to the contained control when it is dropped down.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDownEditorButtonControlConverter">
            <summary>
            Type converter used to determine which controls should appear in the type editor for a <b>Control</b> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDownEditorButtonControlConverter.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDownEditorButtonControlConverter"/> class.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.DropDownEditorButton.DropDownEditorButtonControlConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns true if the value is a valid component.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.SpinEditorButton">
            <summary>
            Spin button style editor button.
            </summary>
            <remarks>
            <p class="body">The <b>SpinEditorButton</b> class is an editor button used 
            to provide spin button style functionality. Two or more buttons are displayed 
            depending on the <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonType"/> property. The "Can" properties are 
            used to determine whether the buttons should be enabled or disabled.</p>
            <p class="body">When the spin button is clicked, the <see cref="E:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonClick"/> event is invoked. The 
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs.ButtonType"/> will indicate which button was clicked 
            so that the appropriate action can be taken.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton"/> with the specified key.
            </summary>
            <param name="key">Unique key for the button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.OnSpinButtonClick(Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.CreateUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Used to obtain the uielement that will be used to display the button. 
            </summary>
            <param name="previousElement">Previous uielement or null</param>
            <param name="parentElement">The parent element</param>
            <returns>If the <paramref name="previousElement"/> may be used, that can be returned. Otherwise a new uielement with the specified parent should be returned.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.Clone">
            <summary>
            Used to create a deep copy of the button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Initializes the button with the values from the specified object.
            </summary>
            <param name="button">Button whose values should be copied.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.CreateInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Invoked from the type converter when an instance descriptor is needed to serialize the object.
            </summary>
            <param name="context">Type descriptor context</param>
            <returns>An instance descriptor that can be used to create a new instance of the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.CalculatePreferredSize(Infragistics.Win.UltraWinEditors.EditorButtonInfo)">
            <summary>
            Invoked when the preferred size of button should be calculated.
            </summary>
            <param name="buttonInfo">Provides information that can be used to calculate the size</param>
            <returns>A size structure containing the preferred size for the button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.ResolveAppearance(Infragistics.Win.UIElementButtonState,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the button.
            </summary>
            <param name="state">Current button state</param>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedPropFlags">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.CreateAccessibilityInstance(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject)">
            <summary>
            Creates an accessible object representing the editor button.
            </summary>
            <param name="parent">Parent accessible object</param>
            <returns>An accessible object representing the editor button</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.DoDefaultAction(System.Windows.Forms.AccessibleObject,Infragistics.Win.UltraWinEditors.SpinButtonItem)">
            <summary>
            Invoked when the default action of the accessible object representing the button is invoked.
            </summary>
            <param name="buttonAccessibleObject">Accessible object representing a button instance.</param>
            <param name="item">Indicates which spin button item's action should be performed.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinNextItem">
            <summary>
            Returns or sets when the 'NextItem' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinPreviousItem">
            <summary>
            Returns or sets when the 'PreviousItem' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinNextPage">
            <summary>
            Returns or sets when the 'NextPage' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinPreviousPage">
            <summary>
            Returns or sets when the 'PreviousPage' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinFirst">
            <summary>
            Returns or sets when the 'First' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinLast">
            <summary>
            Returns or sets when the 'Last' spin button is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.Orientation">
            <summary>
            Returns or sets the orientation of the spin buttons
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonType">
            <summary>
            Returns or sets which spin button items are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.UIElementType">
            <summary>
            Returns the type of uielement that is used to represent the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.ButtonStyle">
            <summary>
            Returns or sets the style of the button border.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.AccessibleRole">
            <summary>
            Returns the accessible role for the button.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonClick">
            <summary>
            Fired when the button is clicked
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinEditorButtonAccessibleObject">
            <summary>
            Base accessible object for an Editor button
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinEditorButtonAccessibleObject.#ctor(Infragistics.Win.EmbeddableEditorBase.EmbeddableEditorAccessibleObject,Infragistics.Win.UltraWinEditors.SpinEditorButton)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinEditorButtonAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="button">Associated button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinEditorButtonAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinEditorButtonAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">Direction of the navigation</param>
            <returns>The accessible object based on the specified navigation direction.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.Parent">
            <summary>
            Returns the parent accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.Bounds">
            <summary>
            Returns the location and size of the object represented by the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonItemAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase">
            <summary>
            Abstract base control class for a control that utilizes an <see cref="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase"/> type editor
            </summary>
            <remarks>
            <p class="body">The <b>EditorButtonControlBase</b> is the base control class for editor controls 
            that provide editor button functionality. The editor buttons are accessible via the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/> 
            and <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/> properties and are displayed to the left and right of the edit area respectively.</p>
            <p class="body">The control exposes events corresponding to the current events exposed from the various 
            <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> derived classes.</p>
            <p class="note"><b>Note</b> The events exposed by this control (<see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonClick"/>, <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.BeforeEditorButtonDropDown"/>, etc.) differ from those normally 
            exposed from an editor control in that they will also be fired when the buttons of an externally provided editor instance (e.g. when the editor 
            control is set as the <b>EditorControl</b> of an UltraGrid Column object) are affected. While this deviates from the previous behavior that only 
            the events for the editors displayed by the standalone editor control, it does allow for the events of the externally provided editor to be 
            hooked at design time. The <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> property may be used to determine the source of the event.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeButtonsLeft">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/> should be serialized.
            </summary>
            <returns>True if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/> contains any items</returns>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetButtonsLeft">
            <summary>
            Clears the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/> collection
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeButtonsRight">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/> should be serialized.
            </summary>
            <returns>True if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/> contains any items</returns>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetButtonsRight">
            <summary>
            Clears the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/> collection
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeAppearances">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetAppearances">
            <summary>
            Reset appearances to null
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetImageList">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Invoke this method to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/> property to its default value.</p>
            <p class="body">Once this method is invoked, the <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeImageList"/> method will return False until the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/> property is set again.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeImageList">
            <summary>
            <p class="body">Returns a Boolean value that determines whether the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/> property is set to its default value.</p>
            </summary>
            <remarks>
            <p class="body">Returns True if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList"/> property is not set to its default value; otherwise, it returns False.</p>
            <p class="body">Invoke the <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetImageList"/> method to reset this property to its default value.</p>
            </remarks> 
            <returns>Boolean indicating whether the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetImageTransparentColor">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Invoke this method to reset the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor"/> property to its default value.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShouldSerializeImageTransparentColor">
            <summary>
            <p class="body">Returns a Boolean value that determines whether the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor"/> property is set to its default value.</p>
            </summary>
            <remarks>
            <p class="body">Returns True if the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor"/> property is not set to its default value; otherwise, it returns False.</p>
            <p class="body">Invoke the <see cref="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ResetImageTransparentColor"/> method to reset this property to its default value.</p>
            </remarks> 
            <returns>Boolean indicating whether the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnEditorCreated(Infragistics.Win.EmbeddableEditorBase,System.Boolean)">
            <summary>
            Invoked when the control's editor has been created.
            </summary>
            <param name="editor">Editor created for the control</param>
            <param name="controlEditor">True if the editor is that used by the control. False if it is the editor provided to controls requesting the editor via the IProvidesEmbeddableEditor interface.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnEditorPropertyChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on the editor has changed.
            </summary>
            <param name="propChangeInfo">Provides information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.CloseEditorButtonDropDowns">
            <summary>
            Closes any <see cref="T:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase"/> instances that are currently dropped down.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new accessibility object for the control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnEditorAccessibleEventOccurred(System.Windows.Forms.AccessibleEvents)">
            <summary>
            Used to notify accessible clients that an accessible event for the editor has occurred.
            </summary>
            <param name="eventId">Enumeration indicating the event that occurred.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnGotFocus(System.EventArgs)">
            <summary>
            Used to invoke the <b>GotFocus</b> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnBeforeEditorButtonCheckStateChanged(Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.BeforeEditorButtonCheckStateChanged"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnAfterEditorButtonCheckStateChanged(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.AfterEditorButtonCheckStateChanged"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnEditorButtonClick(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnInitializeEditorButtonCheckState(Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.InitializeEditorButtonCheckState"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnEditorSpinButtonClick(Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorSpinButtonClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnBeforeEditorButtonDropDown(Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.BeforeEditorButtonDropDown"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.OnAfterEditorButtonCloseUp(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.AfterEditorButtonCloseUp"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.InternalEditor">
            <summary>
            Returns the control's editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.HasInternalEditor">
            <summary>
            Indicates if the editor provided to an external control has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ExternalEditor">
            <summary>
            Returns the editor provided to an external control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.HasExternalEditor">
            <summary>
            Indicates if the editor provided to an external control has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsLeft">
            <summary>
            Returns a collection of editor buttons displayed on the left side of the edit area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ButtonsRight">
            <summary>
            Returns a collection of editor buttons displayed on the right side of the edit area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorOwner">
            <summary>
            Returns the editor owner used by the control to provide information to the internal editor instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ShowInkButton">
            <summary>
            Determines when to show the Ink Button
            </summary>
            <remarks>
            This property determines when to show the Ink Button
            </remarks>		
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.Appearances">
            <summary>
            A collection of all the Appearance objects created for use with this control.
            </summary>
            <remarks>
            <p class="body">The Appearances collection is used to contain Appearance objects that you have created and added to the control as pre-defined formatting templates. It does not represent a collection of all the Appearance objects that exist in the control. The intrinsic Appearance objects that are stored by objects such as the UltraGridBand, UltraGridRow, UltraGridCell are not included in the grid's Appearances collection.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageList">
            <summary>
            Returns or sets the ImageList associated with the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.ImageTransparentColor">
            <summary>
            Returns or sets the color that will be masked out of the image displayed by the control.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonClick">
            <summary>
            Invoked when an editor button is clicked
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorSpinButtonClick">
            <summary>
            Invoked when an spin editor button is clicked
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.AfterEditorButtonCloseUp">
            <summary>
            Invoked when a dropdown editor button has closed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.BeforeEditorButtonDropDown">
            <summary>
            Invoked before a dropdown editor button has been displayed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.InitializeEditorButtonCheckState">
            <summary>
            Invoked when the check state of a state editor button for an element should be initialized.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.BeforeEditorButtonCheckStateChanged">
            <summary>
            Invoked before the CheckState of a StateEditorButton has been changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.AfterEditorButtonCheckStateChanged">
            <summary>
            Invoked after the CheckState of a StateEditorButton has been changed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.DataFilter">
            <summary>
            If different than null, specifies custom data filter used by the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject">
            <summary>
            Accessible object representing an <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonControlBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject"/>
            </summary>
            <param name="ownerControl">Control which is represented by the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.GetFocused">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.GetSelected">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonControlAccessibleObject.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo">
            <summary>
            Embeddable editor owner class for an <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonControlBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo"/>
            </summary>
            <param name="control">Associated control</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.AccessibilityNotifyClients(System.Object,System.Windows.Forms.AccessibleEvents)">
            <summary>
            Notifies the owner that an accessible event has occurred.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <param name="eventId">Enumeration indicating the event that occurred.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.GetShowInkButton(System.Object)">
            <summary>
            Determines when to show the Ink Button on the editor.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>A ShowInkButton value indicating when the InkButton will be shown.</returns>
            <remarks><p class="body">The default implementation returns <b>ShowInkButton.Default</b>.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.GetEditor(System.Object)">
            <summary>
            Returns the editor for the passed in ownerContext. This is used by the base implementation of EmbeddableOwnerBase.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.GetEditorElement(System.Object)">
            <summary>
            Returns the embeddable uielement associated with a particular object or null if none is available.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <returns>The embeddable uielement representing the specified owner context.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.GetControl(System.Object)">
            <summary>
            Returns the owner's control. 
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The owner's control. This is used e.g. to re-parent the edit control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.IsEnabled(System.Object)">
            <summary>
            Returns whether the value is enabled for editing.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>True if the value is enabled for editing.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.OnEditorMouseDown(Infragistics.Win.EmbeddableUIElementBase,Infragistics.Win.EmbeddableMouseDownEventArgs)">
            <summary>
            The editor calls this method whenever any of its embeddable elements gets a mouse down.
            </summary>
            <param name="embeddableElem"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.EnterEditModeOnClick(System.Object)">
            <summary>
            If true is returned, the editor will enter edit mode on either
            MouseDown or MouseUp, depending on the nature of the editor
            </summary>
            <param name="ownerContext">The owner context</param>
            <returns>The default implemenation returns true</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonControlBase.EditorButtonOwnerInfo.DesignMode">
            <summary>
            Returns true if in design mode, false otherwise.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonUIElement">
            <summary>
            UIElement for an <see cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.ScrollButtonUIElement">
            <summary>
            Element that behaves like a scrollbar button.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.ScrollButton)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="scrollButtonType"><see cref="T:System.Windows.Forms.ScrollButton"/> type</param>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.ScrollButton,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="scrollButtonType"><see cref="T:System.Windows.Forms.ScrollButton"/> type</param>
            <param name="autoFireRepeatInterval">int millisecond delay before next hit is fired</param>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="scrollButtonType"><see cref="T:System.Windows.Forms.ScrollButton"/> type</param>
            <param name="autoFireRepeatInterval">int millisecond delay before next hit is fired</param>
            <param name="initialAutoRepeatDelay">initial delay before autorepeat</param>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the button released
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the dropdown button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnCaptureAborted">
            <summary>
            Overriden. Cancels the timer if capture is aborted.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.Initialize(System.Windows.Forms.ScrollButton,System.Int32,System.Int32)">
            <summary>
            Reinitializes this <see cref="T:Infragistics.Win.ScrollButtonUIElement"/>.
            </summary>
            <param name="scrollButtonType">The new value for the <see cref="P:Infragistics.Win.ScrollButtonUIElement.ScrollButtonType"/> property.</param>
            <param name="autoFireRepeatInterval">The delay in milliseconds before the next auto repeat 'hit' occurs.</param>
            <param name="initialAutoRepeatDelay">The new value for the <see cref="P:Infragistics.Win.ScrollButtonUIElement.InitialAutoRepeatDelay"/> property.</param>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Invoked when the element has been clicked twice within the double click threshold
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollButtonUIElement.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.AutoScrollEnabled">
            <summary>
            Returns or sets whether the button acts as a repeatable button.
            </summary>
            <remarks>
            <p class="body">When set to <b>true</b>, the default value, the button will fire the initial click when the button is pressed down and fires at the specified interval thereafter until the mouse is release. When <b>false</b>, the auto repeat logic is bypassed and the button will act as a standard button element.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.DrawFilledScrollArrow">
            <summary>
            Gets/sets whether the scroll arrow should be filled when rendered.
            </summary>
            <remarks>If this is set to false, only the arrow's outline is rendered.</remarks>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.DrawsImageBackground">
            <summary>
            Determines whether the element can render an image background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.BaseArrowSizeOnSystemSize">
            <summary>
            Indicates if the arrow indicator for the scroll button should be limited to the
            system's scroll arrow size.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.CancelCaptureOnEscape">
            <summary>
            Overridden. Scroll buttons do not cancel capture when pressing escape.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.AutoRepeatDelay">
            <summary>
            Gets/sets the delay between notifications when holding down the scroll button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.PriorityScrolling">
            <summary>
            Determines whether callbacks made during a scroll occur synchronously or asynchronously.
            </summary>
            <value>
            When true, callbacks during a scroll operation occur synchronously with the control's thread.
            </value>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.InitialAutoRepeatDelay">
            <summary>
            Gets/sets the initial delay between pressing down the button and starting the auto repeat cycle.
            </summary>
            <remarks>During the auto repeat cycle, the button click will be fired while the mouse is pressed and over the button at intervals defined by the AutoRepeatDelay.</remarks>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.ScrollButtonType">
            <summary>
            Gets/sets the type of this <see cref="T:Infragistics.Win.ScrollButtonUIElement"/>, for example, Up, Down, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ScrollButtonUIElement.AutoScrollOnMouseEnter">
            <summary>
            Indicates if the element should automatically scroll when the mouse hovers over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnButtonPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on the associated button has changed.
            </summary>
            <param name="propChangeInfo">Provides information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.ButtonClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
            <returns>True to prevent the base implementation from being invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnCheckStateChange">
            <summary>
            Invoked when the checked state of the button changes other than when it is initialized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draws the button's borders
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the dropdown button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <remarks>
            Since the actual button style is flat when the display style is Office2000 or OfficeXP, we need to override this so the arrow indicator shifts when it is clicked
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element.
            </summary>
            <param name="drawParams">UIElementDrawParams struct providing information regarding the drawing operation.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the element is double clicked
            </summary>
            <param name="adjustableArea">If true the mouse was double-clicked over the adjustable area of the element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Overrides ButtonUIElementBase OnControlFocus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.Button">
            <summary>
            Returns or sets the associated <see cref="T:Infragistics.Win.UltraWinEditors.EditorButton"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.IsButtonStyleMouseActive">
            <summary>
            Indicates if the button area is invalidated when the mouse enters and leaves the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonUIElement.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement">
            <summary>
            UIElement class for the <see cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.SpinButtonUIElement">
            <summary>
            SpinButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.#ctor(System.Windows.Forms.Orientation,Infragistics.Win.UIElement,System.Int32,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>SpinButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="autoRepeatDelay">Interval between click event when holding down the mouse button over the element.</param>
            <param name="initialDelay">Interval before initiating the first autorepeat click.</param>
            <param name="orientation">Orientation of the spin buttons.</param>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.#ctor(System.Windows.Forms.Orientation,Infragistics.Win.UIElement,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Constructor, initializes a new instance of the <b>SpinButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="autoRepeatDelay">Interval between click event when holding down the mouse button over the element.</param>
            <param name="initialDelay">Interval before initiating the first autorepeat click.</param>
            <param name="orientation">Orientation of the spin buttons.</param>
            <param name="spinButtons">Determines which spin buttons are displayed</param>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.ResetSpinButtons">
            <summary>
            Used to recreate the spin buttons based on the orientation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.CreateSpinScrollButton(System.Windows.Forms.ScrollButton,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Invoked when the spin buttons need to be created.
            </summary>
            <param name="direction">Direction of the spin scroll button</param>
            <param name="autoRepeatDelay">Delay before starting the autorepeat</param>
            <param name="initialDelay">Delay between clicks while in autorepeat mode</param>
            <param name="buttonType">Type of spin button being created</param>
            <returns>A new SpinScrollButtonUIElement</returns>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the spin buttons.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.SpinButtonClick(System.Windows.Forms.ScrollButton)">
            <summary>
            Used to notify that the spin button's click has fired.
            </summary>
            <param name="direction">Direction of the spin button.</param>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.CanSpin(System.Windows.Forms.ScrollButton)">
            <summary>
            Used to determine whether a spin button should be disabled during a spin operation and
            when the elements are positioned.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <returns>A boolean indicating whether the button should be enabled or disabled.</returns>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.SpinButtonClick(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to notify that the spin button's click has fired.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="buttonType">Type of spin button</param>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.CanSpin(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to determine whether a spin button should be disabled during a spin operation and
            when the elements are positioned.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="buttonType">Type of spin button</param>
            <returns>A boolean indicating whether the button should be enabled or disabled.</returns>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.DrawThemedSpinButton(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the <see cref="M:Infragistics.Win.SpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)"/> method is invoked to allow the spin button owner to render the individual buttons
            </summary>
            <param name="drawParams">UIElementDrawParams structure</param>
            <returns>True if the draw operation was handled</returns>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.DrawSpinButtonForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the <see cref="M:Infragistics.Win.SpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)"/> method is invoked to allow the spin button owner to render the individual buttons
            </summary>
            <param name="drawParams">UIElementDrawParams structure</param>
            <returns>True if the draw operation was handled</returns>
        </member>
        <member name="M:Infragistics.Win.SpinButtonUIElement.GetContainedElementExtent(System.Int32,System.Int32)">
            <summary>
            Returns the extent of the element to contain within the spin buttons
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.IncrementSpinButton">
            <summary>
            Returns the increment spin button (up for vertical, right for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.DecrementSpinButton">
            <summary>
            Returns the decrement spin button (down for vertical, left for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.IncrementPageSpinButton">
            <summary>
            Returns the increment page spin button (up for vertical, right for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.DecrementPageSpinButton">
            <summary>
            Returns the decrement page spin button (down for vertical, left for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.MinSpinButton">
            <summary>
            Returns the move first button (up for vertical, right for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.MaxSpinButton">
            <summary>
            Returns the move last button (down for vertical, left for horizontal).
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.Orientation">
            <summary>
            Determines the orientation of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.SpinButtonTypes">
            <summary>
            Returns or sets a flagged enumeration indicating the types of spin buttons to display.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinButtonUIElement.ContainedElement">
            <summary>
            Returns the element to contain within the spin buttons
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.#ctor(System.Windows.Forms.Orientation,Infragistics.Win.UIElement,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Constructor, initializes a new instance of the <b>EditorButtonSpinButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="autoRepeatDelay">Interval between click event when holding down the mouse button over the element.</param>
            <param name="initialDelay">Interval before initiating the first autorepeat click.</param>
            <param name="orientation">Orientation of the spin buttons.</param>
            <param name="spinButtons">Determines which spin buttons are displayed</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.OnButtonPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on the associated button has changed.
            </summary>
            <param name="propChangeInfo">Provides information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.SpinButtonClick(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to notify that the spin button's click has fired.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="buttonType">Type of spin button</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.CanSpin(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to determine whether a spin button should be disabled during a spin operation and
            when the elements are positioned.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="buttonType">Type of spin button</param>
            <returns>A boolean indicating whether the button should be enabled or disabled.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.CreateSpinScrollButton(System.Windows.Forms.ScrollButton,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Invoked when the spin buttons need to be created.
            </summary>
            <param name="direction">Direction of the spin scroll button</param>
            <param name="autoRepeatDelay">Delay before starting the autorepeat</param>
            <param name="initialDelay">Delay between clicks while in autorepeat mode</param>
            <param name="buttonType">Type of spin button being created</param>
            <returns>A new SpinScrollButtonUIElement</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.Button">
            <summary>
            Returns or sets the associated <see cref="T:Infragistics.Win.UltraWinEditors.SpinEditorButton"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the spin buttons.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement">
            <summary>
            Scroll button item for the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.SpinScrollButtonUIElement">
            <summary>
            Scroll buttons for the spin button uielement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.#ctor(Infragistics.Win.SpinButtonUIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Constructor, initializes a new instance of the <b>SpinScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="autoRepeatDelay">Delay before initiating auto repeat.</param>
            <param name="initialDelay">Delay before first click.</param>
            <param name="buttonType">Determines the type of spin button displayed</param>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.#ctor(Infragistics.Win.SpinButtonUIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>SpinScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="autoRepeatDelay">Delay before initiating auto repeat.</param>
            <param name="initialDelay">Delay before first click.</param>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.ButtonUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the spin button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.SpinScrollButtonUIElement.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the UIElement.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the UIElement.</returns>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.ButtonStyle">
            <summary>
            Determines the style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.Direction">
            <summary>
            Returns the direction of the scroll spin button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.BaseArrowSizeOnSystemSize">
            <summary>
            Indicates if the scroll arrow should be limited to the system's scroll arrow size.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.SpinButtonType">
            <summary>
            Returns or sets the type of spin button that the scroll button represents.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object that represents the element or its associated object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SpinScrollButtonUIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Constructor, initializes a new instance of the <b>EditorButtonSpinScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="autoRepeatDelay">Delay before initiating auto repeat.</param>
            <param name="initialDelay">Delay before first click.</param>
            <param name="buttonType">Determines the type of spin button displayed</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonSpinButtonUIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>EditorButtonSpinScrollButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="autoRepeatDelay">Delay before initiating auto repeat.</param>
            <param name="initialDelay">Delay before first click.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the element is double clicked
            </summary>
            <param name="adjustableArea">If true the mouse was double-clicked over the adjustable area of the element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Overrides ButtonUIElementBase OnControlFocus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonSpinScrollButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overridden. Draws the button borders
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs">
            <summary>
            Event arguments class for an event involving a single <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Button">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> associated with the event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context">
            <summary>
            Returns an object that provides some information about where the button is being used.
            </summary>
            <remarks>
            <p class="body">Since the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> may hosted within a single standalone editor control (such as 
            an <b>UltraTextEditor</b> or used by a control that hosts editors (e.g. UltraGrid), the event may be invoked from 
            multiple sources. The <b>Context</b> is used to provide some context about the source of the action. For stand alone 
            controls, the value will usually be null but for external objects, an object identifying the source should be returned. 
            For example, a Cell object should be returned when the button is hosted in an editor in a grid cell.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs">
            <summary>
            Event arguments class for a cancelable event involving a single <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.Button">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> associated with the event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.Context">
            <summary>
            Returns an object that provides some information about where the button is being used.
            </summary>
            <remarks>
            <p class="body">Since the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> may hosted within a single standalone editor control (such as 
            an <b>UltraTextEditor</b> or used by a control that hosts editors (e.g. UltraGrid), the event may be invoked from 
            multiple sources. The <b>Context</b> is used to provide some context about the source of the action. For stand alone 
            controls, the value will usually be null but for external objects, an object identifying the source should be returned. 
            For example, a Cell object should be returned when the button is hosted in an editor in a grid cell.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs">
            <summary>
            An event argument class for the <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.BeforeDropDown"/> event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs.#ctor(Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase,System.Object,System.Drawing.Point)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs"/> instance
            </summary>
            <param name="button">Dropdown button</param>
            <param name="location">Location where the dropdown will be displayed</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs.#ctor(Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Drawing.Point)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs"/> instance
            </summary>
            <param name="button">Dropdown button</param>
            <param name="location">Location where the dropdown will be displayed</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventArgs.Location">
            <summary>
            Returns or sets the location at which the dropdown will be displayed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs">
            <summary>
            Event argument class for the the <see cref="E:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonClick"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs.#ctor(Infragistics.Win.UltraWinEditors.SpinEditorButton,System.Object,Infragistics.Win.UltraWinEditors.SpinButtonItem)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs"/>
            </summary>
            <param name="button">Spin button associated with the event</param>
            <param name="buttonType">Type of spin button clicked</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs.#ctor(Infragistics.Win.UltraWinEditors.SpinEditorButton,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.UltraWinEditors.SpinButtonItem)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs"/>
            </summary>
            <param name="button">Spin button associated with the event</param>
            <param name="buttonType">Type of spin button clicked</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.SpinButtonClickEventArgs.ButtonType">
            <summary>
            Returns the type of spin button that was clicked.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs">
            <summary>
            Event arguments class for the InitializeCheckState event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs.#ctor(Infragistics.Win.UltraWinEditors.StateEditorButton,System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
            <param name="defaultState">Default state for the checkbox</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs.#ctor(Infragistics.Win.UltraWinEditors.StateEditorButton,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="defaultState">Default state for the checkbox</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventArgs.CheckState">
            <summary>
            Returns or sets the displayed check state of the button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs">
            <summary>
            Event arguments class for the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs.#ctor(Infragistics.Win.UltraWinEditors.StateEditorButton,System.Windows.Forms.CheckState,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="newCheckState">Potential new state of the button.</param>
            <param name="context">Provides information about hosting the button. For example, if the button is in a cell in the grid, this would be a Cell object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs.#ctor(Infragistics.Win.UltraWinEditors.StateEditorButton,System.Windows.Forms.CheckState,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs"/>
            </summary>
            <param name="button">Button associated with the event</param>
            <param name="newCheckState">Potential new state of the button.</param>
            <param name="owner">Owner of the editor whose button event is being invoked.</param>
            <param name="ownerContext">The editor context from the editor.</param>
            <remarks>
            <p class="body">This constructor is used to provide the owner and owner context so 
            that the <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonEventArgs.Context"/> can be obtained only when it is requested. This is 
            for efficiency in case the context is lazily created by the owner.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventArgs.NewCheckState">
            <summary>
            Returns or sets the new <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonEventHandler">
            <summary>
            Delegate for an event involving a single <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.CancelableEditorButtonEventHandler">
            <summary>
            Delegate for a cancelable event involving a single <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.BeforeEditorButtonDropDownEventHandler">
            <summary>
            Delegate for the <see cref="E:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.BeforeDropDown"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.SpinButtonClickEventHandler">
            <summary>
            Delegate for the <see cref="E:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonClick"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.InitializeCheckStateEventHandler">
            <summary>
            Delegate for the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.InitializeCheckState"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.BeforeCheckStateChangedEventHandler">
            <summary>
            Delegate for the <see cref="E:Infragistics.Win.UltraWinEditors.StateEditorButton.BeforeCheckStateChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> instances
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection"/>
            </summary>
            <param name="initialCapacity">Initial capacity for the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.CreateArray">
            <summary>
            Virtual method used by the All 'get' method to create the array it returns.
            </summary>
            <returns>The newly created object array</returns>
            <remarks>This is normally overridden in a derived class to allocate a type safe array.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on an <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> in the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Remove(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="button">Button to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Insert(System.Int32,Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Inserts an <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> at the specified index
            </summary>
            <param name="index">Index at which the item should be inserted</param>
            <param name="button">Button to insert into the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Add(Infragistics.Win.UltraWinEditors.EditorButtonBase)">
            <summary>
            Adds the specified <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> to the collection
            </summary>
            <param name="button">Button that should be added to the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.GetEnumerator">
            <summary>
            IEnumerable interface implementation returns a type safe enumerator
            </summary>
            <returns>The type safe enumerator</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.InitializeFrom(Infragistics.Win.UltraWinEditors.EditorButtonsCollection)">
            <summary>
            Initializes the collection from the specified buttons collection.
            </summary>
            <param name="buttons">Collection from which this collection should copy the buttons.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnCollectionClearing(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.CollectionClearing"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnCollectionCleared(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.CollectionCleared"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnItemAdded(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemAdded"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnItemAdding(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemAdding"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnItemRemoved(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemRemoved"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.OnItemRemoving(Infragistics.Win.UltraWinEditors.EditorButtonEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemRemoving"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            A collection of <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> instances
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.IsReadOnly">
            <summary>
            Returns true if the collection is read-only
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.InitialCapacity">
            <summary>
            Specifies the initial capacity of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> at the specified index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> with the specified key
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.CollectionCleared">
            <summary>
            Invoked when the collection has been cleared
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.CollectionClearing">
            <summary>
            Invoked when the collection is about to be cleared
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemAdded">
            <summary>
            Invoked when an item is added to the collection
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemAdding">
            <summary>
            Invoked before an item is added to the collection
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemRemoved">
            <summary>
            Invoked after an item is removed from the collection
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.ItemRemoving">
            <summary>
            Invoked before an item is removed from the collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.EditorButtonBaseEnumerator">
            <summary>
            Enumerator for the EditorButtonsCollection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.EditorButtonBaseEnumerator.#ctor(Infragistics.Win.UltraWinEditors.EditorButtonsCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.EditorButtonBaseEnumerator"/>
            </summary>
            <param name="buttons">Collection of buttons to enumerate</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonsCollection.EditorButtonBaseEnumerator.Current">
            <summary>
            Type-safe version of Current
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollectionEditor">
            <summary>
            UITypeEditor for the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes	a new <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonsCollectionEditor"/> for the specified type.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonsCollectionEditor.CreateNewItemTypes">
            <summary>
            Creates an array of types that can be created for the collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonInfo">
            <summary>
            Provides information to the editor button
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EditorButtonInfo.OnDispose">
            <summary>
            Invoked when the object has been disposed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonInfo.ImageSize">
            <summary>
            Returns the size images displayed by the edit button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonInfo.Control">
            <summary>
            Returns the owner's control
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonInfo.Owner">
            <summary>
            Returns the editor owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.EditorButtonInfo.OwnerContext">
            <summary>
            Returns the owner context
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonUIElementBase">
            <summary>
            Abstract base uielement class for a <see cref="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase"/> derived class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonUIElementBase.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is responsible for drawing the outer borders).</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonUIElementBase.CreateButtonElements(System.Drawing.Rectangle@,System.Boolean,Infragistics.Win.EmbeddableElementDisplayStyle,System.Drawing.Rectangle,Infragistics.Win.UIElementsCollection)">
            <summary>
            Used to position the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> instances in the <see cref="T:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase"/> collections.
            </summary>
            <param name="workRect">Area available for positioning the buttons</param>
            <param name="addButtonElements">True to add the elements. False will cause the rect to be calculate but the buttons will not be added.</param>
            <param name="displayStyle">DisplayStyle for the buttons</param>
            <param name="clientRect">Area available in the editor for the client elements</param>
            <param name="oldElements">A collection of old uielements</param>
            <returns>The remaining area available for positioning the remaining elements.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle">
            <summary>
            Enumeration of display styles for a <see cref="T:Infragistics.Win.UltraWinEditors.StateEditorButton"/>
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle.CheckBox">
            <summary>
            The state button is displayed as a checkbox
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle.CheckBoxTriState">
            <summary>
            The state button is displayed as a three state checkbox
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle.RadioButton">
            <summary>
            The state button is displayed as a radio/option button.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle.StateButton">
            <summary>
            The state button is displayed as a button that may be checked or unchecked.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.StateButtonDisplayStyle.StateButtonTriState">
            <summary>
            The state button is displayed as a three state button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.SpinButtonItem">
            <summary>
            Enumeration of spin button types
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.PreviousItem">
            <summary>
            Previous item button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.NextItem">
            <summary>
            Next item button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.PreviousPage">
            <summary>
            Previous page button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.NextPage">
            <summary>
            Next page button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.First">
            <summary>
            First page button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.SpinButtonItem.Last">
            <summary>
            Last page button
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId">
            <summary>
            Enumeration of property ids for the <see cref="T:Infragistics.Win.UltraWinEditors.EditorButtonBase"/> properties
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Appearance">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearance"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Appearances">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Appearances"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Enabled">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Enabled"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Width">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Width"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Visible">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.Visible"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.PressedAppearance">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.PressedAppearance"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Text">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.Text"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.ButtonStyle">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButton.ButtonStyle"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.EditorButton">
            <summary>
            EditorButton
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.InitialDelay">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.InitialDelay"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Interval">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.AutoRepeatEditorButton.Interval"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CheckState">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.CheckState"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.DisplayStyle">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.StateEditorButton.DisplayStyle"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.RightAlignDropDown">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.DropDownEditorButtonBase.RightAlignDropDown"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Control">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.DropDownEditorButton.Control"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinNextItem">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinNextItem"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinPreviousItem">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinPreviousItem"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinNextPage">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinNextPage"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinPreviousPage">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinPreviousPage"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinFirst">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinFirst"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.CanSpinLast">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.CanSpinLast"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.Orientation">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.Orientation"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.SpinButtonType">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.SpinEditorButton.SpinButtonType"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.ButtonsLeft">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsLeft"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.ButtonsRight">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EmbeddableEditorButtonBase.ButtonsRight"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.AccessibleName">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.AccessibleName"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.EditorButtonPropertyId.AccessibleDescription">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinEditors.EditorButtonBase.AccessibleDescription"/> property
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextAndDropDownUIElementBase">
            <summary>
            EditorWithTextUIElement class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.OnBeforeDraw">
            <summary>
            Called before the element draw process starts.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionElements(System.Drawing.Rectangle,Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase,Infragistics.Win.UIElementsCollection)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionChildElements"/> method to allow derived classes to insert additional elements.
            </summary>
            <param name="workRect">ByRef current working rectangle. This should be modified to exclude the space used by the elements added.</param>
            <param name="phase">Current phase of elements being added.</param>
            <param name="oldElements">Previous ChildElements collection or null (Nothing in VB) if there was no previous child elements collection.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.CreateDropDownButton(Infragistics.Win.UIElementsCollection)">
            <summary>
            Returns a dropdown button element to be added to the ChildElements collection
            </summary>
            <param name="oldElements">Previous child elements collection</param>
            <returns>A <b>EditorWithTextBaseDropDownButtonUIElement</b> instance.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.OnMouseEnter">
            <summary>
            OnMouseEnter
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.OnMouseLeave">
            <summary>
            OnMouseLeave
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.Infragistics#Win#ISupportsActiveBorders#ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the ButtonAppearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ApplyDefaultButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the displayed buttons
            </summary>
            <param name="appData">ByRef AppearanceData structure to update</param>
            <param name="requestedProps">ByRef enumeration flags indicating the appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.EditorWithText">
            <summary>
            Returns the editor associated with this element
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.InvokePositionElements">
            <summary>
            Determines whether to invoke the <see cref="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionElements(System.Drawing.Rectangle,Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase,Infragistics.Win.UIElementsCollection)"/> routine during the processing of the <see cref="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionChildElements"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.BorderStyle">
            <summary>
            <see cref="T:Infragistics.Win.UIElementBorderStyle"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.Infragistics#Win#ISupportsActiveBorders#DisplayStyle">
            <summary>
            Returns the DisplayStyle provided by the EmbeddableEditorOwnerInfoBase-derived owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.Infragistics#Win#ISupportsActiveBorders#IsMouseOver">
            <summary>
            Returns whether the cursor is currently positioned over the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.Infragistics#Win#ISupportsActiveBorders#BackColor">
            <summary>
            Returns the BackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ButtonAlignment">
            <summary>
            Returns the alignment used to position the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.IncludeDropDownButton">
            <summary>
            Indicates if the dropdown button should be displayed when edit
            elements are displayed for the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase">
            <summary>
            Enumeration of child element phases.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase.BeforeEditElements">
            <summary>
            Occurs before the edit element(s) have been added.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase.AfterEditElements">
            <summary>
            Occurs after the edit element(s) have been added.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase.BeforeTextElement">
            <summary>
            Occurs before the text element has been added.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase.AfterTextElement">
            <summary>
            Occurs after the text elements has been added.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithCombo">
            <summary>
            EditorWithCombo class implementation
            </summary>
            <remarks>
            The EditorWithCombo class uses our existing ValueList class to 
            realize most of its functionality. The editor has a settable ValueList property, 
            which allows an existing ValueList to be assigned to it. Furthermore, the EditorWithCombo 
            class implements the IValueListOwner interface, which makes it a self-contained ValueList 
            in that its "owner" (EditorOwnerInfoBase-derived class) need not implement the IValueListOwner 
            interface to utilize its ValueList-like functionality.
            </remarks>
        </member>
        <member name="T:Infragistics.Win.IValueListOwner">
            <summary>
            Interface that defines the communication layer between an <see cref="T:Infragistics.Win.IValueList"/> interface implementor and the owner that uses it to populate a dropdown list.
            </summary>
            <seealso cref="T:Infragistics.Win.IValueList"/>
            <seealso cref="T:Infragistics.Win.ValueList"/>
        </member>
        <member name="M:Infragistics.Win.IValueListOwner.OnCloseUp">
            <summary>
            Called when the dropdown is closed up
            </summary>
        </member>
        <member name="M:Infragistics.Win.IValueListOwner.OnSelectedItemChanged">
            <summary>
            Called when a swapdropdown item has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.IValueListOwner.OnSelectionChangeCommitted">
            <summary>
            Called when a new item is selected and that change to that item is completed
            </summary>
        </member>
        <member name="M:Infragistics.Win.IValueListOwner.ResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            Resolves the value list's appearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.IValueListOwner.OnListGotFocus">
            <summary>
            Called when the list portion receives focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.Control">
            <summary>
            Returns the owner's control
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.EditControl">
            <summary>
            Returns the active edit control (if any)
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.ImageList">
            <summary>
            Returns the imagelist of the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.IsDropDownList">
            <summary>
            True if this is a drop down list type where
            there is no edit control
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.SizeOfImages">
            <summary>
            Returns the size of images in the image list collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListOwner.ValueLists">
            <summary>
            Returns a ValueList Collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.IMRUListProvider">
            <summary>
            IMRUListProvider interface
            Provides support for an MRU (most recently used) list
            </summary>
        </member>
        <member name="M:Infragistics.Win.IMRUListProvider.OnSelectionChangeCommitted(Infragistics.Win.ValueListItem)">
            <summary>
            Notifies the IMRUListProvider implementor that a selection change was committed
            </summary>
            <param name="item"></param>
            <remarks>
            The IMRUListProvider implementor will typically check its current count of items 
            and determine whether to remove the last one, as well as add the specified item 
            to the top of its list.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.IMRUListProvider.SupportsMRUList">
            <summary>
            Returns whether the implementor supports an MRU (most recently used) list
            </summary>
        </member>
        <member name="P:Infragistics.Win.IMRUListProvider.MRUList">
            <summary>
            Returns the MRU list associated with the implementor
            </summary>
        </member>
        <member name="P:Infragistics.Win.IMRUListProvider.MaxItems">
            <summary>
            Returns the maximum number of items the MRU list will display
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.#ctor">
            <summary>
            Constructor - creates a new instance of the EditorWithCombo class
            </summary>
            <remarks>
            The EditorWithCombo class provides basic ComboBox-like editing functionality
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor - creates a new instance of the EditorWithCombo class
            </summary>
            <param name="defaultOwner">The default owner associated with this editor</param>
            <remarks>
            The EditorWithCombo class provides basic ComboBox-like editing functionality
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IEmbeddableTextBoxListener#OnTextChanged">
            <summary>
            Called by the EmbeddableTextBox when its text has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IEmbeddableTextBoxListener#OnLeave">
            <summary>
            Called by the EmbeddableTextBox class when its OnLeave method is called
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when a keystroke is received
            Since each editor might have different actions to perform for a given
            keystroke, this should be overridden by derived classes
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IEmbeddableTextBoxListener#OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Listens to the embeddableTextBox keyUp messages
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IEmbeddableTextBoxListener#OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called by the EmbeddableTextBox when the mouse wheel is moved
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnAfterEnterEditMode">
            <summary>
            Called after edit mode has been entered. 
            </summary>
            <remarks>The base implementation raises the AfterEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Called before edit mode has been exited
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnAfterExitEditMode">
            <summary>
            Called after edit mode has been exited
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.ComparesByValue(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Returns whether the owner should compare items based on their underlying value rather than their display text.
            </summary>
            <param name="owner">The EmbeddableEditorOwnerBase-derived owner</param>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.ApplyValueAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Applies any appearance associated with the dataVal data value. Base implementation does nothing.
            </summary>
            <param name="appData">The AppearanceData structure to be resolved</param>
            <param name="resolveFlags">Properties to resolve.</param>
            <param name="dataVal">Data value.</param>
            <param name="owner"></param>
            <param name="ownerContext"></param>
            <remarks>
            A derived class can override this method to apply any appearance settings assoicated with
            the data value to this object. For example, an editor that makes use fo value list items can
            apply appearance of the value list item associated with dataVal.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.DisplaysTextBoxWhenInEditMode(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns whether the element will display the EmbeddableTextBox
            when it enters edit mode.
            </summary>
            <param name="element">The element for which the EmbeddableTextBox will be displayed when it enters edit mode.</param>
            <returns>A boolean indeicating whether the EmbeddableTextBox is displayed for the specified element when it enters edit mode.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.ResetMRUList">
            <summary>
            Resets the editor's MRUList by removing all entries
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Automatic data conversions specific to this editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.IsDestinationValueValid(Infragistics.Win.ConversionDirection,System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.String@)">
            <summary>
            Checks validity of converted values.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="destinationVal">Value to check.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">Owner context.</param>
            <param name="message">Additional information in the case of failure.</param>
            <returns>True if the destination value is valid.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.DoCloseUp">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnBeforeDropDown(System.Boolean@)">
            <summary>
            Called before the dropdown has been dropped down. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnAfterDropDown">
            <summary>
            Called after the dropdown has been dropped down. 
            </summary>
            <remarks>The base implementation raises the AfterDropDown event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnAfterCloseUp">
            <summary>
            Called after the dropdown has been closed up. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnDispose">
            <summary>
            Called when the EditorWithText class is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.InternalOnEmbeddableTextBoxListenerKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the actual implementation of the IEmbeddableTextBoxListener.OnKeyDown method
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#OnCloseUp">
            <summary>
            Called when the dropdown is closed up
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#OnSelectedItemChanged">
            <summary>
            Called when the selected item has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#OnSelectionChangeCommitted">
            <summary>
            Called when a new item is selected and that change to that item is completed
            </summary>
            <remarks>
            Note that this is called when the dropdown closes as a result 
            of a item being clicked on (or selected via ENTER key). It seems to be the only notification 
            we get when the list closes. It also gets called when the list is hidden, and a new item is selected
            via the arrow keys, but we won't get that one since the textbox will be getting those keystrokes
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#ResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            Resolves the value list's appearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.InternalResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            InternalResolveValueListAppearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#OnListGotFocus">
            <summary>
            Called when the list portion receives focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
            Handles firing of the SelectionChangeCommitted Event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key down while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnOwnerKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Occurs when the owner gets a key press while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnOwnerKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Occurs when the owner gets a key up while in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData">The key to test</param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.GetElementText(Infragistics.Win.EmbeddableUIElementBase,System.Boolean)">
            <summary>
            Returns the text that the specified element should display
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element</param>
            <param name="ignorePasswordChar">If true, the owner-provided PasswordChar will not be applied to the returned string.</param>
            <returns>The string that should be displayed by the element</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.DisplayTextBox">
            <summary>
            Sets the position, initializes, and displays the EmbeddableTextBox
            </summary>
            <remarks>If the <see cref="P:Infragistics.Win.EditorWithCombo.DropDownStyle"/> is DropDownList, this method does nothing</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.System#ICloneable#Clone">
            <summary>
            Clones the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.OnTextBoxMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the MouseWheel event of the associated embedded 
            textbox is invoked.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="E:Infragistics.Win.EditorWithCombo.SelectionChangeCommitted">
            <summary>
            Fired when a selection change is committed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SupportsValueList">
            <summary>
            Specifies whether the editor supports value list (read-only).
            </summary>
            <remarks>
            <p>If the editor makes use of value list returned by EmbeddableEditorOwnerBase, it returns true.</p>
            <p>The default implemenation returns false.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.ShouldSelectAllTextOnFocus">
            <summary>
            Returns whether text should be selected when the editor receives the input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SupportsAutoSizeEdit">
            <summary>
            Indicates whether the editor supports AutoSizeEdit
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.ValueList">
            <summary>
            Returns the IValueList to be used by this instance of the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.ButtonDisplayStyle">
            <summary>
            Gets/sets the display style for the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.ButtonAlignment">
            <summary>
            Gets/sets the alignment for the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.DropDownStyle">
            <summary>
            Returns whether the edit portion of the control is editable
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SelectedIndex">
            <summary>
            Gets/sets the index of the currently selected item. Available only at runtime.
            </summary>
            <remarks>
            Note that if the dropdown list contains MRU items, the SelectedIndex<br></br>
            property gets/sets the index of the item in the ValueListItems collection, not the dropdown list.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.HasMRUList">
            <summary>
            Gets/sets whether the editor has an MRU (most recently used) list associated with it
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.InternalMRUList">
            <summary>
            Returns the MRU (most recently used) list associated with the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.MRUList">
            <summary>
            Returns the MRU (most recently used) list associated with the editor
            </summary>
            <remarks>
            <p class="body">
            MRUItems must correspond to an item in the editor's <see cref="P:Infragistics.Win.EditorWithCombo.ValueList"/> to have relevance.<br></br>
            When the <b>MRUList</b> property is set, the contents of the array is checked to verify that each items correspond<br></br>
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.MaxMRUItems">
            <summary>
            Gets/sets the maximum number of items that will be displayed in the editor's MRU list
            </summary>
            <remarks>
            When this property is set to a value that is less than the current number of items 
            in the MRUList, all items whose index is >= MaxMRUItems are removed; i.e., this property 
            supercedes the addition of members to the collection
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.DrawMode">
            <summary>
            Gets/sets DrawMode used by the dropdown list
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SetFocusToEditControlOnCloseUp">
            <summary>
            Gets/sets whether the edit control should receive the input focus when the list portion is closed
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.WantsOwnerKeyEvents">
            <summary>
            Returns true when the DropDownStyle property is set to DropDownList 
            so that the editor receives keystrokes such as F4 and the arrow keys
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SupportsDropDown">
            <summary>
            Returns true to indicate that the editor supports a dropdown
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.SupportsSelectableText">
            <summary>
            Returns whether the editor supports selecting text.
            </summary>
            <remarks>Returns true if the DropDownStyle property is DropDown</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.EditorWithTextUIElement">
            <summary>
            Returns the <see cref="P:Infragistics.Win.EditorWithCombo.EditorWithTextUIElement"/> contained by the <see cref="P:Infragistics.Win.EmbeddableEditorBase.ElementBeingEdited"/> or null
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#Control">
            <summary>
            Returns the owner's control
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#EditControl">
            <summary>
            Returns the active edit control (if any)
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#ImageList">
            <summary>
            Returns the imagelist of the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#IsDropDownList">
            <summary>
            True if this is a drop down list type where
            there is no edit control
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#SizeOfImages">
            <summary>
            Returns the size of images in the image list collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IValueListOwner#ValueLists">
            <summary>
            Returns a ValueList Collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IMRUListProvider#SupportsMRUList">
            <summary>
            Returns whether the implementor supports an MRU (most recently used) list
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IMRUListProvider#MRUList">
            <summary>
            Returns the MRU list associated with the implementor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Infragistics#Win#IMRUListProvider#MaxItems">
            <summary>
            Returns the maximum number of items the MRU list will display
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.CanFocus">
            <summary>
            Returns whether the editor can receive input focus while in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.Focused">
            <summary>
            Returns whether the editor currently has input focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.ResetValueListOnExitEditMode">
            <summary>
            Determines whether the valuelist's selected item index should be reset to -1 when exiting edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.InternalValueList">
            <summary>
            Returns the internal ValueList object used by the editor
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EditorWithCombo,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated combo editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.GetSelected">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithCombo.EditorWithComboAccessibleObject.ValueList">
            <summary>
            Returns the valuelist used by the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithComboUIElement">
            <summary>
            EmbeddableEditorUIElement for the <see cref="T:Infragistics.Win.EditorWithCombo"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithComboUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EditorWithCombo,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithComboUIElement.Initialize(Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to initialize the element.
            </summary>
            <param name="owner">An object that implements the EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements the EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithComboUIElement.CreateDropDownButton(Infragistics.Win.UIElementsCollection)">
            <summary>
            Returns a dropdown button element to be added to the ChildElements collection
            </summary>
            <param name="oldElements">Previous child elements collection</param>
            <returns>A <b>EditorWithTextBaseDropDownButtonUIElement</b> instance.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithComboUIElement.ApplyDefaultButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the displayed buttons
            </summary>
            <param name="appData">ByRef AppearanceData structure to update</param>
            <param name="requestedProps">ByRef enumeration flags indicating the appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.EditorWithComboUIElement.ButtonAlignment">
            <summary>
            Returns the alignment used to position the dropdown button
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithComboUIElement.IncludeDropDownButton">
            <summary>
            Indicates if the dropdown button should be displayed when edit
            elements are displayed for the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextUIElement">
            <summary>
            EditorWithTextUIElement class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the background.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.OnBeforeDraw">
            <summary>
            Called before the element draw process starts.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.GetImage(System.String,Infragistics.Win.AppearanceData@)">
            <summary>
            Returns the image this element should display
            </summary>
            <param name="text">The text that will be displayed by the element. Used to find the ValueListItem to use</param>
            <param name="appData">Appearance data structure that contains the owner's resolved appearance.</param>
            <returns>Image</returns>
            <remarks>If the owner provides us with a ValueList, we should use it; otherwise use what the owner returns from ResolveAppearance</remarks>
            <remarks>If the IValueList implementor returns false from ShouldDisplayImage, we return null</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.OnMouseEnter">
            <summary>
            OnMouseEnter
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.OnMouseLeave">
            <summary>
            OnMouseLeave
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextUIElement.Cursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element. By default this just walks up
            the parent chain by returning its parent's cursor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextUIElement.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextUIElement.BorderStyle">
            <summary>
            <see cref="T:Infragistics.Win.UIElementBorderStyle"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextUIElement.IsInEditMode">
            <summary>
            Returns whether this element is the one that is in edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextUIElement.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextDisplayTextUIElement">
            <summary>
            EditorWithTextDisplayTextUIElement class
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextUIElement">
            <summary>
            A text UIElement that exposes a text property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextUIElement.#ctor(Infragistics.Win.UIElement,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parent">The parent element</param>
            <param name="text">The initial text</param>
        </member>
        <member name="M:Infragistics.Win.TextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance
            </summary>
            <param name="appearance"><see cref="T:Infragistics.Win.AppearanceData"/></param>
            <param name="requestedProps"><see cref="T:Infragistics.Win.AppearancePropFlags"/></param>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.TextHAlign">
            <summary>
            Gets/sets the horizontal text alignment
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.TextVAlign">
            <summary>
            Gets/sets the vertical text alignment
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.Text">
            <summary>
            The text string.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.MultiLine">
            <summary>
            Determines if the text is displayed one one or more lines
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.WrapText">
            <summary>
            Determines if the text should be wrapped if it doesn't fit
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.Vertical">
            <summary>
            Determines if the text is displayed vertically
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.Padding">
            <summary>
            Number of pixels in the X dimension (left/right) and
            the Y dimension (above/below) of extra space to leave
            around the text
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.BorderStyle">
            <summary>
            Returns the style of border that will be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.BorderSides">
            <summary>
            Returns flags indicating which borders will be drawn
            </summary>
        </member>
        <member name="P:Infragistics.Win.TextUIElement.HotkeyPrefix">
            <summary>
            Indicates how mnemonics in the text are rendered.
            </summary>
            <value>By default, the text will be rendered as is.</value>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextDisplayTextUIElement.#ctor(Infragistics.Win.UIElement,System.String)">
            <summary>
            EditorWithTextDisplayTextUIElement constructor
            </summary>
            <param name="parentElement"></param>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextDisplayTextUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="adjustableArea"></param>
            <param name="captureMouseForElement"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextDisplayTextUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextDisplayTextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the EditorWithTextDisplayTextUIElement and descendants.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedPropFlags">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextDisplayTextUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            No background is drawn for a text element unless
            DrawsBackColor returns true
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextDisplayTextUIElement.DrawsFocusRect">
            <summary>
            Returns true if this  element needs to draw a focus rect. This should 
            be overridden since the default implementation always returns false. 
            </summary>
            <remarks>Even if this property returns true the focus will not be drawn unless the control has focus.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithTextDisplayTextUIElement.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithTextOverflowIndicatorUIElement">
            <summary>
            Displays an overflow indicator in the <see cref="T:Infragistics.Win.EditorWithText"/> when appropriate.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageUIElement">
            <summary>
            An element that displays a foreground image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElement.#ctor(Infragistics.Win.UIElement,System.Drawing.Image)">
            <summary>
            ImageUIElement constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageUIElement.InitImageElement(System.Drawing.Image)">
            <summary>
            initializes ImageUIElement with image
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElement.Image">
            <summary>
            The Image value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElement.BorderStyle">
            <summary>
            Returns the style of border that will be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageUIElement.BorderSides">
            <summary>
            Returns flags indicating which borders will be drawn
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextOverflowIndicatorUIElement.#ctor(Infragistics.Win.UIElement,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextOverflowIndicatorUIElement.OnDispose">
            <summary>
            Disposes of this element's tooltip.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextOverflowIndicatorUIElement.OnMouseEnter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithTextOverflowIndicatorUIElement.OnMouseLeave">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementAdjustmentRangeParams">
            <summary>
            Used in the call to GetAdjustmentRange for elements that can be sized
            or moved with the mouse
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.maxDeltaLeft">
            <summary>
            Should either be zero or a negative number
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.maxDeltaUp">
            <summary>
            Should either be zero or a negative number
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.maxDeltaDown">
            <summary>
            Should either be zero or a positive number
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.maxDeltaRight">
            <summary>
            Should either be zero or a positive number
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.upDownAdjustmentBar">
            <summary>
            This is the inversion bar used for sizing or moving
            an element up and/or down. The rectangle is 
            usually a horizontal bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementAdjustmentRangeParams.leftRightAdjustmentBar">
            <summary>
            This is the inversion bar used for sizing or moving
            an element left and/or right. The rectangle is 
            usually a vertical bar.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementBorderWidths">
            <summary>
            Returned from call to GetBorderWidths
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementBorderWidths.Left">
            <summary>
            Width of the left border
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementBorderWidths.Top">
            <summary>
            Width of the top border
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementBorderWidths.Right">
            <summary>
            Width of the right border
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementBorderWidths.Bottom">
            <summary>
            Width of the bottom border
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementDrawParams">
            <summary>
            Structure passed around during a drawing operation
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.#ctor(Infragistics.Win.UIElement,Infragistics.Win.DrawCache,System.Drawing.Rectangle,Infragistics.Win.AppearanceData@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="element">The element to draw</param>
            <param name="drawCache">The object that caches resources needed during a drawing operation</param>
            <param name="invalidRect">The invalidate area</param>
            <param name="appearanceData">Appearance data to start with</param>
            <param name="textNeedsClipping">For print runs whether we need to clip the text</param>
            <param name="usesThemes">True if the elements will be allowed to render using the system theme.</param>
            <param name="forceDrawAsFocused">If true, the element will be drawn with a focus rect if DrawsFocusRect is true, regardless of whether its parent control has input focus.</param>
        </member>
        <member name="F:Infragistics.Win.UIElementDrawParams.AppearanceData">
            <summary>
            The appearance data structure for this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.InitUIElement(Infragistics.Win.UIElement,System.Drawing.Rectangle)">
            <summary>
            This method is used internally to initialize the <see cref="T:Infragistics.Win.UIElementDrawParams"/> when rendering a specific element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.GetPen(Infragistics.Win.DrawCache.PenType,System.Drawing.Color)">
            <summary>
            Returns a cached pen of the requested type. This pen should not be disposed
            of. It will be cleaned up eventually when the dispose method of
            this class is called.
            </summary>
            <param name="penType">The type of pen (e.g. solid, dotted, dashed etc.</param>
            <param name="color">The desired color</param>
            <returns>The returned pen (do not dispose)</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawButtonBorders(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Draws button borders around the element.
            </summary>
            <param name="buttonStyle">UIElementButtonStyle</param>
            <param name="buttonState">State of the button.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawButtonBorders(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState,System.Windows.Forms.Border3DSide)">
            <summary>
            Draws button borders around the element.
            </summary>
            <param name="buttonStyle">UIElementButtonStyle</param>
            <param name="buttonState">State of the button.</param>
            <param name="sides">Sides to be rendered</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawButtonBorders(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState,System.Windows.Forms.Border3DSide,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws button borders around the element.
            </summary>
            <param name="buttonStyle">UIElementButtonStyle</param>
            <param name="buttonState">State of the button.</param>
            <param name="sides">Sides to be rendered</param>
            <param name="rect">Rect for the borders.</param>
            <param name="clipRect">Nothing is drawn outside this rect.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawButtonBorders(Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState,System.Windows.Forms.Border3DSide,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws button borders around the element.
            </summary>
            <param name="buttonStyle">UIElementButtonStyle</param>
            <param name="buttonState">State of the button.</param>
            <param name="sides">Sides to be rendered</param>
            <param name="rect">Rect for the borders.</param>
            <param name="clipRect">Nothing is drawn outside this rect.</param>
            <param name="isDefault">True if the button is the default button. This will cause an extra line to be rendered around the button border</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBorders">
            <summary>
            Draws the borders around the current element. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBorders(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Draws borders around the element
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Bit flags indiating which sides to draw</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBorders(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,System.Drawing.Rectangle)">
            <summary>
            Draws borders around the element
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Bit flags indiating which sides to draw</param>
            <param name="rect">The borders are drawn inside this rectangle</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBorders(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws borders around a supplied rect
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Bit flags indiating which sides to draw</param>
            <param name="borderColor">The border color</param>
            <param name="rect">The borders are drawn inside this rectangle</param>
            <param name="clipRect">Nothing is drawn outside of this area</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBorders(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws borders around a supplied rect
            </summary>
            <param name="style">The style of the borders</param>
            <param name="sides">Bit flags indiating which sides to draw</param>
            <param name="borderColor">The border color</param>
            <param name="borderColor3DBase">The base color to use when rendering 3D style borders</param>
            <param name="rect">The borders are drawn inside this rectangle</param>
            <param name="clipRect">Nothing is drawn outside of this area</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBackColor(System.Drawing.Rectangle)">
            <summary>
            Fills back color into a supplied rect (based on the current appearance settings.
            </summary>
            <param name="rect">The rect to fill.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBackColor(Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Fills the specified rect with the backcolor information from the specified appearance data structure.
            </summary>
            <param name="appearance">AppearanceData structure containing the color information to render.</param>
            <param name="rect">Area into which the backcolor should be rendered</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">Indicates whether to use the enabled colors of the <paramref name="appearance"/></param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawBackColor(Infragistics.Win.AppearanceData@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Drawing.Drawing2D.Blend)">
            <summary>
            Fills the specified rect with the backcolor information from the specified appearance data structure.
            </summary>
            <param name="appearance">AppearanceData structure containing the color information to render.</param>
            <param name="rect">Area into which the backcolor should be rendered</param>
            <param name="invalidRect">The area to fill.</param>
            <param name="enabled">Indicates whether to use the enabled colors of the <paramref name="appearance"/></param>
            <param name="blend">Defines a blend pattern for a LinearGradientBrush</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Rect available for the arrow to be rendered.</param>
            <param name="buttonState">State of the button.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Rect available for the arrow to be rendered.</param>
            <param name="offsetSize">Size indicating how much to offset the arrow.</param>
            <param name="baseOnSystemSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
            <param name="isMinMax">Boolean indicating if a line is to be rendered at the top of the arrow (i.e. to indicate first/last or min/max).</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,Infragistics.Win.UIElementButtonState,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Area in which to render the arrow.</param>
            <param name="maxSize">Maximum size to render the arrow.</param>
            <param name="buttonState">State of the button.</param>
            <param name="baseOnSystemScrollBarSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Boolean,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Area in which to render the arrow.</param>
            <param name="maxSize">Maximum size to render the arrow.</param>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <param name="baseOnSystemScrollBarSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
            <param name="isMinMax">Boolean indicating if a line is to be rendered at the top of the arrow (i.e. to indicate first/last or min/max).</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Area in which to render the arrow.</param>
            <param name="maxSize">Maximum size to render the arrow.</param>
            <param name="buttonState">State of the button.</param>
            <param name="buttonStyle">Style of the button.</param>
            <param name="buttonType">Type of button.</param>
            <param name="baseOnSystemScrollBarSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
            <param name="isMinMax">Boolean indicating if a line is to be rendered at the top of the arrow (i.e. to indicate first/last or min/max).</param>
            <param name="outlineOnly">True if only the outline of the arrow should be rendered.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Area in which to render the arrow.</param>
            <param name="maxSize">Maximum size to render the arrow.</param>
            <param name="offsetSize">Size indicating how much to offset the arrow.</param>
            <param name="baseOnSystemScrollBarSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
            <param name="isMinMax">Boolean indicating if a line is to be rendered at the top of the arrow (i.e. to indicate first/last or min/max).</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawArrowIndicator(System.Windows.Forms.ScrollButton,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the arrow for a scroll button, dropdown button, etc.
            </summary>
            <param name="direction">Direction of the arrow to render.</param>
            <param name="rect">Area in which to render the arrow.</param>
            <param name="maxSize">Maximum size to render the arrow.</param>
            <param name="offsetSize">Size indicating how much to offset the arrow.</param>
            <param name="baseOnSystemScrollBarSize">Boolean indicating if the size should be limited to the size of the scroll bars.</param>
            <param name="isMinMax">Boolean indicating if a line is to be rendered at the top of the arrow (i.e. to indicate first/last or min/max).</param>
            <param name="outlineOnly">True if only the outline of the arrow should be rendered.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Drawing.Imaging.ImageAttributes,System.Boolean,System.Boolean,System.Drawing.Color,System.Byte,System.Byte,System.Byte)">
            <summary>
            Renders the specified image on the graphics object.
            </summary>
            <param name="image">Image to render</param>
            <param name="rect">Rectangle into which the image should be rendered</param>
            <param name="scaled">True if the image should be scaled or false to use the appearance image horizontal and vertical alignments</param>
            <param name="imgAttributes">ImageAttributes instance or null</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
            <param name="drawBorderShadow">If true, a shadow is drawn around the image</param>
            <param name="shadowColor">The base color of the border shadow</param>
            <param name="startAlpha">The alpha level of the start of the border shadow</param>
            <param name="endAlpha">The alpha level of the end of the border shadow</param>
            <param name="shadowDepth">The depth of the border shadow</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Drawing.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Renders the specified image on the graphics object.
            </summary>
            <param name="image">Image to render</param>
            <param name="rect">Rectangle into which the image should be rendered</param>
            <param name="scaled">True if the image should be scaled or false to use the appearance image horizontal and vertical alignments</param>
            <param name="imgAttributes">ImageAttributes instance or null</param>
            <param name="maintainAspectRatio">If scaled is true will maintain original aspect ratio.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the specified image on the graphics object.
            </summary>
            <param name="image">Image to render</param>
            <param name="rect">Rectangle into which the image should be rendered</param>
            <param name="scaled">True if the image should be scaled or false to use the appearance image horizontal and vertical alignments</param>
            <param name="imgAttributes">ImageAttributes instance or null</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Renders the specified image on the graphics object.
            </summary>
            <param name="image">Image to render</param>
            <param name="destRect">Rectangle into which the image should be rendered</param>
            <param name="srcRect">Portion of the image to render</param>
            <param name="imgAttributes">ImageAttributes instance or null</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawImageBackground">
            <summary>
            Renders the <see cref="P:Infragistics.Win.AppearanceData.ImageBackground"/> for the current <see cref="P:Infragistics.Win.UIElementDrawParams.Element"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.GetAlphaBlendColor(System.Drawing.Color)">
            <summary>
            Returns a color with a modified Alpha channel based on whether AlphaBlending is
            supported and the current DrawPhaseAlphaLevel
            </summary>
            <param name="color">Color to modify</param>
            <returns>A <see cref="T:System.Drawing.Color"/> struct where the alpha channel (<see cref="P:System.Drawing.Color.A"/>) has been
            re-set based on the current draw phase' alpha level</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawFocusRectangle">
            <summary>
            Draws a focus rectangle within the bounds of the element's borders.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawFocusRectangle(System.Drawing.Rectangle)">
            <summary>
            Draws a focus rectangle at the specified location.
            </summary>
            <param name="rect">Location where the focus rect should be rendered</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawFocusRectangle(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a focus rectangle at the specified location.
            </summary>
            <param name="rect">Location where the focus rect should be rendered</param>
            <param name="foreColor">The forecolor of the area to draw the focus rect upon</param>
            <param name="backColor">The backcolor of the area to draw the focus rect upon</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.CreateSolidBrush(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:System.Drawing.SolidBrush"/> with specified color adjusted based on the alpha settings
            </summary>
            <param name="color">Color to adjust based on the AlphaBlend settings that is used to create the brush</param>
            <returns>A <b>SolidBrush</b> instance whose color is based upon the specified color</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.CreateHatchBrush(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> with the specified colors adjusted based on the alpha settings
            </summary>
            <param name="hatchStyle">Style of hatch brush to create</param>
            <param name="foreColor">Forecolor of the brush. The color is adjusted based on the AlphaBlendMode and current <see cref="P:Infragistics.Win.UIElementDrawParams.DrawPhaseAlphaLevel"/></param>
            <param name="backColor">Backcolor of the brush. The color is adjusted based on the AlphaBlendMode and current <see cref="P:Infragistics.Win.UIElementDrawParams.DrawPhaseAlphaLevel"/></param>
            <returns>A <b>HatchBrush</b> whose colors are based upon the specified colors</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawCheckBox(System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a checkbox into the <see cref="P:Infragistics.Win.UIElementDrawParams.Graphics"/> object using the current alphablend settings.
            </summary>
            <param name="rect">Rectangle where the checkbox should be rendered</param>
            <param name="buttonState">State of the checkbox</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawMixedCheckBox(System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a checkbox into the <see cref="P:Infragistics.Win.UIElementDrawParams.Graphics"/> object using the current alphablend settings.
            </summary>
            <param name="rect">Rectangle where the tristate checkbox should be rendered</param>
            <param name="buttonState">State of the checkbox</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawRadioButton(System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a radion/option button into the <see cref="P:Infragistics.Win.UIElementDrawParams.Graphics"/> object using the current alphablend settings.
            </summary>
            <param name="rect">Rectangle where the option button should be rendered</param>
            <param name="buttonState">State of the option button</param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawString(System.Drawing.Rectangle,System.String,System.Boolean,System.Boolean)">
            <summary>
            Draws textToRender in specified rectangle.
            </summary>
            <param name="destRect"></param>
            <param name="textToRender"></param>
            <param name="multiline"></param>
            <param name="wrapText"></param>
        </member>
        <member name="M:Infragistics.Win.UIElementDrawParams.DrawButtonRegion(Infragistics.Win.ImageRegion,Infragistics.Win.UIElementButtonStyle,Infragistics.Win.UIElementButtonState,System.Boolean)">
            <summary>
            Renders button borders using the specified <see cref="T:Infragistics.Win.ImageRegion"/>
            </summary>
            <param name="imageRegion">ImageRegion object that provides the region from which the borders are rendered</param>
            <param name="buttonStyle">Button style to render</param>
            <param name="buttonState">State of the button</param>
            <param name="isDefault">True if the button is the default button. This will generate an extra border around the button region</param>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.DrawPhase">
            <summary>
            The current phase of the drawing operation (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.Font">
            <summary>
            Returns a font
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.IsPrint">
            <summary>
            True if we are drawing to a printer (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.IsAlphaBlendingSupported">
            <summary>
            True if alpha blending is supported (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.UsesThemes">
            <summary>
            True if the themes are supported (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.ForceDrawAsFocused">
            <summary>
            True if the element draws a focus rect even when its parent control does not have the input focus (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.Graphics">
            <summary>
            The graphics object (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.DrawPhaseAlphaLevel">
            <summary>
            Returns the alpha level that is operational based on the
            current phase of the drawing operation and the settings
            in AppearanceData. This will return a value between 0 and
            255 (0 is transparent, 255 is completely opague). This
            property is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.BackBrush">
            <summary>
            The brush used to draw the back color (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.TextBrush">
            <summary>
            The brush used to draw text (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.ControlElement">
            <summary>
            The main control, top level element (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.Element">
            <summary>
            The UIElement (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.InvalidRect">
            <summary>
            The intersection of the original invalid rect, this element's rect and
            all of its parent rects (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementDrawParams.AlphaBlendMode">
            <summary>
            Returns the current <see cref="P:Infragistics.Win.UIElementDrawParams.AlphaBlendMode"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementsCollection">
            <summary>
            A collection of UIElements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.#ctor(System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>UIElementsCollection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Add(Infragistics.Win.UIElement)">
            <summary>
            Adds the element to the collection.
            </summary>
            <param name="element">Element to add to collection.</param>
            <returns>The index of the added element</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Add(System.Object)">
            <summary>
            Adds the element to the collection
            </summary>
            <param name="value">Element to add to collection.</param>
            <returns>The index of the added element</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Insert(System.Int32,Infragistics.Win.UIElement)">
            <summary>
            Inserts the element to the collection
            </summary>
            <param name="index">Index of insertion point.</param>
            <param name="element">Element to insert into the collection.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the element to the collection
            </summary>
            <param name="index">Index of insertion point.</param>
            <param name="value"><see cref="T:System.Object"/>UIElement to add to collection[ must be UIElement]</param>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.CopyTo(Infragistics.Win.UIElement[],System.Int32)">
            <summary>
            Copies the elements of the collection into the array.
            </summary>
            <param name="elementArray">The array to receive the elements.</param>
            <param name="arrayIndex">The array index to begin inserting the elements.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Remove(Infragistics.Win.UIElement)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="element">The element to remove.</param>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.IndexOf(Infragistics.Win.UIElement)">
            <summary>
            Gets the index of the element in the collection.
            </summary>
            <param name="element">The element to check.</param>
            <returns>The index in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.Contains(Infragistics.Win.UIElement)">
            <summary>
            Sees if the element is in the collection.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if the element is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns><see cref="T:Infragistics.Win.UIElementsCollection.UIElementEnumerator"/></returns>
        </member>
        <member name="P:Infragistics.Win.UIElementsCollection.Item(System.Int32)">
            <summary>
            Hides the ArrayList's indexer so that the
            collection can expose a type safe indexer
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementsCollection.UIElementEnumerator">
            <summary>
            Inner class implements IEnumerator interface
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.UIElementEnumerator.MoveNext">
            <summary>
            IEnumerator.MoveNext
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementsCollection.UIElementEnumerator.Reset">
            <summary>
            IEnumerator.Reset
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementsCollection.UIElementEnumerator.Current">
            <summary>
            Type safe version of Current
            </summary>
        </member>
        <member name="P:Infragistics.Win.UIElementsCollection.UIElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            IEnumerator.Current
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableClickEventHandler">
            <summary>
            Event handler used for a click on an embeddable element event
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableMouseEventHandler">
            <summary>
            Event handler used for a mouse event over an embeddable element
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableMouseDownEventHandler">
            <summary>
            Event handler used for a mouse down event over an embeddable element
            </summary>
        </member>
        <member name="T:Infragistics.Win.BeforeExitEditModeEventHandler">
            <summary>
            Event handler used for a mouse event over an embeddable element
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableClickEventArgs">
            <summary>
            Event parameters used for when an event is raised by an embeddable element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableClickEventArgs.#ctor(Infragistics.Win.EmbeddableUIElementBase,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableClickEventArgs.EmbeddableElement">
            <summary>
            The EmbeddableUIElementBase derived object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableClickEventArgs.IsButton">
            <summary>
            Returns true if the element clicked on is a button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableMouseEventArgs">
            <summary>
            Event parameters used for when an event is raised by an embeddable element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableMouseEventArgs.#ctor(Infragistics.Win.EmbeddableUIElementBase,System.Boolean,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableMouseEventArgs.MouseArgs">
            <summary>
            The mouse arguments.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableMouseDownEventArgs">
            <summary>
            Event parameters used for when an event is raised by an embeddable element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableMouseDownEventArgs.#ctor(Infragistics.Win.EmbeddableUIElementBase,System.Boolean,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.EmbeddableMouseDownEventArgs"/> class
            </summary>
            <param name="embeddableElement">The EmbeddableUIElementBase-derived element raising the MouseDOwn event</param>
            <param name="isButton">If true, listeners should react as if the element that was clicked is a button.</param>
            <param name="mouseArgs">The underlying mouse event arguments.</param>
            <param name="eatMessage">Determines whether default processing will be bypassed; return true to bypass default processing.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableMouseDownEventArgs.#ctor(Infragistics.Win.EmbeddableUIElementBase,System.Boolean,System.Windows.Forms.MouseEventArgs,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.EmbeddableMouseDownEventArgs"/> class
            </summary>
            <param name="embeddableElement">The EmbeddableUIElementBase-derived element raising the MouseDOwn event</param>
            <param name="isButton">If true, listeners should react as if the element that was clicked is a button.</param>
            <param name="mouseArgs">The underlying mouse event arguments.</param>
            <param name="eatMessage">Determines whether default processing will be bypassed; return true to bypass default processing.</param>
            <param name="notifyParentElement">Determines whether the parent element of the specified embeddableElement will be notified of the MouseDown. Applicable only when eatMessage is false.</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableMouseDownEventArgs.EatMessage">
            <summary>
            Indicates whether to eat the message or not.
            When set to true, the EmbeddableUIElementBase-derived element will return true from its <b>OnMouseDown</b> method, causing default mouse processing to be bypassed for ancestor elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableMouseDownEventArgs.NotifyParentElement">
            <summary>
            Determines whether the parent element will receive a notification when the 
            EmbeddableUIElementBase-derived element's OnMouseDown method is called.
            </summary>
            <remarks>
            <p class="body">By default, <see cref="T:Infragistics.Win.EmbeddableUIElementBase"/>-derived elements do <b>not</b> pass the MouseDown notification to their parent element. When the <b>NotifyParentElement</b> property is set to true, and the <see cref="P:Infragistics.Win.EmbeddableMouseDownEventArgs.EatMessage"/> property is false, the parent element's <see cref="M:Infragistics.Win.UIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)"/> method is called.</p>
            <p class="note">This property is only applicable when the <see cref="P:Infragistics.Win.EmbeddableMouseDownEventArgs.EatMessage"/> property is false.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.EmbeddableMouseDownEventArgs.EatMessage"/>
        </member>
        <member name="T:Infragistics.Win.BeforeExitEditModeEventArgs">
            <summary>
            Event parameters used for when an event is raised by an embeddable element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.BeforeExitEditModeEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.BeforeExitEditModeEventArgs.ApplyChanges">
            <summary>
            Returns true if the changes made while in edit mode should be applied (read-only).
            </summary>
            <remarks>This property will return false if, for example, the user pressed the escape key to exit exit mode.</remarks>
        </member>
        <member name="T:Infragistics.Win.IProvidesEmbeddableEditor">
            <summary>
            Implemented by a control that exposes an embeddable editor
            </summary>
            <seealso cref="T:Infragistics.Win.EmbeddableEditorBase"/>
        </member>
        <member name="P:Infragistics.Win.IProvidesEmbeddableEditor.Editor">
            <summary>
            The object that implements the IEmbeddableEditor interface (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISupportsAutoSize">
            <summary>
            Interface that an editor implements to support auto size edit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsAutoSize.AutoSize">
            <summary>
            Gets or sets the whether the editor should autosize. Default should be false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsAutoSize.StartWidth">
            <summary>
            Gets or sets the starting width of the edit control. Editor sets its underlying control's width to this width when going into edit mode. If this is 0, then it should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsAutoSize.StartHeight">
            <summary>
            Gets or sets the starting height of the edit control. Editor sets its underlying control's height to this height when going into edit mode. If this is 0, then it should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsAutoSize.MaxWidth">
            <summary>
            Gets or sets the max width the edit control can be resized to. If it's 0, then it should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISupportsAutoSize.MaxHeight">
            <summary>
            Gets or sets the max height the edit control can be resized to. If it's 0, then it should be ignored.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableColorPickerUIElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableColorPickerUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableColorPickerUIElement.GetColorName(System.Drawing.Color)">
            <summary>
            Translates Color to string.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableColorPickerUIElement.OnDispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableColorPickerUIElement.PositionElements(System.Drawing.Rectangle,Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase,Infragistics.Win.UIElementsCollection)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionChildElements"/> method to allow derived classes to insert additional elements.
            </summary>
            <param name="workRect">ByRef current working rectangle. This should be modified to exclude the space used by the elements added.</param>
            <param name="phase">Current phase of elements being added.</param>
            <param name="oldElements">Previous ChildElements collection or null (Nothing in VB) if there was no previous child elements collection.</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableColorPickerUIElement.ColorBoxUIElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableColorPickerUIElement.InvokePositionElements">
            <summary>
            Determines whether to invoke the <see cref="M:Infragistics.Win.EmbeddableColorPickerUIElement.PositionElements(System.Drawing.Rectangle,Infragistics.Win.EditorWithTextAndDropDownUIElementBase.ChildElementPhase,Infragistics.Win.UIElementsCollection)"/> routine during the processing of the <see cref="M:Infragistics.Win.EditorWithTextAndDropDownUIElementBase.PositionChildElements"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableImageRenderer">
            <summary>
            Summary description for EmbeddableImageRenderer.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.Focus">
            <summary>
            Sets input focus to the editor.
            </summary>
            <returns>Returns true if the editor successfully took focus.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.CanEditType(System.Type)">
            <summary>
            Returns false since the image renderer does not support editing.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The type to test.</param>
            <returns>Returns true if the type can be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="includeBorders">If true will include the borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns false since the image renderer does not support editing.
            </summary>
            <param name="keyDataArg"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.OnDispose">
            <summary>
            Called when the editor is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.OnBeforeEnterEditMode(System.Boolean@)">
            <summary>
            Called before edit mode has been entered. 
            </summary>
            <param name="cancel">Set to true to cancel the operation.</param>
            <remarks>The base implementation raises the BeforeEnterEditMode event.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Object whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.CanFocus">
            <summary>
            Returns false since the image renderer does not support editing and thus does not get focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.Focused">
            <summary>
            Returns false since the image renderer does not support editing and does not get focus.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.Value">
            <summary>
            Always throws NotSupportedException since the image renderer does not support editing.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.IsValid">
            <summary>
            Returns true if the edited value is valid (read-only).
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.SupportsSelectableText">
            <summary>
            Returns false since the image renderer does not support editing.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.BorderShadowColor">
            <summary>
            Gets or Sets the border shadow's base color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.BorderShadowDepth">
            <summary>
            Gets or Sets the depth of the border shadow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.DrawBorderShadow">
            <summary>
            Gets or Sets a value indicating whether a border shadow will be drawn around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.MaintainAspectRatio">
            <summary>
            Gets or Sets a value indiciating whether the aspect ratio of the image should be 
            maintained when scaling.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.ScaleImage">
            <summary>
            Specifies how to scale the images.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.TransparentColor">
            <summary>
            Gets/sets the transparent color. This color will be mapped to the back color
            when drawing images.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.DefaultImage">
            <summary>
            Gets/sets the default image. If an image can't be constructed from the data supplied by 
            the owner, then this image will be drawn.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableImageRenderer.EmbeddableImageRendererAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRenderer.EmbeddableImageRendererAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableImageRenderer,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.EmbeddableImageRenderer.EmbeddableImageRendererAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated image editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.EmbeddableImageRendererAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRenderer.EmbeddableImageRendererAccessibleObject.Value">
            <summary>
            Returns the text of the masked edit.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableImageRendererUIElement">
            <summary>
            Embeddable ui element for the EmbeddableImageRenderer.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.GetContext(System.Type,System.Boolean)">
            <summary>
            Returns an object of requested type that relates to the element or null.  
            </summary>
            <param name="type">The requested type or null to pick up default context object. </param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Overridden method. Initialzes the appearance used by this element.
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.PositionChildElements">
            <summary>
            Creates the child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.OnBeforeDraw">
            <summary>
            A virtual method that gets called before the element draw process starts.
            </summary>
            <remarks>This is for notification purposes, the default implementation does nothing.</remarks>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.OnAfterDraw(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableImageRendererUIElement.OnDispose">
            <summary>
            Called when the element is disposed off.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRendererUIElement.ClipSelf">
            <summary>
            Returns true causing all drawing of this element to be expicitly clipped to its region
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRendererUIElement.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableImageRendererUIElement.BorderStyle">
            <summary>
            Overridden property that returns the border style this ui element is going
            to have.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableTextBox">
            <summary>
            Summary description for EmbeddableTextBox.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.#ctor">
            <summary>
            Creates a new instance of the <b>EmbeddableTextBox</b> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.#ctor(Infragistics.Win.EditorWithText)">
            <summary>
            Creates a new instance of the <b>EmbeddableTextBox</b> class
            </summary>
            <param name="owningEditor">Owning <see cref="T:Infragistics.Win.EditorWithText"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the Keys values</param>
            <returns><b>true</b> if the specified key is a regular input key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnEnter(System.EventArgs)">
            <summary>
            Called when the control gets focus
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed and unmanaged resources should be released.</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.ApplyAppearance(Infragistics.Win.AppearanceData)">
            <summary>
            Applies the passed-in AppearanceData to the control
            </summary>
            <remarks>
            Note that the only relevant properties here are ForeColor, BackColor, FontData, TextHAlign, TextVAlign, and Cursor.
            </remarks>
            <param name="appData">The AppearanceData to be applied to the EmbeddableTextBox</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.Initialize(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Initializes the TextBox properties to the values obtained from the new owning element
            </summary>
            <param name="owningElement">The EmbeddableUIElementBase-derived class currently associated with the control</param>		
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.UnInitialize">
            <summary>
            UnInitializes the EmbeddableTextBox by setting the OwingElement property to null
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.PositionControl(System.Drawing.Rectangle)">
            <summary>
            Sets the control's bounds, using the OwningElement's RectInsideBorders 
            property and the TextVAlign property
            </summary>
            <param name="bounds">The rectangle that the control must be fit into</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.InitializeText(System.String)">
            <summary>
            Sets the Text property and suppresses the firing of the ValueChanged event
            </summary>
            <param name="text">The new value for the Text property</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyDown
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyUp
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            OnKeyPress
            </summary>
            <param name="e">KeyPress event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            OnTextChanged
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            Called when the control gets the input focus
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Called when the control loses the input focus
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnLeave(System.EventArgs)">
            <summary>
            Called when the control is left
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse button is pressed down while the cursor is positioned over the control
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when a mouse button is released while the cursor is positioned over the control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseEnter(System.EventArgs)">
            <summary>
            Called when the cursor enters the control
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Called when the cursor leaves the control
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse wheel is moved
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Called when the value of the ReadOnly property changes
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.InternalIsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Accessor for the protected IsInputKey method
            </summary>
            <param name="keyData">The key to test</param>
            <returns>A boolean indicating whether the key is used by the control</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnClick(System.EventArgs)">
            <summary>
            Invoked when the textbox is clicked
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnDoubleClick(System.EventArgs)">
            <summary>
            Invoked when the textbox is double clicked
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseHover(System.EventArgs)">
            <summary>
            Invoked when the textbox is double clicked
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over the textbox
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBox.TextVAlign">
            <summary>
            Gets/sets the vertical text alignment for the control. Only relevant when Multiline == true.
            </summary>
            <remarks>
            Note that the TextBox does not actually support vertical text alignment; 
            we simulate alignment by positioning the control with respect to its OwningElement.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBox.TextHAlign">
            <summary>
            Gets/sets the horizontal text alignment for the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBox.OwningElement">
            <summary>
            (Read only) Returns the EmbeddableUIElementBase-derived class currently associated with the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBox.DisableOwnerOnLeaveNotification">
            <summary>
            Gets/sets whether to disregard the usual events that cause the 
            IEmbeddableOwner's OnLeaveEditor method to be called (i.e., OnLeave, OnLostFocus)
            </summary>
            <remarks>
            This is necessary because the ValueList's 
            ComboBox-derived dropdown grabs the focus whenever it closes up
            </remarks>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBox.IsSimulatingMouseDown">
            <summary>
            This member supports the Infragistics infrastructure and is not meant to be invoked externally.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableTextBoxWithUIPermissions">
            <summary>
            Derives from EmbeddableTextBox. The only difference between the two is that
            this class overrides PreProcessMessage to prevent beeping when the TAB, ENTER or ESCAPE
            keys are pressed.
            If the user has appropriate UI permissions, this class should be used
            rather than the EmbeddableTextBox class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBoxWithUIPermissions.#ctor">
            <summary>
            Creates a new instance of the EmbeddableTextBoxWithUIPermissions class
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBoxWithUIPermissions.#ctor(Infragistics.Win.EditorWithText)">
            <summary>
            Creates a new instance of the EmbeddableTextBoxWithUIPermissions class
            </summary>
            <param name="owningEditor">Owning <see cref="T:Infragistics.Win.EditorWithText"/></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBoxWithUIPermissions.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes a key message
            </summary>
            <param name="msg">ref Message</param>
            <returns>A boolean indicating whether the key was processed</returns>
        </member>
        <member name="M:Infragistics.Win.EmbeddableTextBoxWithUIPermissions.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="P:Infragistics.Win.EmbeddableTextBoxWithUIPermissions.IsSimulatingMouseDown">
            <summary>
            This member supports the Infragistics infrastructure and is not meant to be invoked externally.
            </summary>
        </member>
        <member name="M:Infragistics.Win.AutoSizeEditInfo.Initialize(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Sets the AutoSize property to true, and sets the StartSize
            and MaxSize properties to the values specified by startSize
            and maxSize, respectively.
            </summary>
            <param name="startSize">The new value for the StartSize property.</param>
            <param name="maxSize">The new value for the MaxSize property.</param>
        </member>
        <member name="M:Infragistics.Win.AutoSizeEditInfo.Reset">
            <summary>
            Resets all properties to their default values
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.AutoSize">
            <summary>
            Returns whether AutoSize is supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.StartSize">
            <summary>
            Returns the initial size of the edit window.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.MaxSize">
            <summary>
            Returns the maximum size of the edit window.
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.HasMaxSize">
            <summary>
            Returns whether a maximum size was stipulated
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.HasStartSize">
            <summary>
            Returns whether a start size was stipulated
            </summary>
        </member>
        <member name="P:Infragistics.Win.AutoSizeEditInfo.ProcessingAutoEdit">
            <summary>
            Gets/sets whether auto editing is currently in progress,
            i.e., in edit mode and the textbox has been autosized at
            least once.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Alpha">
            <summary>
            An enumerator for specifying which alpha level to use
            </summary>
        </member>
        <member name="F:Infragistics.Win.Alpha.Default">
            <summary>
            Use the current default
            </summary>
        </member>
        <member name="F:Infragistics.Win.Alpha.UseAlphaLevel">
            <summary>
            Use the alpha level value
            </summary>
        </member>
        <member name="F:Infragistics.Win.Alpha.Opaque">
            <summary>
            Render opaque (255)
            </summary>
        </member>
        <member name="F:Infragistics.Win.Alpha.Transparent">
            <summary>
            Render transparent (0)
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearancePropFlags">
            <summary>
               Use bit flags to uniquely identify each property of the
               AppearanceData structure. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ForeColor">
            <summary>
            The color used for the foreground text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BorderColor">
            <summary>
            The color of the borders
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontName">
            <summary>
            The font name used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.TextHAlign">
            <summary>
            The horizontal alignment of text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.TextVAlign">
            <summary>
            The vertical alignment of text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageHAlign">
            <summary>
            The horizontal alignment of the image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageVAlign">
            <summary>
            The vertical alignment of the image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.Image">
            <summary>
            The foreground image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageBackgroundOrigin">
            <summary>
            The origin of the background image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageBackgroundStyle">
            <summary>
            The style of the background image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageBackground">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageBackgroundAlpha">
            <summary>
            The image background alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ImageAlpha">
            <summary>
            The image alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.AlphaLevel">
            <summary>
            The alpha level property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackColorAlpha">
            <summary>
            The alpha level property for back color
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ForegroundAlpha">
            <summary>
            The alpha level property for text color
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BorderAlpha">
            <summary>
            The alpha level property for borders
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ForeColorDisabled">
            <summary>
            foreground color of disabled element
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackColorDisabled">
            <summary>
            background color of disabled element
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontBold">
            <summary>
            The font bold attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontItalic">
            <summary>
            The font italic attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontUnderline">
            <summary>
            The font underline attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontStrikeout">
            <summary>
            The font strikeout attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontSize">
            <summary>
            The font size attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.FontData">
            <summary>
            All font data
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackColor2">
            <summary>
            The color to use when doing a gradient fill of the background
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackColorDisabled2">
            <summary>
            The color to use when doing a gradient fill of the background
            when the elemtn is disabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackGradientStyle">
            <summary>
            The style of gradient fill to use for the background
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.TextTrimming">
            <summary>
            The font size attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BorderColor3DBase">
            <summary>
            The base color used to create the shadow and highlight colors
            for raised or inset 3d border styles. If BorderColor3DBase is not
            set then the BackColor will be used.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.ThemedElementAlpha">
            <summary>
            The alpha level property for themed elements.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackHatchStyle">
            <summary>
            The style of the hatch brush used to fill the background
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.BackGradientAlignment">
            <summary>
            Determines how the BackGradient is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.AllRender">
            <summary>
            All properties but the cursor
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.Cursor">
            <summary>
            The cursor property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropFlags.AllRenderAndCursor">
            <summary>
            All properties
            </summary>
        </member>
        <member name="T:Infragistics.Win.AppearancePropIds">
            <summary>
               uniquely identify each property of the
               AppearanceData structure. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackColor">
            <summary>
            The background color property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ForeColor">
            <summary>
            The text color property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BorderColor">
            <summary>
            The border color property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.FontData">
            <summary>
            The font property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.TextHAlign">
            <summary>
            The horizontal text alignment property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.TextVAlign">
            <summary>
            The vertical text alignment property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageHAlign">
            <summary>
            The horizontal image alignment property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageVAlign">
            <summary>
            The vertical text alignment property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.Image">
            <summary>
            The foreground image property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageBackgroundOrigin">
            <summary>
            The background image origin property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageBackgroundStyle">
            <summary>
            The background image style property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageBackground">
            <summary>
            The background image property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageBackgroundAlpha">
            <summary>
            The background image alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ImageAlpha">
            <summary>
            The image alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.AlphaLevel">
            <summary>
            The alpha level property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackColorAlpha">
            <summary>
            The back color alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ForegroundAlpha">
            <summary>
            The forecolor alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BorderAlpha">
            <summary>
            The border color alpha property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.Cursor">
            <summary>
            The cursor property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ForeColorDisabled">
            <summary>
            foreground color of disabled element
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackColorDisabled">
            <summary>
            background color of disabled element
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackColor2">
            <summary>
            The color to use when doing a gradient fill of the background
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackColorDisabled2">
            <summary>
            The color to use when doing a gradient fill of the background
            when the elemtn is disabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackGradientStyle">
            <summary>
            The style of gradient fill to use for the background
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.TextTrimming">
            <summary>
            The font size attribute used for text
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BorderColor3DBase">
            <summary>
            The base color used to create the shadow and highlight colors
            for raised or inset 3d border styles. If BorderColor3DBase is not
            set then the BackColor will be used.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.ThemedElementAlpha">
            <summary>
            The alpha level to use when rendering a themed element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackHatchStyle">
            <summary>
            The style of the hatch brush used to fill the background.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.BackGradientAlignment">
            <summary>
            Determines how the BackGradient is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.AppearancesCollection">
            <summary>
            The appearances collection property
            </summary>
        </member>
        <member name="F:Infragistics.Win.AppearancePropIds.Appearance">
            <summary>
            The appearance object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.BackHatchStyle">
            <summary>
            Specifies if and how a hatch brush will be used to fill the background of a UIElement. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.None">
            <summary>
            No hatch. Use solid or gradient backcolor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Horizontal">
            <summary>
            A pattern of horizontal lines.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Vertical">
            <summary>
            A pattern of vertical lines.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.ForwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper left to lower right.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.BackwardDiagonal">
            <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LargeGrid">
            <summary>
            Specifies the hatch style Cross
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Cross">
            <summary>
            Specifies horizontal and vertical lines that cross.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DiagonalCross">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross. The lines are antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent05">
            <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent10">
            <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent20">
            <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent25">
            <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent30">
            <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent40">
            <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent50">
            <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent60">
            <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent70">
            <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent75">
            <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent80">
            <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Percent90">
            <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LightDownwardDiagonal">
            <summary>
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DarkDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal. This hatch pattern is not antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DarkUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than BackwardDiagonal, and are twice its width, but the lines are not antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.WideDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style ForwardDiagonal, and are triple its width, but are not antialiased
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.WideUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style BackwardDiagonal, and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LightVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LightHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.NarrowVertical">
            <summary>
            Specifies vertical lines that are spaced 75 percent closer together than hatch style Vertical (or 25 percent closer together than LightVertical).
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.NarrowHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 75 percent closer together than hatch style Horizontal (or 25 percent closer together than LightHorizontal).
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DarkVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DarkHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of HatchStyleHorizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DashedDownwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DashedHorizontal">
            <summary>
            Specifies dashed horizontal lines.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DashedVertical">
            <summary>
            Specifies dashed vertical lines.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.SmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LargeConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti, and is composed of larger pieces than SmallConfetti.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Wave">
            <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DiagonalBrick">
            <summary>
            Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.HorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Weave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Plaid">
            <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Divot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DottedGrid">
            <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.DottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Shingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally-layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Trellis">
            <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.Sphere">
            <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.SmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style Cross.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.SmallCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.LargeCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of SmallCheckerBoard.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.OutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
        </member>
        <member name="F:Infragistics.Win.BackHatchStyle.SolidDiamond">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ButtonAlignment">
            <summary>
            Where the button will be displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonAlignment.Right">
            <summary>
            The dropdown button is displayed to the right of the edit portion
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonAlignment.Left">
            <summary>
            The dropdown button is displayed to the left of the edit portion
            </summary>
        </member>
        <member name="T:Infragistics.Win.ButtonDisplayStyle">
            <summary>
            DropDownButtonDisplayStyle
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonDisplayStyle.Never">
            <summary>
            The dropdown button is never displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonDisplayStyle.Always">
            <summary>
            The dropdown button is always displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ButtonDisplayStyle.OnMouseEnter">
            <summary>
            The dropdown button is displayed when the cursor is positioned over the editor
            </summary>
        </member>
        <member name="T:Infragistics.Win.DrawPhase">
            <summary>
            Identifies the phases of an element's drawing operation
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.None">
            <summary>
            Used in IUIElementDrawFilter.GetPhasesToFilter to indicate
            that no draw phases should be filtered.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawElement">
            <summary>
            Called before an element is drawn. Returning true from the
            IUIElementDrawFilter.DrawElement method on this phase will
            prevent all default drawing for this element. It also
            prevents default drawing operations to start for any child
            elements which means that the IUIElementDrawFilter.DrawElement
            will not be called for any of those child elements.  
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawTheme">
            <summary>
            Called before an element attempts to render using the system's
            themes. Returning true from the IUIElementDrawFilter.DrawElement on
            this phase will prevent the element from attempting to render using
            the system themes. If the element can render itself using the system
            themes, the main rendering phases (BackColor, ImageBackground, Borders,
            Image, and Foreground) will not be invoked.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawTheme">
            <summary>
            Called after an element has an opportunity to render itself using the
            system theme.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawBackColor">
            <summary>
            Called before an element's BackColor is drawn. Returning true
            from the IUIElementDrawFilter.DrawElement method on this phase
            will prevent default BackColor drawing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawBackColor">
            <summary>
            Called after an element's BackColor has been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawImageBackground">
            <summary>
            Called before an element's ImageBackground is drawn. Returning true
            from the IUIElementDrawFilter.DrawElement method on this phase
            will prevent default ImageBackground drawing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawImageBackground">
            <summary>
            Called after an element's ImageBackground has been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawBorders">
            <summary>
            Called before an element's borders are drawn. Returning true
            from the IUIElementDrawFilter.DrawElement method on this phase
            will prevent default border drawing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawBorders">
            <summary>
            Called after an element's Borders have been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawImage">
            <summary>
            Called before an element's foregroung Image is drawn. Returning true
            from the IUIElementDrawFilter.DrawElement method on this phase
            will prevent default Image drawing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawImage">
            <summary>
            Called after an element's foreground Image has been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawForeground">
            <summary>
            Called before an element's foreground (e.g. text) is drawn. 
            Returning true from the IUIElementDrawFilter.DrawElement 
            method on this phase will prevent default foreground drawing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawForeground">
            <summary>
            Called after an element's Foreground has been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawChildElements">
            <summary>
            Called before an element's child elements are drawn. Returning 
            true from the IUIElementDrawFilter.DrawElement method on this
            phase will prevent default drawing operations to start for any child
            elements which means that the IUIElementDrawFilter.DrawElement
            will not be called for any of those child elements.  
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawChildElements">
            <summary>
            Called after an element's child elements have been drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.BeforeDrawFocus">
            <summary>
            Called before an element's focus rect is drawn. Returning true
            from the IUIElementDrawFilter.DrawElement method on this
            phase prevents the default drawing of the focus. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.DrawPhase.AfterDrawElement">
            <summary>
            Called after all drawing of the element and its children
            elements have been completed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownStyle">
            <summary>
            DropDownStyle
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownStyle.DropDown">
            <summary>
            Edit portion is modifiable
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownStyle.DropDownList">
            <summary>
            Edit portion is not modifiable
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownListAlignment">
            <summary>
            DropDownListAlignment
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownListAlignment.Left">
            <summary>
            The dropdown list is aligned with the left edge of the edit portion
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownListAlignment.Right">
            <summary>
            The dropdown list is aligned with the right edge of the edit portion
            </summary>
        </member>
        <member name="F:Infragistics.Win.DropDownListAlignment.Center">
            <summary>
            The dropdown list is aligned with the center of the edit portion
            </summary>
        </member>
        <member name="T:Infragistics.Win.DefaultableBoolean">
            <summary>
            An enumerator for a boolean type property that allows for a
            default setting. This is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DefaultableBoolean.Default">
            <summary>
            Use the current default
            </summary>
        </member>
        <member name="F:Infragistics.Win.DefaultableBoolean.True">
            <summary>
            True 
            </summary>
        </member>
        <member name="F:Infragistics.Win.DefaultableBoolean.False">
            <summary>
            False
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableElementDisplayStyle">
            <summary>
            Determines the style of display for embeddable editor elements.
            </summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableElementDisplayStyle.Standard">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableElementDisplayStyle.Office2000">
            <summary>
            Emulate Office2000 appearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableElementDisplayStyle.OfficeXP">
            <summary>
            Emulate OfficeXP appearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableElementDisplayStyle.Office2003">
            <summary>
            Emulate Office2003 appearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableElementDisplayStyle.VisualStudio2005">
            <summary>
            Emulate VisualStudio2005 appearance
            </summary>
        </member>
        <member name="T:Infragistics.Win.FontDataPropIds">
            <summary>
               uniquely identify each property of the
               FontData class. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.Name">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.SizeInPoints">
            <summary>
            The size of the font in points
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.Bold">
            <summary>
            Determines if the font is bold
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.Italic">
            <summary>
            Determines if the font is itailc
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.Strikeout">
            <summary>
            Determines if the font has a strikout line thru it
            </summary>
        </member>
        <member name="F:Infragistics.Win.FontDataPropIds.Underline">
            <summary>
            Determines if the font is underlined
            </summary>
        </member>
        <member name="T:Infragistics.Win.GradientAlignment">
            <summary>
            Determines how a gradient is aligned with respect to its origin and extent.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientAlignment.Default">
            <summary>
            The default alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientAlignment.Element">
            <summary>
            The gradient is aligned with respect to the element that is being drawn.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientAlignment.Form">
            <summary>
            The gradient is aligned with respect to the form it is on.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientAlignment.Container">
            <summary>
            The gradient is aligned with respect to the control's container.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientAlignment.Client">
            <summary>
            The gradient is aligned with respect to the control client area.
            </summary>
        </member>
        <member name="T:Infragistics.Win.GradientStyle">
            <summary>
            Specifies if and how a color gradient will be used to fill the background of a UIElement. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.None">
            <summary>
            No gradient. Use solid or hatch backcolor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Vertical">
            <summary>
            Specifies a gradient from top to bottom.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Horizontal">
            <summary>
            Specifies a gradient from left to right.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.BackwardDiagonal">
            <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.ForwardDiagonal">
            <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.HorizontalBump">
            <summary>
            Specifies a gradient that starts with the secondary color in the center and migrates toward the primary color on the left and right.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.VerticalBump">
            <summary>
            Specifies a gradient that starts with the secondary color in the center and migrates toward the primary color on the top and bottom.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Circular">
            <summary>
            Specifies a gradient that starts with the primary color in the center point and migrates toward the secondary color on the edges in a circular pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Rectangular">
            <summary>
            Specifies a gradient that starts with the primary color in the center point and migrates toward the secondary color on the edges in a rectangular pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Win.GradientStyle.Elliptical">
            <summary>
            Specifies a gradient that starts with the primary color in the center point and migrates toward the secondary color on the edges in a elliptical pattern.
            </summary>
        </member>
        <member name="T:Infragistics.Win.HAlign">
            <summary>
            An enumerator for aligning text or images
            </summary>
        </member>
        <member name="F:Infragistics.Win.HAlign.Default">
            <summary>
            Use the current default
            </summary>
        </member>
        <member name="F:Infragistics.Win.HAlign.Left">
            <summary>
            Align to the left
            </summary>
        </member>
        <member name="F:Infragistics.Win.HAlign.Center">
            <summary>
            Align in the center
            </summary>
        </member>
        <member name="F:Infragistics.Win.HAlign.Right">
            <summary>
            Align to the right
            </summary>
        </member>
        <member name="T:Infragistics.Win.HeaderStyle">
            <summary>
            Different display styles for column headers and row selectors.
            </summary>
        </member>
        <member name="F:Infragistics.Win.HeaderStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:Infragistics.Win.HeaderStyle.Standard">
            <summary>
            The borders are drawn according to the border style.
            </summary>
        </member>
        <member name="F:Infragistics.Win.HeaderStyle.WindowsXPCommand">
            <summary>
            The look and feel of a Windows XP command button.
            </summary>
        </member>
        <member name="F:Infragistics.Win.HeaderStyle.XPThemed">
            <summary>
            The themed XP look and feel.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageBackgroundOrigin">
            <summary>
            An enumerator for background image origin
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundOrigin.Relative">
            <summary>
            Orient the image relative to the element
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundOrigin.Form">
            <summary>
            Orient the image relative to the form
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundOrigin.Container">
            <summary>
            Orient the image relative to the containing control
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundOrigin.Client">
            <summary>
            Orient the image relative to the control's client area
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageBackgroundStyle">
            <summary>
            An enumerator for background image style
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundStyle.Default">
            <summary>
            Use the current default
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundStyle.Centered">
            <summary>
            Center the image
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundStyle.Stretched">
            <summary>
            Stretch the image
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageBackgroundStyle.Tiled">
            <summary>
            Tile the image
            </summary>
        </member>
        <member name="T:Infragistics.Win.ScaleImage">
            <summary>
            Enumeration of options for scaling images.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ScaleImage.Never">
            <summary>
            Images are never scaled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ScaleImage.Always">
            <summary>
            Images are always scaled to the specified size.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ScaleImage.OnlyWhenNeeded">
            <summary>
            Images are only scaled if they exceed the scaled image size.
            </summary>
        </member>
        <member name="T:Infragistics.Win.SpecialKeys">
            <summary>
            Bit flags indicating on of the special keys (shift, ctrl and alt)
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.Shift">
            <summary>
            The 'Shift' key is down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.Ctrl">
            <summary>
            The 'Ctrl' key is down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.ShiftCtrl">
            <summary>
            The 'Shift' and 'Ctrl' keys are both down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.Alt">
            <summary>
            The 'Alt' key is down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.AltShift">
            <summary>
            The 'Shift' and 'Alt' keys are both down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.AltCtrl">
            <summary>
            The 'Alt' and 'Ctrl' keys are both down
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpecialKeys.All">
            <summary>
            The 'Shift', 'Ctrl' and 'Alt' keys are all down
            </summary>
        </member>
        <member name="T:Infragistics.Win.SpinButtonDisplayStyle">
            <summary>
            Enum for specifying whether to show a spin button and where to show it.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonDisplayStyle.None">
            <summary>
            Don't display any spin buttons.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonDisplayStyle.OnLeft">
            <summary>
            Position the spin buttons on the left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonDisplayStyle.OnRight">
            <summary>
            Position the spin buttons on the right.
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextPlacement">
            <summary>
            Enumeration of possible text placements.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextPlacement.Default">
            <summary>
            The default text placement should be used.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextPlacement.AboveImage">
            <summary>
            The text is placed above the image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextPlacement.BelowImage">
            <summary>
            The text is placed below the image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextPlacement.LeftOfImage">
            <summary>
            The text is placed to the left of the image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextPlacement.RightOfImage">
            <summary>
            The text is placed to the right of the image.
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextTrimming">
            <summary>
            Specifies how text will be rendered when there is not
            enough room to display the entire string.  
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.Default">
            <summary>
            The default trimming.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.None">
            <summary>
            No trimming
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.Character">
            <summary>
            The text is trimmed to the nearest character.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.EllipsisCharacter">
            <summary>
            The text is trimmed to the nearest character, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.EllipsisPath">
            <summary>
            The center is removed from trimmed lines and replaced by an ellipsis. The algorithm keeps as much of the last slash-delimited segment of the line as possible.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.EllipsisWord">
            <summary>
            The text is trimmed to the nearest word, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:Infragistics.Win.TextTrimming.Word">
            <summary>
            The text is trimmed to the nearest word.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementBorderStyle">
            <summary>
            Returns or sets a value that determines the border style of an object.
            </summary>
            <remarks><para>The border style of cells, rows, and headers can be set 
            by the BorderStyleCell, BorderStyleRow, and BorderStyleHeader properties 
            respectively.</para>
            <para>The border style of the AddNew box buttons can be set by the 
            ButtonBorderStyle property.</para>
            <para>Note that not all styles are available on all operating systems. 
            If the version of the OS that your program is running on does not support 
            a particular border style, borders formatted with that style will be 
            drawn using solid lines.</para></remarks>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Default">
            <summary>
            The default border style
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.None">
            <summary>
            No borders
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Dotted">
            <summary>
            Dotted line
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Dashed">
            <summary>
            Dashed line
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Solid">
            <summary>
            A solid line
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Inset">
            <summary>
            A 2 pixel wide inset border
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Raised">
            <summary>
            A 2 pixel wide raised border
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.InsetSoft">
            <summary>
            A 1 pixel wide inset border
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.RaisedSoft">
            <summary>
            A 1 pixel wide raised border
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementBorderStyle.Etched">
            <summary>
            A 2 pixel wide etched line
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementButtonState">
            <summary>
            Enumeration of button states.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.MouseDown">
            <summary>
            The logical left mouse was pressed on the element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.MouseOver">
            <summary>
            The cursor is over the element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.MouseDownAndOver">
            <summary>
            The logical left mouse button was pressed and the mouse is over the element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.Inactive">
            <summary>
            The element (or one of its ancestors) is disabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.StateButtonDown">
            <summary>
            The element is in a pushed/checked state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonState.Indeterminate">
            <summary>
            The state button is in an indeterminate state.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementButtonStyle">
            <summary>
            Enumeration of button styles.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Button">
            <summary>
            Standard 2 pixel raised border unless the mouse is down over the element in which case it draws a 1 pixel flat border.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.ButtonSoft">
            <summary>
            Single pixel raised border unless the mouse is down over the element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Flat">
            <summary>
            Always uses a single pixel solid border.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.FlatBorderless">
            <summary>
            Uses a single pixel solid border when the mouse is down or over the element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.PopupSoft">
            <summary>
            Single pixel solid border when not active, otherwise responds like ButtonSoft.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.PopupSoftBorderless">
            <summary>
            Borderless when not active, otherwise responds like ButtonSoft.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Popup">
            <summary>
            Single pixel solid border when not active, otherwise responds like Button.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.PopupBorderless">
            <summary>
            Borderless when not active, otherwise responds like Button.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Borderless">
            <summary>
            No border is rendered around the button.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Button3D">
            <summary>
            A raised 2 pixel border (e.g. scroll buttons).
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.ButtonSoftExtended">
            <summary>
            A single pixel soft border when inactive but a 2 pixel 3D border when active.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.OfficeXPToolbarButton">
            <summary>
            Emulates an OfficeXP toolbar button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Button3DOldStyle">
            <summary>
            Standard 2 pixel raised border unless the mouse is down over the element in which case it draws a 2 pixel inset border (e.g. like old style command button).
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.WindowsXPCommandButton">
            <summary>
            Emulates a WindowsXP themed command button, but with square edges.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.Office2003ToolbarButton">
            <summary>
            Emulates an Office2003 toolbar button.  Essentially the same as an OfficeXPToolbarButton but without shadowed images.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonStyle.VisualStudio2005Button">
            <summary>
            Emulates a Visual Studio 2005 toolbar button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementButtonType">
            <summary>
            Enumeration of button types.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonType.PushButton">
            <summary>
            Standard button
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementButtonType.Toggle">
            <summary>
            State button
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementDisplayStyle">
            <summary>
            An enumerator for UIElement display styles
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementDisplayStyle.Default">
            <summary>
            The default Display Style
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementDisplayStyle.Standard">
            <summary>
            Win 95/98/2000 standard 3D Display Style
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementDisplayStyle.Flat">
            <summary>
            Win XP Flat Display Style 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraControlPropIds">
            <summary>
               uniquely identify each property of UltraControlBase. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.AlphaBlendEnabled">
            <summary>
            Whether alpha blending is enabled
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.CreationFilter">
            <summary>
            A custom filter used to control UIElement creation and positioning. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.CursorFilter">
            <summary>
            A custom filter used to control which cursor is used over UIElements. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.DrawFilter">
            <summary>
            A custom filter used to override or supplement the drawing of UIElements. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.FlatMode">
            <summary>
            Indicates whether the control has a flat appearance.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.SupportThemes">
            <summary>
            Indicates when elements of the controls may render using the system themes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraControlPropIds.AlphaBlendMode">
            <summary>
            Determines the style of alpha blending
            </summary>
        </member>
        <member name="T:Infragistics.Win.VAlign">
            <summary>
            An enumerator for aligning text or images
            </summary>
        </member>
        <member name="F:Infragistics.Win.VAlign.Default">
            <summary>
            Use the current default
            </summary>
        </member>
        <member name="F:Infragistics.Win.VAlign.Top">
            <summary>
            Align to the top
            </summary>
        </member>
        <member name="F:Infragistics.Win.VAlign.Middle">
            <summary>
            Align in the middle
            </summary>
        </member>
        <member name="F:Infragistics.Win.VAlign.Bottom">
            <summary>
            Align to the bottom
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListDisplayStyle">
            <summary>
            style for specifying what property of a value list item
            will be displayed in each item of the DropDown list 
            This applies to value list items collection associated with
            each value list for various drop down column styles.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.Default">
            <summary>
            default value list display style
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.DataValue">
            <summary>
            text associated with the data value is display in 
            the drop down list
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.DataValueAndPicture">
            <summary>
            text associated with the data value and also picture
            that a value list item's appearance object is assigned to 
            will be displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.DisplayText">
            <summary>
            display text value assigned to the value list item will be
            displayed in each item of the drop down list
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.DisplayTextAndPicture">
            <summary>
            display text and also picture
            that a value list item's appearance object is assigned to 
            will be displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListDisplayStyle.Picture">
            <summary>
            only the picture will be displayed in each item of the drop
            down list
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListPropIds">
            <summary>
               uniquely identify each property of the
               ValueList. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.Appearance">
            <summary>
            The appearance object.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.Add">
            <summary>
            property id identifying Add property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.Clear">
            <summary>
            property id identifying Clear property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.DataValue">
            <summary>
            property id identifying DataValue, property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.DisplayStyle">
            <summary>
            property id identifying DisplayStyle, property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.DisplayText">
            <summary>
            property id identifying DisplayText, property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.Remove">
            <summary>
            property id identifying Remove property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.SortStyle">
            <summary>
            property id identifying SortStyle, property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.Value">
            <summary>
            property id identifying Value property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.ValueList">
            <summary>
            property id identifying ValueList property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.ValueLists">
            <summary>
            property id identifying ValueLists property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.ValueListItem">
            <summary>
            property id identifying ValueListItem, property
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListPropIds.ValueListItems">
            <summary>
            property id identifying ValueListItems, property
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListSortStyle">
            <summary>
            enum for specifying how a value list items will be sorted
            when displaying value list items in a drop down list
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.ValueList.SortStyle"/>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.ValueListSortStyle.None">
            <summary>
            no sorting
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListSortStyle.Ascending">
            <summary>
            Sort ascending by display text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListSortStyle.Descending">
            <summary>
            Sort descending by display text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListSortStyle.AscendingByValue">
            <summary>
            Sort ascending by value.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueListSortStyle.DescendingByValue">
            <summary>
            Sort descending by value.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EmbeddableEditorArea">
            <summary>
            Enumeration describing the area of the embeddable UIElement
            </summary>
            <remarks>Used by the EmbeddableEditorOwnerBase class ResolveAppearance method to indicate to the owner which area of the embeddable element the resolved appearance will be applied to</remarks>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Default">
            <summary>The default area of the embeddable element</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Text">
            <summary>The text area of the embeddable element</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Label">
            <summary>The label area of the embeddable element</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Prompt">
            <summary>The prompt characters of the embeddable element; i.e., a mask's prompt character</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Button">
            <summary>The button area of the embeddable element</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.MaskLiterals">
            <summary>The literal characters of the embeddable element; for example, a mask's literal character</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Fill">
            <summary>The fill area of the embeddable element, for example, a progress bar</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.DropDown">
            <summary>The DropDown area of the embeddable element</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.Custom">
            <summary>Custom. Indicates that the stringName parameter of the ResolveAppearance method should be examined to determine the area.</summary>
        </member>
        <member name="F:Infragistics.Win.EmbeddableEditorArea.NullText">
            <summary>The text area of the embeddable element, when the value is null and the owner's return from the GetNullText method is a non-empty string.</summary>
        </member>
        <member name="T:Infragistics.Win.AlphaBlendMode">
            <summary>
            Enumeration of AlphaBlend modes
            </summary>
        </member>
        <member name="F:Infragistics.Win.AlphaBlendMode.Disabled">
            <summary>
            Alphablending is disabled
            </summary>
        </member>
        <member name="F:Infragistics.Win.AlphaBlendMode.Standard">
            <summary>
            Alphablend using the system AlphaBlend api's
            </summary>
        </member>
        <member name="F:Infragistics.Win.AlphaBlendMode.Optimized">
            <summary>
            Alphablend using GDI+
            </summary>
        </member>
        <member name="T:Infragistics.Win.SystemColor">
            <summary>
            Enumeration of windows system colors.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ActiveBorder">
            <summary>
            The color of the active window's border
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ActiveCaption">
            <summary>
            The color of the background of the active window's title bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ActiveCaptionText">
            <summary>
            The color of the text in the active window's title bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.AppWorkspace">
            <summary>
            The color of the application workspace. The application workspace is the area in a multiple-document view that is not being occupied by documents.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Control">
            <summary>
            The face color of a 3-D element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ControlDark">
            <summary>
            The shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ControlDarkDark">
            <summary>
            The dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ControlLight">
            <summary>
            The light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ControlLightLight">
            <summary>
            The highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ControlText">
            <summary>
            The color of text in a 3-D element.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Desktop">
            <summary>
            The color of the desktop.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.GrayText">
            <summary>
            The color of dimmed text. Items in a list that are disabled are displayed in dimmed text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Highlight">
            <summary>
            The color of the background of selected items. This includes selected menu items as well as selected text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.HighlightText">
            <summary>
            The color of the text of selected items.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.HotTrack">
            <summary>
            The color used to designate a hot-tracked item.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.InactiveBorder">
            <summary>
            The color of an inactive window's border.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.InactiveCaption">
            <summary>
            The color of the background of an inactive window's title bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.InactiveCaptionText">
            <summary>
            The color of the text in an inactive window's title bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Info">
            <summary>
            The color of the background of a ToolTip.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.InfoText">
            <summary>
            The color of the text of a ToolTip.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Menu">
            <summary>
            The color of a menu's background.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.MenuText">
            <summary>
            The color of a menu's text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.ScrollBar">
            <summary>
            The color of the background of a scroll bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.Window">
            <summary>
            The color of the background in the client area of a window.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.WindowFrame">
            <summary>
            The color of a window frame.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SystemColor.WindowText">
            <summary>
            The color of the text in the client area of a window.
            </summary>
        </member>
        <member name="T:Infragistics.Win.SpinButtonTypes">
            <summary>
            Enumeration of spin button items that may be displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonTypes.FirstOrLast">
            <summary>
            Scroll to the first or last item
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonTypes.NextOrPreviousItem">
            <summary>
            Scrolling increments by one item
            </summary>
        </member>
        <member name="F:Infragistics.Win.SpinButtonTypes.NextOrPreviousPage">
            <summary>
            Scrolling increments by one page
            </summary>
        </member>
        <member name="T:Infragistics.Win.RelativePosition">
            <summary>
            Enumeration of relative positions
            </summary>
        </member>
        <member name="F:Infragistics.Win.RelativePosition.Before">
            <summary>
            Before the specified relative item
            </summary>
        </member>
        <member name="F:Infragistics.Win.RelativePosition.After">
            <summary>
            After the specified relative item
            </summary>
        </member>
        <member name="T:Infragistics.Win.SoundFlags">
            <summary>
            Specifies how sounds are played by the <see cref="M:Infragistics.Win.UltraControlBase.PlaySound(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.Synchronous">
            <summary>
            The sound is played synchronously.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.Asynchronous">
            <summary>
            The sound is played asynchronously.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.NoDefault">
            <summary>
            If the specified sound file is not found, no default sound is played.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.Loop">
            <summary>
            The sound is played continuously until the next call to the PlaySound method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.NoStop">
            <summary>
            The currently playing sound, if any, will not be interrupted.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundFlags.NoWait">
            <summary>
            If the sound driver is currently busy, the method will return without playing the sound.
            </summary>
        </member>
        <member name="T:Infragistics.Win.SoundEvents">
            <summary>
            Enumerates the system-defined sound events.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Asterisk">
            <summary>
            Plays the 'SystemAsterisk' sound event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Exclamation">
            <summary>
            Plays the 'SystemExclamation' sound event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Exit">
            <summary>
            Plays the 'SystemExit' sound event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Hand">
            <summary>
            Plays the 'SystemHand' sound event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Question">
            <summary>
            Plays the 'SystemQuestion' sound event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SoundEvents.Start">
            <summary>
            Plays the 'SystemStart' sound event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Corners">
            <summary>
            Enumeration of corners
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.None">
            <summary>
            No corners
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.TopLeft">
            <summary>
            Upper left
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.TopRight">
            <summary>
            Upper right
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.BottomLeft">
            <summary>
            Bottom left
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.BottomRight">
            <summary>
            Bottom right
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.Left">
            <summary>
            Left - Combination of TopLeft and BottomLeft
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.Right">
            <summary>
            Right - Combination of TopRight and BottomRight
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.Top">
            <summary>
            Top - Combination of TopLeft and TopRight
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.Bottom">
            <summary>
            Bottom - Combination of BottomLeft and BottomRight
            </summary>
        </member>
        <member name="F:Infragistics.Win.Corners.All">
            <summary>
            All four corners
            </summary>
        </member>
        <member name="T:Infragistics.Win.ShowInkButton">
            <summary>
            Enumerates when to show the Ink Button
            </summary>
        </member>
        <member name="F:Infragistics.Win.ShowInkButton.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.ShowInkButton.WhenInkAvailable">
            <summary>
            Show the Ink Button only if Ink Recognition is available.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ShowInkButton.Always">
            <summary>
            Always show the Ink Button
            </summary>
        </member>
        <member name="F:Infragistics.Win.ShowInkButton.Never">
            <summary>
            Never show the Ink Button
            </summary>
        </member>
        <member name="T:Infragistics.Win.ColorRenderMode">
            <summary>
            Enumeration of the various methods of printing colors.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorRenderMode.Color">
            <summary>
            Colors and background images are rendered as they are on the screen.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorRenderMode.GrayScale">
            <summary>
            Colors and images are rendered using grayscale.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ColorRenderMode.Monochrome">
            <summary>
            Background colors and background images are not rendered. Foreground colors are rendered in black.
            </summary>
        </member>
        <member name="T:Infragistics.Win.MousePanning">
            <summary>
            Determines what type of mouse panning is supported.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MousePanning.Default">
            <summary>
            Default mouse panning mode
            </summary>
        </member>
        <member name="F:Infragistics.Win.MousePanning.None">
            <summary>
            Mouse panning is not allowed
            </summary>
        </member>
        <member name="F:Infragistics.Win.MousePanning.Horizontal">
            <summary>
            The middle mouse button may be used to pan horizontally.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MousePanning.Vertical">
            <summary>
            The middle mouse button may be used to pan vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MousePanning.Both">
            <summary>
            The middle mouse button may be used to pan vertically and horizontally.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementInputType">
            <summary>
            Used for specifying <b>inputType</b> parameter to <see cref="M:Infragistics.Win.UIElement.WantsInputNotification(Infragistics.Win.UIElementInputType,System.Drawing.Point)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.Unknown">
            <summary>
            Unknwon notification.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.Cursor">
            <summary>
            Notification associated with getting the current cursor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseClick">
            <summary>
            Mouse click notification.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseDoubleClick">
            <summary>
            Mouse double click notification.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseDownUp">
            <summary>
            Mouse down and up notifications.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseEnterLeave">
            <summary>
            Mouse enter and leave notifications.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseHover">
            <summary>
            Mouse hover notification.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UIElementInputType.MouseMove">
            <summary>
            Mouse move notification.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueConstraintFlags">
            <summary>
            Used for specifying which constraints should be applied to the input value of the <see cref="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.All">
            <summary>
            Specifies that all constraints, both implicit and explicit, should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.Enumeration">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.Enumeration"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.FixedValue">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.FixedValue"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.ImplicitValueAsTypeConstraints">
            <summary>
            Specifies that the implicit constraints imposed by the pseudo-datatype supplied by the 
            <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/> property should be enforced during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.ImplicitTypeParameterConstraints">
            <summary>
            Specifies that the implicit constraints imposed by the Type argument to the <see cref="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)"/>
            method should be enforced during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MaxExclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MaxExclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MaxInclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MaxInclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MaxLength">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MaxLength"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MinExclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MinExclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MinInclusive">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MinInclusive"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.MinLength">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.MinLength"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.Nullable">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.Nullable"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintFlags.RegexPattern">
            <summary>
            Specifies that the <see cref="P:Infragistics.Win.ValueConstraint.RegexPattern"/> constraint should be applied during validation.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValidateAsType">
            <summary>
            Used to specify how the <see cref="T:Infragistics.Win.ValueConstraint"/> class should validate a value.  Each of these
            values represents a data type which has implicit constraints, such as a minimal value, etc.  Those
            constraints are used by the <see cref="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)"/> method to enforce data validity.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Unknown">
            <summary>
            Represents an unrecognized or unspecified type.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Boolean">
            <summary>
            Represents a value which can either be true or false.  Corresponds to System.Boolean.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Byte">
            <summary>
            Represents a signed byte.  Corresponds to System.SByte.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.DateTime">
            <summary>
            Represents a date and time.  Corresponds to System.DateTime.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Decimal">
            <summary>
            Represents a high precision floating point value.  Corresponds to System.Decimal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Double">
            <summary>
            Represents a high magnitude floating point value.  Corresponds to System.Double.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Float">
            <summary>
            Represents a floating point value.  Corresponds to System.Single.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Integer16">
            <summary>
            Represents a signed 16 bit integral value.  Corresponds to System.Int16.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Integer32">
            <summary>
            Represents a signed 32 bit integral value.  Corresponds to System.Int32.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Integer64">
            <summary>
            Represents a signed 64 bit integral value.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.NegativeInteger64">
            <summary>
            Represents a signed 64 bit integral number whose maximal value is -1, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.NonNegativeInteger64">
            <summary>
            Represents a signed 64 bit integral number whose minimal value is 0, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.NonPositiveInteger64">
            <summary>
            Represents a signed 64 bit integral number whose maximal value is 0, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.PositiveInteger64">
            <summary>
            Represents a signed 64 bit integral number whose minimal value is -1, inclusive.  Corresponds to System.Int64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Text">
            <summary>
            Represents textual data.  Corresponds to System.String.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.TimeSpan">
            <summary>
            Represents a length of time.  Corresponds to System.TimeSpan.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.UnsignedByte">
            <summary>
            Represents an unsigned byte value.  Corresponds to System.Byte.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.UnsignedInteger16">
            <summary>
            Represents an unsigned 16 bit number.  Corresponds to System.UInt16.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.UnsignedInteger32">
            <summary>
            Represents an unsigned 32 bit number.  Corresponds to System.UInt32.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.UnsignedInteger64">
            <summary>
            Represents an unsigned 64 bit number.  Corresponds to System.UInt64.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValidateAsType.Uri">
            <summary>
            Represents a Uniform Resource Identifier.  Corresponds to System.Uri.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueConstraintPropertyID">
            <summary>
            Property identifiers for the <see cref="T:Infragistics.Win.ValueConstraint"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.Enumeration">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.Enumeration"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.FixedValue">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.FixedValue"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MaxExclusive">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MaxExclusive"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MaxInclusive">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MaxInclusive"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MaxLength">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MaxLength"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MinExclusive">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MinExclusive"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MinInclusive">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MinInclusive"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.MinLength">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.MinLength"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.Nullable">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.Nullable"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.RegexPattern">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.RegexPattern"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ValueConstraintPropertyID.ValidateAsType">
            <summary>
            Represents the <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/> property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.PropertyID">
            <summary>
            PropertyID
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Button">
            <summary>DisplayStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Buttons">
            <summary>DisplayStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DisplayStyle">
            <summary>DisplayStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.AcceptsReturn">
            <summary>AcceptsReturn</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.AcceptsTab">
            <summary>AcceptsTab</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.AutoSize">
            <summary>AutoSize</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.BorderStyle">
            <summary>BorderStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.CharacterCasing">
            <summary>CharacterCasing</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.HideSelection">
            <summary>HideSelection</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Lines">
            <summary>Lines</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxLength">
            <summary>MaxLength</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Modified">
            <summary>Modified</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Multiline">
            <summary>Multiline</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.PasswordChar">
            <summary>PasswordChar</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ReadOnly">
            <summary>ReadOnly</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Scrollbars">
            <summary>Scrollbars</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SelectedText">
            <summary>SelectedText</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SelectionStart">
            <summary>SelectionStart</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SelectionLength">
            <summary>SelectionLength</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Text">
            <summary>Text</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.WordWrap">
            <summary>WordWrap</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.NullText">
            <summary>NullText</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ContextMenu">
            <summary>ContextMenu</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SelectedItem">
            <summary>SelectedItem</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SelectedIndex">
            <summary>SelectedIndex</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ButtonAlignment">
            <summary>ButtonAlignment</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ButtonStyle">
            <summary>ButtonStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ButtonWidth">
            <summary>ButtonWidth</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownListAlignment">
            <summary>DropDownListAlignment</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownListWidth">
            <summary>DropDownListWidth</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownStyle">
            <summary>DropDownStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.HasMRUList">
            <summary>HasMRUList</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxDropDownLines">
            <summary>MaxDropDownLines</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxDropDownItems">
            <summary>MaxDropDownItems</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxMRUItems">
            <summary>MaxMRUItems</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SortStyle">
            <summary>SortStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MRUList">
            <summary>MRUList</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ShowFontTypeIndicator">
            <summary>ShowFontTypeIndicator</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ShowFontNamesInFont">
            <summary>ShowFontNamesInFont</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.FontSizeInPoints">
            <summary>FontSizeInPoints</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MinDate">
            <summary>MinDate</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxDate">
            <summary>MaxDate</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DateTime">
            <summary>DateTime</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaskInput">
            <summary>MaskInput</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DataMode">
            <summary>DataMode</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DisplayMode">
            <summary>DisplayMode</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ClipMode">
            <summary>ClipMode</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.FormatProvider">
            <summary>FormatProvider</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.FormatString">
            <summary>FormatString</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownCalendarAlignment">
            <summary>DropDownCalendarAlignment</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownButtonAlignment">
            <summary>DropDownButtonAlignment</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SpinButtonAlignment">
            <summary>SpinButtonAlignment</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.DropDownButtonDisplayStyle">
            <summary>DropDownButtonDisplayStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SpinButtonDisplayStyle">
            <summary>SpinButtonDisplayStyle</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Value">
            <summary>Value</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MinValue">
            <summary>MinValue</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.MaxValue">
            <summary>MaxValue</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.NumericType">
            <summary>NumericType</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Appearance">
            <summary>Appearance</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ImageList">
            <summary>ImageList</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.AlwaysInEditMode">
            <summary>AlwaysInEditMode</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ImageTransparentColor">
            <summary>ImageTransparentColor</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.AutoComplete">
            <summary>AutoComplete</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Nullable">
            <summary>Nullable</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.PromptChar">
            <summary>PromptChar</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.CalculatorStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Format">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ShowMemoryButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ShowCustomButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.KeyCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.KeyCodeAlternate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ValueObject">
            <summary>ValueObject</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.UseMnemonics">
            <summary>UseMnemonics</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.FocusedIndex">
            <summary>FocusedIndex</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.CheckedValue">
            <summary>CheckedValue</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.TabNavigation">
            <summary>
            TabNavigation
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.SpinWrap">
            <summary>SpinWrap</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.LimitToList">
            <summary>LimitToList</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.ShowOverflowIndicator">
            <summary>ShowOverflowIndicator</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.OverflowIndicatorImage">
            <summary>OverflowIndicatorImage</summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinEditors.PropertyID.NullTextAppearance">
            <summary>NullTextAppearance</summary>
        </member>
        <member name="T:Infragistics.Win.UIElementEventHandler">
            <summary>
            Event handler used for any generic element event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementAdjustedEventHandler">
            <summary>
            Event handler used for when an element has been adjusted/moved
            </summary>
        </member>
        <member name="T:Infragistics.Win.PropertyChangedEventHandler">
            <summary>
            delegate for handling event that occurs when a property has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.PropertyChangedEventArgs">
            <summary>
            Event parameters used for the PropertyChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Win.PropertyChangedEventArgs.#ctor(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Constructor, initializes a new instance of the <b>PropertyChangedEventArgs</b> class.
            </summary>
            <param name="propChangeInfo"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="P:Infragistics.Win.PropertyChangedEventArgs.ChangeInfo">
            <summary>
            The PropChangeInfo object representing information about the property that changed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementEventArgs">
            <summary>
            Event parameters used for any generic element event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementEventArgs.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>UIElementEventArgs</b> class.
            </summary>
            <param name="element"><see cref="T:Infragistics.Win.UIElement"/></param>
        </member>
        <member name="P:Infragistics.Win.UIElementEventArgs.Element">
            <summary>
            The appropriate element (read-only) 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UIElementAdjustedEventArgs">
            <summary>
            Event parameters used for when an element's size or position
            has been adjusted via the mouse.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UIElementAdjustedEventArgs.#ctor(Infragistics.Win.AdjustableUIElement,System.Drawing.Point)">
            <summary>
            Constructor, initializes a new instance of the <b>UIElementAdjustedEventArgs</b> class.
            </summary>
            <param name="element"><see cref="T:Infragistics.Win.UIElement"/></param>
            <param name="delta"><see cref="T:System.Drawing.Point"/></param>
        </member>
        <member name="P:Infragistics.Win.UIElementAdjustedEventArgs.Delta">
            <summary>
            The change in the x and y direction (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs">
            <summary>
            Event arguments class for the ValidationError event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs"/> class.
            </summary>
            <param name="lastValidValue"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs"/> class.
            </summary>
            <param name="lastValidValue"></param>
            <param name="invalidText"></param>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.Beep">
            <summary>
            Gets/sets whether a beep will be generated
            </summary>
            <remarks><p class="body">The default value is <b>true</b>.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.RetainFocus">
            <summary>
            Gets/sets whether the control will stay focused.
            </summary>
            <remarks><p class="body">The default value is <b>true</b>.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.LastValidValue">
            <summary>
            Gets the control's last valid value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinEditors.ValidationErrorEventArgs.InvalidText">
            <summary>
            Gets the control's invalid text.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ExpansionIndicatorUIElement">
            <summary>
            ExpansionIndicatorUIElement.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ExpansionIndicatorUIElement.PreferredIndicatorSize">
            <summary>
            Best size to use for the indicator element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>ExpansionIndicatorUIElement</b> class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.Toggle">
            <summary>
            Notifies the derived class that the state of the indicator has been toggled.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            this element doesn't draw an image background
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Render the Expansion Indicator in the foreground
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            Expand/Collapse the indicator
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.ExpansionIndicatorUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Handles the double click response of the element.
            </summary>
            <remarks>Since invoking the click would result in a net effect of returning to the
            original state and since the system tree does not respond to a double click of the
            expansion indicator, the double click will not be processed.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ExpansionIndicatorUIElement.IsOpen">
            <summary>
            Indicates if the expansion indicator is open/expanded.
            </summary>
            <remarks>This method should be overriden by derived classes to control the state of the item.</remarks>
        </member>
        <member name="P:Infragistics.Win.ExpansionIndicatorUIElement.CanExpand">
            <summary>
            Indicates whether the associated object can be expanded.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ExpansionIndicatorUIElement.BorderStyle">
            <summary>
            Returns the border for the expansion indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IUIElementDrawFilter">
            <summary>
            Interface supplied by the user of a control to perform custom
            drawing of one or more UIElements
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementDrawFilter.GetPhasesToFilter(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Called before each element is about to be drawn.
            </summary>
            <param name="drawParams">Exposes properties required for drawing an element (e.g. Element, Graphics, InvalidRect etc.) </param>
            <returns>Bit flags indicating which phases of the drawing operation to filter. The DrawElement method will be called only for those phases.</returns>
        </member>
        <member name="M:Infragistics.Win.IUIElementDrawFilter.DrawElement(Infragistics.Win.DrawPhase,Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Called during the drawing operation of a UIElement for a specific phase
            of the operation. This will only be called for the phases returned 
            from the GetPhasesToFilter method.
            </summary>
            <param name="drawPhase">Contains a single bit which identifies the current draw phase.</param>
            <param name="drawParams">Exposes properties required for drawing an element (e.g. Element, Graphics, InvalidRect etc.) </param>
            <returns>Returning true from this method indicates that this phase has been handled and the default processing should be skipped.</returns>
        </member>
        <member name="T:Infragistics.Win.IUIElementCursorFilter">
            <summary>
            Interface supplied by the user of a control to allow custom
            cursors to be supplied
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementCursorFilter.BeforeSetCursor(Infragistics.Win.UIElement,System.Boolean,System.Windows.Forms.Cursor@)">
            <summary>
            Called before the cursor is shown allowing a different
            cursor to be supplied.
            </summary>
            <param name="element">The element under the cursor.</param>
            <param name="adjustableCursor">True if mouse is over the element's adjustable area.</param>
            <param name="cursor">Initialized with the default cursor for this element.</param>
        </member>
        <member name="T:Infragistics.Win.IUIElementCreationFilter">
            <summary>
            Interface supplied by the user of a control to allow custom
            creation/positioning of child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementCreationFilter.BeforeCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            Called before child elements are to be created/positioned.
            This is called during a draw operation for an element
            whose ChildElementsDirty is set to true. Returning true from
            this method indicates that the default creation logic 
            should be bypassed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementCreationFilter.AfterCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            Called after an element's ChildElements have been
            created. The child element's can be repositioned here
            and/or new element's can be added.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISelectionStrategyFilter">
            <summary>
            Interface implemented by the user of a control to supply
            custom selection strategies.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategyFilter.GetSelectionStrategy(Infragistics.Shared.ISelectableItem)">
            <summary>
            Called to get the selection stragy for a specific
            item. Returning null means that the control will supply
            its own implementation.
            </summary>
        </member>
        <member name="T:Infragistics.Win.FontData">
            <summary>
            The FontData class is used to hold font properties
            (e.g. Bold, Italic, Name etc.) on appearances. It allows the
            overriding of individual properties. For example, if a control's
            base font was set to "MS San Serif" 8.5pt. An appearance 
            could override the Bold property to true and get a bold
            font without having to specify the name and size since that
            would be picked up from the base font.
            </summary>
            <seealso cref="T:Infragistics.Shared.SubObjectBase"/>
            <seealso cref="T:System.Runtime.Serialization.ISerializable"/>
        </member>
        <member name="M:Infragistics.Win.FontData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontData.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the fontdata object
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontData.Reset">
            <summary>
            Resets the properties back to their default values
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontData.ToString">
            <summary>
            Converts the object to a string based on its propety settings 
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontData.Name">
            <summary>
            Gets/sets the name of the font
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontData.SizeInPoints">
            <summary>
            Gets/sets the size of the font
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontData.Bold">
            <summary>
            Gets/sets whether to make the font bold
            </summary>
            <remarks>
            This property is not serialized directly at design time. Instead the <see cref="P:Infragistics.Win.FontData.BoldAsString"/> property is serialized as a string with a setting of 'True, 'False' or 'Default'. 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.BoldAsString"/>
        </member>
        <member name="P:Infragistics.Win.FontData.Italic">
            <summary>
            Gets/sets whether to make the font italic
            </summary>
            <remarks>
            This property is not serialized directly at design time. Instead the <see cref="P:Infragistics.Win.FontData.ItalicAsString"/> property is serialized as a string with a setting of 'True, 'False' or 'Default'. 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.ItalicAsString"/>
        </member>
        <member name="P:Infragistics.Win.FontData.Strikeout">
            <summary>
            Gets/sets whether to make the font have a strikeout line thru it
            </summary>
            <remarks>
            This property is not serialized directly at design time. Instead the <see cref="P:Infragistics.Win.FontData.StrikeoutAsString"/> property is serialized as a string with a setting of 'True, 'False' or 'Default'. 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.StrikeoutAsString"/>
        </member>
        <member name="P:Infragistics.Win.FontData.Underline">
            <summary>
            Gets/sets whether to make the font is underlined
            </summary>
            <remarks>
            This property is not serialized directly at design time. Instead the <see cref="P:Infragistics.Win.FontData.UnderlineAsString"/> property is serialized as a string with a setting of 'True, 'False' or 'Default'. 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.UnderlineAsString"/>
        </member>
        <member name="P:Infragistics.Win.FontData.BoldAsString">
            <summary>
            Property used to serialize the <see cref="P:Infragistics.Win.FontData.Bold"/> property as a string at design time.
            </summary>
            <remarks>
            <p>The property get will return "True", "False" or "Default".</p> 
            <p>The property set will set the <see cref="P:Infragistics.Win.FontData.Bold"/> property to <see cref="F:Infragistics.Win.DefaultableBoolean.True"/> for the string 'True', to <see cref="F:Infragistics.Win.DefaultableBoolean.False"/> for the string 'False' or to <see cref="F:Infragistics.Win.DefaultableBoolean.Default"/> for all other string values.</p> 
            <p>The reason for this parallel string property is to allow version independent serialization of the <see cref="P:Infragistics.Win.FontData.Bold"/> setting into the form's .resx file for forms whose <b>Localizable</b> property is true.</p> 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.Bold"/>
        </member>
        <member name="P:Infragistics.Win.FontData.ItalicAsString">
            <summary>
            Property used to serialize the <see cref="P:Infragistics.Win.FontData.Italic"/> property as a string at design time.
            </summary>
            <remarks>
            <p>The property get will return "True", "False" or "Default".</p> 
            <p>The property set will set the <see cref="P:Infragistics.Win.FontData.Italic"/> property to <see cref="F:Infragistics.Win.DefaultableBoolean.True"/> for the string 'True', to <see cref="F:Infragistics.Win.DefaultableBoolean.False"/> for the string 'False' or to <see cref="F:Infragistics.Win.DefaultableBoolean.Default"/> for all other string values.</p> 
            <p>The reason for this parallel string property is to allow version independent serialization of the <see cref="P:Infragistics.Win.FontData.Italic"/> setting into the form's .resx file for forms whose <b>Localizable</b> property is true.</p> 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.Italic"/>
        </member>
        <member name="P:Infragistics.Win.FontData.StrikeoutAsString">
            <summary>
            Property used to serialize the <see cref="P:Infragistics.Win.FontData.Strikeout"/> property as a string at design time.
            </summary>
            <remarks>
            <p>The property get will return "True", "False" or "Default".</p> 
            <p>The property set will set the <see cref="P:Infragistics.Win.FontData.Strikeout"/> property to <see cref="F:Infragistics.Win.DefaultableBoolean.True"/> for the string 'True', to <see cref="F:Infragistics.Win.DefaultableBoolean.False"/> for the string 'False' or to <see cref="F:Infragistics.Win.DefaultableBoolean.Default"/> for all other string values.</p> 
            <p>The reason for this parallel string property is to allow version independent serialization of the <see cref="P:Infragistics.Win.FontData.Strikeout"/> setting into the form's .resx file for forms whose <b>Localizable</b> property is true.</p> 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.Strikeout"/>
        </member>
        <member name="P:Infragistics.Win.FontData.UnderlineAsString">
            <summary>
            Property used to serialize the <see cref="P:Infragistics.Win.FontData.Underline"/> property as a string at design time.
            </summary>
            <remarks>
            <p>The property get will return "True", "False" or "Default".</p> 
            <p>The property set will set the <see cref="P:Infragistics.Win.FontData.Underline"/> property to <see cref="F:Infragistics.Win.DefaultableBoolean.True"/> for the string 'True', to <see cref="F:Infragistics.Win.DefaultableBoolean.False"/> for the string 'False' or to <see cref="F:Infragistics.Win.DefaultableBoolean.Default"/> for all other string values.</p> 
            <p>The reason for this parallel string property is to allow version independent serialization of the <see cref="P:Infragistics.Win.FontData.Underline"/> setting into the form's .resx file for forms whose <b>Localizable</b> property is true.</p> 
            </remarks>
            <seealso cref="P:Infragistics.Win.FontData.Underline"/>
        </member>
        <member name="P:Infragistics.Win.FontData.NonDefaultSettings">
            <summary>
            Bit flags that indicate which properties have non-default values.
            </summary>
        </member>
        <member name="T:Infragistics.Win.FontNameEditor">
            <summary>
            FontNameEditor class implementation
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.#ctor">
            <summary>
            Creates a new instance of the FontNameEditor class
            </summary>
            <remarks>
            <p class="note">
            Note that because each item is drawn using the font that it represents, the ValueListItem's Appearance in not honored.<br></br>
            Also note that only the following Appearance properties are honored at the ValueList level:<br></br>
            <ul>
            <li class="body">BackColor</li>
            <li class="body">ForeColor</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a new instance of the FontNameEditor class
            </summary>
            <remarks>
            <param name="defaultOwner">The EmbeddableEditorOwnerBase-derived associated with this editor</param>
            <p class="note">
            Note that because each item is drawn using the font that it represents, the ValueListItem's Appearance in not honored.<br></br>
            Also note that only the following Appearance properties are honored at the ValueList level:<br></br>
            <ul>
            <li class="body">BackColor</li>
            <li class="body">ForeColor</li>
            </ul>
            </p>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.OnDispose">
            <summary>
            Called when the FontNameEditor class is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.PermissionsSafeIsFontHumanReadable(System.String)">
            <summary>
            Calls IsFontHumanReadable if the caller has the appropriate UI permissions; otherwise uses the FOnt object's GdiCharset property
            </summary>
            <param name="fontName"></param>
            <returns>A boolean indicating whether the font is readable</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.InternalOnEmbeddableTextBoxListenerKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the actual implementation of the IEmbeddableTextBoxListener.OnKeyDown method
            </summary>
            <param name="e">Key event arguments</param>
            <returns>A boolean indicating whether the keystroke was handled</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.InternalResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            InternalResolveValueListAppearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.IsSymbolFont(System.String)">
            <summary>
            Returns whether the font corresponding to the specified fontName is a symbol font.
            </summary>
            <param name="fontName">The value of the Name property of the font to be evaluated</param>
            <returns>A boolean indicating whether the font corresponding to the specified fontName is a symbol font.</returns>
            <remarks>The Font object has a 'GdiCharSet' property which always returns 1 (Default); this appears to be incorrect.<br></br>
            This method provides a means by which to determine whether a font is a symbol font.</remarks>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.RefreshList">
            <summary>
            Causes the list to be repopulated with the names of available fonts
            </summary>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.GetValueList(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns an IValueList from the specified embeddable element, or null if none is provided.
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element from which to obtain the owner info. Note that this parameter is ignored for the FontNameEditor.</param>
            <returns>An IValueList interface implementor, or null if the owner does not provide one.</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.OnInstalledFontsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the system InstalledFontsChanged event
            </summary>
            <param name="sender">The object that sent the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.OnApplicationIdle(System.Object,System.EventArgs)">
            <summary>
            Called when the application finishes processing and is about to enter the idle state.
            </summary>
            <param name="sender">The object that sent the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.OnDrawValueListItem(System.Object,Infragistics.Win.DrawValueListItemEventArgs)">
            <summary>
            OnDrawValueListItem
            </summary>
            <param name="sender">The object that is sending the event</param>
            <param name="args">DrawValueListItemEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.System#ICloneable#Clone">
            <summary>
            Clones the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.FontNameEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.ShowFontNamesInFont">
            <summary>
            Gets/sets whether to apply the corresponding font to items in the list
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.ShowFontTypeIndicator">
            <summary>
            Gets/sets whether to display images for items in the list
            </summary>
            <remarks>
            Since true type fonts are the only types of fonts that appear in the list, the image that is applied is the "true type font" image
            </remarks>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.InternalValueList">
            <summary>
            Returns the internal ValueList object used by the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.ValueList">
            <summary>
            Returns the IValueList to be used by this instance of the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.InstalledFontsChangedHandler">
            <summary>
            Returns the event handler that notifies OnInstalledFontsChanged
            </summary>
        </member>
        <member name="P:Infragistics.Win.FontNameEditor.DrawValueListItemHandler">
            <summary>
            Returns the event handler that notifies DrawItem
            </summary>
        </member>
        <member name="T:Infragistics.Win.FormatProviderPropertyEditor">
            <summary>
            FormatProviderPropertyEditor - TypeEditor for properties of type IFormatInfo
            </summary>
        </member>
        <member name="F:Infragistics.Win.FormatProviderPropertyEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.FormatProviderPropertyEditor.#ctor(System.IFormatProvider@)">
            <summary>
            Creates a new instance of the FormatProviderPropertyEditor
            </summary>
            <param name="formatProvider">A reference to the IFormatProvider the dialog will be initialized with</param>
        </member>
        <member name="M:Infragistics.Win.FormatProviderPropertyEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.FormatProviderPropertyEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.FormatProviderPropertyEditor.PopulateListViewWithCultureInfo">
            <summary>
            Iterates the system cultures and adds their LCID, DisplayName, and NativeName
            to the ListView. Also populates an ArrayList with each culture's IFormatProvider
            </summary>
        </member>
        <member name="P:Infragistics.Win.FormatProviderPropertyEditor.FormatProvider">
            <summary>
            Returns the currently selected IFormatProvider, or null
            Note that this property is only valid after the form is closed
            </summary>
        </member>
        <member name="T:Infragistics.Win.FormatProviderTypeConverter">
            <summary>
            TypeConverter for IFormatProvider
            </summary>
        </member>
        <member name="M:Infragistics.Win.FormatProviderTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Indicates which types the class can be cast to.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>A boolean indicating if the class can be converted to the specified type.</returns>
        </member>
        <member name="M:Infragistics.Win.FormatProviderTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">Object to convert.</param>
            <param name="destinationType">Type to which the object is to be converted.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Infragistics.Win.FormatProviderEditor">
            <summary>
            class to show dialog for nodes collection property
            </summary>
        </member>
        <member name="M:Infragistics.Win.FormatProviderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.FormatProviderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="T:Infragistics.Win.HeaderUIElementBase">
            <summary>
            HeaderUIElementBase
            </summary>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.#ctor(Infragistics.Win.UIElement,System.Boolean,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of the <b>HeaderUIElementBase</b> class.
            </summary>
            <param name="parent">Parent element</param>
            <param name="supportsLeftRightAdjustments">True for vertical bar adjustments</param>
            <param name="supportsUpDownAdjustments">True for horizonatl bar adjustments</param>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the themed version of the element.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            override initappearance 
            </summary>
            <param name="appearance"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.HeaderUIElementBase.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overridden.
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.ActiveThemeMouseTracking">
            <summary>
            Indicates if the element needs to monitor the enter and exiting of the mouse
            over the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.HeaderState">
            <summary>
            Returns the current state of the header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.RequiresSeparator">
            <summary>
            Returns a boolean indicating if the item requires the rendering a separator.
            </summary>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.Adjustable">
            <summary>
            Returns true if this element can be moved or resized by the mouse 
            </summary>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.HeaderStyle">
            <summary>
            Returns the HeaderStyle that this element should use while rendering.
            </summary>
        </member>
        <member name="P:Infragistics.Win.HeaderUIElementBase.RectInsideBorders">
            <summary>
            Returns the rectangle within the borders of the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISilentTextBoxOwner">
            <summary>
            Provides a communication channel between the a TextBox-derived class and its parent control
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISilentTextBoxOwner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when the control's OnKeyDown method is called
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ISilentTextBoxOwner.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when the control's OnKeyPress method is called
            </summary>
            <param name="e">Key press event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ISilentTextBoxOwner.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when the control's OnKeyUp method is called
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ISilentTextBoxOwner.ShouldProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the ProcessDialogKey method should be called
            </summary>
            <param name="keyData"></param>
            <returns>A boolean indicating whether the ProcessDialogKey method should be called</returns>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGContextMenu">
            <summary>
            IGContextMenu.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.#ctor">
            <summary>
            Initializes a new <b>IGContextMenu</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.#ctor(System.Windows.Forms.MenuItem[])">
            <summary>
            Initializes a new <b>IGContextMenu</b>
            </summary>
            <param name="menuItems">Array of <see cref="T:System.Windows.Forms.MenuItem"/> instances to be displayed in the context menu.</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.ShouldSerializeImageSize">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.IGControls.IGContextMenu.ImageSize"/> property needs to be serialized
            </summary>
            <returns>True if the property differs from the default value</returns>
            <seealso cref="P:Infragistics.Win.IGControls.IGContextMenu.ImageSize"/>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.ResetImageSize">
            <summary>
            Resets the value of the <see cref="P:Infragistics.Win.IGControls.IGContextMenu.ImageSize"/> property to its default value
            </summary>
            <seealso cref="P:Infragistics.Win.IGControls.IGContextMenu.ImageSize"/>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.OnPopup(System.EventArgs)">
            <summary>
            Invoked before the context menu is going to be displayed
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.Dispose(System.Boolean)">
            <summary>
            Invoked when the context menu is being disposed.
            </summary>
            <param name="disposing">True if unmanaged resources should be disposed</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.GetBorderWidth">
            <summary>
            Returns the widths of the non client areas of the menu.
            </summary>
            <returns>A UIElementBorderWidths structure containing the size of the borders.</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.EraseBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Invoked when the background of the window needs to be erased.
            </summary>
            <param name="e">Paint event arguments</param>
            <returns>True if the default processing should be prevented.</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGContextMenu.NonClientPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Invoked when the non client area of the context menu needs to be painted
            </summary>
            <param name="e">Paint event arguments</param>
            <param name="displayRect">Rectangle encompassing the context menu</param>
            <returns>True if the default processing should be prevented.</returns>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.Style">
            <summary>
            Returns or sets the style of the menu.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.StyleResolved">
            <summary>
            Returns the resolved menu style used to render the context menu.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.HighlightDisableItems">
            <summary>
            Gets/sets whether disabled items will be appear highlight when the 
            mouse moves over them.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.HighlightDisableItemsResolved">
            <summary>
            Returns the resolved value indicating whether disabled items
            are highlighted as the mouse moves over them.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.ShowShortcuts">
            <summary>
            Gets/sets whether shortcuts are displayed in the context menu.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.ImageSize">
            <summary>
            Gets/sets the size of the image
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGContextMenu.ImageList">
            <summary>
            Returns or sets the imagelist used to obtain the images for the menu items.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IGControls.MenuStyle">
            <summary>
            Menu styles
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.Standard">
            <summary>
            Standard menus
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.Office2000">
            <summary>
            Office 2000 style menu
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.OfficeXP">
            <summary>
            Office XP style menu
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.Office2003">
            <summary>
            Office 2003 style menu
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.VisualStudio2005">
            <summary>
            Visual Studio 2005 style menu
            </summary>
        </member>
        <member name="F:Infragistics.Win.IGControls.MenuStyle.System">
            <summary>
            The menu items are not owner drawn.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IGControls.IGMenuItem">
            <summary>
            IGMenuItem.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor">
            <summary>
            Initializes a new <b>IGMenuItem</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])">
            <summary>
            Initializes a new <b>IGMenuItem</b> with the specified parameters
            </summary>
            <param name="mergeType">Merge type</param>
            <param name="mergeOrder">Merge order</param>
            <param name="shortcut">Shortcut</param>
            <param name="text">Text to be displayed</param>
            <param name="onClick">Click event handler</param>
            <param name="onPopup">Popup event handler</param>
            <param name="onSelect">Select event handler</param>
            <param name="items">Array of menu items</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor(System.String)">
            <summary>
            Initializes a new <b>IGMenuItem</b> with the specified parameter
            </summary>
            <param name="text">Text to be displayed</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Initializes a new <b>IGMenuItem</b> with the specified parameters
            </summary>
            <param name="text">Text to be displayed</param>
            <param name="onClick">Click event handler</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)">
            <summary>
            Initializes a new <b>IGMenuItem</b> with the specified parameters
            </summary>
            <param name="text">Text to be displayed</param>
            <param name="onClick">Click event handler</param>
            <param name="shortcut">Shortcut</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])">
            <summary>
            Initializes a new <b>IGMenuItem</b> with the specified parameters
            </summary>
            <param name="text">Text to be displayed</param>
            <param name="items">Array of menu items</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Invoked when the size of the menu item should be returned for an owner drawn menu.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Invoked when the owner drawn menu is to be rendered.
            </summary>
            <param name="e">Event arguments containing information about the menu item to draw</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.CloneMenu">
            <summary>
            Invoked when a copy of the menu item should be created.
            </summary>
            <returns>A clone of the menu item</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.GetItemSize(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Invoked from the OnMeasureItem to determine the size of the owner drawn menu item
            </summary>
            <param name="e">Event arguments for the <see cref="E:System.Windows.Forms.MenuItem.MeasureItem"/></param>
            <returns>The size of the menu item</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.DrawMenuItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Invoked from the OnDrawItem to render the menu item.
            </summary>
            <param name="e">Event arguments for the <see cref="E:System.Windows.Forms.MenuItem.DrawItem"/> event</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.IsBottomItem(System.Int32)">
            <summary>
            Indicates if the specified index is the end of a group of menu items.
            </summary>
            <param name="index">Index of the item to check</param>
            <returns>True if the item is last menu item, or is before a break or separator</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.GetStringFormat(System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Drawing.StringFormat"/> object used to render the string
            </summary>
            <param name="selected">True if the item is currently selected</param>
            <returns>The <b>StringFormat</b> object used when measuring and drawing the text</returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.GetImageSize">
            <summary>
            Returns the size of the images displayed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.GetImageAreaSize">
            <summary>
            Return the size of the area that contains the menu image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.DrawMenuGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.MenuGlyph,System.Drawing.Color)">
            <summary>
            Draws the specified menu glyph at the specified coordinates
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="rect">Rect of the glyph</param>
            <param name="glyph">Glyph to render</param>
            <param name="foreColor">ForeColor</param>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.GetImage">
            <summary>
            Returns the image displayed in the menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IGControls.IGMenuItem.DrawText(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.StringFormat)">
            <summary>
            Used to render the text for the menu item
            </summary>
            <param name="g">Graphics object used to render the text</param>
            <param name="foreColor">Forecolor of the text</param>
            <param name="textRect">Rectangle where the text should be rendered</param>
            <param name="stringFormat">String format used to render the text</param>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.StyleResolved">
            <summary>
            Returns the style of menu being rendered
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.SeparatorSize">
            <summary>
            Returns the height required for the separator tool
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.IsSeparator">
            <summary>
            Indicates if the menu item is a separator
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.IsRightToLeft">
            <summary>
            Indicates if the menu is oriented from right to left.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.RequiresArrowArea">
            <summary>
            Indicates if the menu item will display an arrow indicating it contains sub items
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.ArrowAreaWidth">
            <summary>
            Returns the width needed for the sub items arrow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.PreTextSpace">
            <summary>
            Returns the amount of space before the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.ShortcutString">
            <summary>
            Returns the string to render for the shortcut associated with the menu item
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.ShowShortcutResolved">
            <summary>
            Returns a value indicating whether a shortcut should be displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.Tag">
            <summary>
            Gets/sets user defined information to associate with the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.Image">
            <summary>
            Returns or sets the image displayed in the menu item.
            </summary>
            <remarks>
            This property may be set to an <see cref="T:System.Drawing.Image"/> object or an integer
            indicating the index of the item in the ImageList of the <see cref="T:Infragistics.Win.IGControls.IGContextMenu"/>.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.IGControls.IGMenuItem.ImageAreaPadding">
            <summary>
            Returns the amount of padding around the image.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IGPanel">
            <summary>
            Base class derived from System.Windows.Forms.Panel that supports
            AutoScroll without scrolling the background.
            </summary>
            <remarks>Requires unmanaged code rights to prevent flickering.</remarks>
        </member>
        <member name="M:Infragistics.Win.IGPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGPanel.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <remarks>
            <p class="body">Passed a boolean value called 'disposing' to determine if the resources should be cleaned up.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.IGPanel.OnCreateControl">
            <summary>
            Called when the control is created
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGPanel.OnVisibleChanged(System.EventArgs)">
            <summary>
            Called when the Visible property changes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGPanel.VerifyAutoScroll">
            <summary>
            Will attempt to subclass the window if the <see cref="P:Infragistics.Win.IGPanel.CanScroll"/> property returns true.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Does nothing since the background is drawn in OnPaint
            </summary>
        </member>
        <member name="M:Infragistics.Win.IGPanel.PaintTransparentBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the parent background into the specified paint event argument's
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="clipRectangle">Invalid rect</param>
        </member>
        <member name="P:Infragistics.Win.IGPanel.AutoScroll">
            <summary>
            Gets or sets a value indicating whether the container will allow the user to scroll to any controls placed outside of its visible boundaries.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IGPanel.CanScroll">
            <summary>
            Returns true if this panel can scroll. 
            </summary>
            <remarks>The default implemenation returns true for created visible controls whose AutoScroll property is true at runtime only.</remarks>
        </member>
        <member name="P:Infragistics.Win.IGPanel.CanSubclass">
            <summary>
            Returns true until a security exception is thrown trying to subclass the control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DependentImageAndTextButtonUIElement">
            <summary>
            An ImageAndTextUIElement that gets the information required to render from an object that implements the <see cref="T:Infragistics.Win.IUIElementImageAndTextProvider"/> interface
            </summary>
        </member>
        <member name="M:Infragistics.Win.DependentImageAndTextButtonUIElement.#ctor(Infragistics.Win.IUIElementImageAndTextProvider,Infragistics.Win.UIElement)">
            <summary>
            Initializes a new DependentImageAndTextUIElement
            </summary>
            <param name="provider">Object implementing the <see cref="T:Infragistics.Win.IUIElementImageAndTextProvider"/> interface.</param>
            <param name="parent">Parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.DependentImageAndTextButtonUIElement.#ctor(Infragistics.Win.IUIElementImageAndTextProvider,Infragistics.Win.UIElement,Infragistics.Win.UIElementButtonType)">
            <summary>
            Initializes a new DependentImageAndTextUIElement
            </summary>
            <param name="provider">Object implementing the <see cref="T:Infragistics.Win.IUIElementImageAndTextProvider"/> interface.</param>
            <param name="parent">Parent UIElement</param>
            <param name="buttonType">Type of button</param>
        </member>
        <member name="M:Infragistics.Win.DependentImageAndTextButtonUIElement.InitProvider(Infragistics.Win.IUIElementImageAndTextProvider)">
            <summary>
            Initializes the object with the specified provider.
            </summary>
            <param name="provider">Object implementing the <see cref="T:Infragistics.Win.IUIElementImageAndTextProvider"/> interface.</param>
        </member>
        <member name="P:Infragistics.Win.DependentImageAndTextButtonUIElement.Provider">
            <summary>
            Returns the object that provides the information for rendering the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextButtonExUIElement">
            <summary>
            Button uielement representing a button with image and text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonExUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageAndTextButtonExUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextButtonExUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonExUIElement.ImageAndTextElement">
            <summary>
            Returns the contained uielement that displays the image and text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonExUIElement.Style">
            <summary>
            Gets/sets the display style for the button
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextButtonExUIElement.ButtonStyle">
            <summary>
            Overriden. Returns the button style used when displaying the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageAndTextUIElementEx">
            <summary>
            UIElement for displaying image and text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <b>ImageAndTextUIElementEx</b>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#ReserveShadowSpace(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines if space should be reserved for an image shadow.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image element may need to display a shadowed version of the image underneath the actual image.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#ShadowImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines if the button image has a shadow rendered underneath.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
            <returns>True if the image should display a shadowed version of the image underneath the actual image.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetScaledImageSize(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Maximum size for a scaled image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how the text is placed in relation to the image.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#ScaleImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if the image should be scaled.
            </summary>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetImage(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the image to be displayed.
            </summary>
            <remarks>
            May be null if there is no image to display.
            </remarks>
            <param name="element">ImageAndTextUIElement</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Gets the text to display
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#IsMultiLine(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates if multiple lines of text are to be rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetTextPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetImagePadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the padding around the image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#AdjustTextDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the text's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#AdjustImageDisplayRect(Infragistics.Win.ImageAndTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the image's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#IsVertical(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be displayed vertically
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#HotkeyPrefix(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#WrapText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text is to be wrapped
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#GetPadding(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns the amount of padding around the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#UseTextPlacement(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Indicates whether the text placement property should be used to determine the placement for the text element.
            </summary>
            <returns>True to use the text placement. Otherwise, the alignment properties are used.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.Infragistics#Win#IUIElementImageAndTextProvider#RotateText(Infragistics.Win.ImageAndTextUIElement)">
            <summary>
            Returns true if the text should be rotated 180 degrees
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.IntersectChildElementInvalidRect(Infragistics.Win.UIElement,System.Drawing.Rectangle)">
            <summary>
            Invoked by the child elements to determine the intersection of the child element's
            rectangle with the invalid rect.
            </summary>
            <param name="element">Child elements whose intersecting rect is to be returned</param>
            <param name="invalidRect">Invalid rect</param>
            <returns>The intersection of the child element's rect with the invalid rect.</returns>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.BeforeDrawChild(Infragistics.Win.UIElementDrawParams@,Infragistics.Win.DrawPhase)">
            <summary>
            Invoked before a phase of the child elements is invoked.
            </summary>
            <param name="drawParams">Draw parameters</param>
            <param name="phase">Phase being rendered</param>
        </member>
        <member name="M:Infragistics.Win.ImageAndTextUIElementEx.AfterDrawChild(Infragistics.Win.UIElementDrawParams@,Infragistics.Win.DrawPhase)">
            <summary>
            Invoked after a phase of the child elements is invoked.
            </summary>
            <param name="drawParams">Draw parameters</param>
            <param name="phase">Phase being rendered</param>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.RotateText">
            <summary>
            Gets/sets whether the text is rotated 180 degrees.
            </summary>
            <seealso cref="P:Infragistics.Win.ImageAndTextUIElementEx.Vertical"/>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.UseTextPlacement">
            <summary>
            Gets/sets whether the appearance alignments or the text placement takes precedence
            when positioning the text and image elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.Padding">
            <summary>
            Determines the padding around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ReserveShadowSpace">
            <summary>
            Gets/sets whether the space should be reserved for an image shadow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ShadowImage">
            <summary>
            Gets/sets whether the image in the button displays a shadowed version under the actual image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.TextPlacement">
            <summary>
            Determines the placement of the text in relation to the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ScaledImageSize">
            <summary>
            Determines the scaled size of an image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.Image">
            <summary>
            Image displayed in the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ImagePadding">
            <summary>
            Determines the padding around the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ScaleImage">
            <summary>
            Determines if the image is scaled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.Text">
            <summary>
            Text displayed in the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.TextPadding">
            <summary>
            Padding around the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.HotkeyPrefix">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.MultiLine">
            <summary>
            Determines if the text is displayed in multiple lines.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.Vertical">
            <summary>
            Determines if the text is rendered vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.WrapText">
            <summary>
            Determines if the text can be wrapped to multiple lines.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ImageHAlign">
            <summary>
            Gets/sets the horizontal alignment for the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ImageVAlign">
            <summary>
            Gets/sets the vertical alignment for the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.TextHAlign">
            <summary>
            Gets/sets the horizontal alignment for the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.TextVAlign">
            <summary>
            Gets/sets the vertical alignment for the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.Angle">
            <summary>
            Gets/sets the angle at which the elements are rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ClipChildren">
            <summary>
            Overriden. The child elements must be clipped if the image
            element is larger than the panel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.ClipRectChildren">
            <summary>
            Returns the rectangle by which the child elements should be clipped.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageAndTextUIElementEx.WantsDrawNotifications">
            <summary>
            Determines whether child element draw notifications should be invoked on the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageCaptureDialog">
            <summary>
            Dialog used to select an area of the screen to capture in a <b>Bitmap</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageCaptureDialog.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new <b>ImageCaptureDialog</b>
            </summary>
            <param name="imageSize">Size of the image to capture</param>
        </member>
        <member name="M:Infragistics.Win.ImageCaptureDialog.#ctor">
            <summary>
            Initializes a new <b>ImageCaptureDialog</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageCaptureDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageCaptureDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageCaptureDialog.Image">
            <summary>
            Returns the captured image
            </summary>
        </member>
        <member name="T:Infragistics.Win.IUIElementImageProvider">
            <summary>
            This is used by the DependentImageUIElement class to 
            get necessary information for rendering an image
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageProvider.GetImage(Infragistics.Win.DependentImageUIElement)">
            <summary>
            Returns the image
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementImageProvider.AdjustImageDisplayRect(Infragistics.Win.DependentImageUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the rect to deal with special cases (e.g. button down shifting)
            </summary>
        </member>
        <member name="T:Infragistics.Win.DependentImageUIElement">
            <summary>
            An image UIElement that gets the image related information
            from an object that implements the IUIElementImageProvider
            interface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DependentImageUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.IUIElementImageProvider)">
            <summary>
            DependentImageUIElement constructor
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="provider"><see cref="T:Infragistics.Win.IUIElementImageProvider"/> interface</param>
        </member>
        <member name="M:Infragistics.Win.DependentImageUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.DependentImageUIElement.AdjustImageDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Adjust's the display rect of the image
            </summary>
            <param name="displayRect"></param>
        </member>
        <member name="P:Infragistics.Win.DependentImageUIElement.Provider">
            <summary>
            The provider of the image data (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentImageUIElement.Image">
            <summary>
            The text string. The get calls the provider's 
            GetImage method. The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentImageUIElement.BorderStyle">
            <summary>
            The border style of the element (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentImageUIElement.BorderSides">
            <summary>
            Bits flags that specify which borders to draw (read only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageManager">
            <summary>
            Helper class for dealing with images.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageManager.CreateBitmapRegion(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Creates a region based on the masking out the specified color from the specified image
            </summary>
            <param name="bitmap">Image used as the basis for the region</param>
            <param name="transparentColor">Color that should be masked out</param>
            <returns>A Region object</returns>
        </member>
        <member name="T:Infragistics.Win.ImagePreview">
            <summary>
            ImagePreview control
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.#ctor">
            <summary>
            Initializes a new <b>ImagePreview</b> control
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.CalculateRequiredSize(System.Windows.Forms.BorderStyle,System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            Calculates the size required to display an image at the specified scale factor
            </summary>
            <param name="borderStyle">Border style of the control</param>
            <param name="imageSize">Image size</param>
            <param name="scaleX">Width scale factor</param>
            <param name="scaleY">Height scale factor</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.CalculatePreferredSize(System.Windows.Forms.BorderStyle,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Calculates the size of the control that can render the specified image size in the specified image area
            </summary>
            <param name="borderStyle">Borderstyle of the control</param>
            <param name="imageSize">Image size</param>
            <param name="imageAreaSize">Area for the images within the border</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.PerformAutoSize">
            <summary>
            Updates the size the control based on the current borderstyle, image size and image area.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Invoked when the size and/or position of the control changes
            </summary>
            <param name="x">New x coordinate</param>
            <param name="y">New y coordinate</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="specified">Indicates the type of change occuring</param>
        </member>
        <member name="M:Infragistics.Win.ImagePreview.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Invoked when the control must be rendered.
            </summary>
            <param name="e">Paint event arguments</param>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.AutoSize">
            <summary>
            Indicates if the control should automatically size itself.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.ImageRectangle">
            <summary>
            Returns the area within the control where the image is rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.BorderStyle">
            <summary>
            Gets/sets the borderstyle for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.DrawGrid">
            <summary>
            Gets/sets whether a grid is drawn for stretched images when autosized
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.ImageSize">
            <summary>
            Gets/sets the image size
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImagePreview.Image">
            <summary>
            Gets/sets the image to preview
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScreenSnapshot.OnDispose">
            <summary>
            Invoked when the object is disposed
            </summary>
        </member>
        <member name="T:Infragistics.Win.ImageRegion">
            <summary>
            A disposable class for managing region information created from an image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.#ctor(System.Drawing.Image,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageRegion"/> with the specified image and transparent color
            </summary>
            <param name="image">Image from which the base region is obtained.</param>
            <param name="transparentColor">Color used to determine which part of the image should be masked out.</param>
            <param name="shapeSize">Size to which the image should be resized before calculating the region information</param>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.#ctor(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageRegion"/> with the specified image and transparent color
            </summary>
            <param name="image">Image from which the base region is obtained.</param>
            <param name="shapeSize">Size to which the image should be resized before calculating the region information</param>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.#ctor(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageRegion"/> with the specified image and transparent color
            </summary>
            <param name="image">Image from which the base region is obtained.</param>
            <param name="transparentColor">Color used to determine which part of the image should be masked out.</param>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageRegion"/> with the specified image
            </summary>
            <param name="image">Image from which the base region is obtained.</param>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ImageRegion"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.OnDispose">
            <summary>
            Invoked when the Dispose method of the object is invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.OnRegionCreated(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.ImageRegion.RegionCreated"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ImageRegion.OnRegionDestroyed(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="F:Infragistics.Win.ImageRegion.RegionDestroyed"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Infragistics.Win.ImageRegion.RegionCreated">
            <summary>
            Invoked when the ImageRegion is created.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ImageRegion.RegionDestroyed">
            <summary>
            Invoked when the ImageRegion is destroyed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageRegion.Region">
            <summary>
            Returns the region based on the image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ImageRegion.TransparentColor">
            <summary>
            Color which is masked out by the image.
            </summary>
            <remarks>
            When set to Color.Empty, the color is obtained from
            the lower left hand pixel of the image.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ImageRegion.ShapeSize">
            <summary>
            Returns or sets the size of the image shape.
            </summary>
            <remarks>
            When set to Size.Empty, the size is based on the size
            of the image.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ImageRegion.ShapeImage">
            <summary>
            Returns or sets the image used to create the region.
            </summary>
        </member>
        <member name="T:Infragistics.Win.InkEditorPopupButtonUIElement">
            <summary>
            Summary description for InkEditorPopupButtonUIElement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Drawing.Image,Infragistics.Win.UIElementButtonType)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement"></param>
            <param name="image"></param>
            <param name="buttonType"></param>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called when the element is double clicked
            </summary>
            <param name="adjustableArea">If true the mouse was double-clicked over the adjustable area of the element</param>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draws the button's borders
            </summary>
        </member>
        <member name="M:Infragistics.Win.InkEditorPopupButtonUIElement.Initialize(System.Drawing.Image)">
            <summary>
            Initialize the element.
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:Infragistics.Win.InkEditorPopupButtonUIElement.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
            <remarks>
            We override this so that we can change style on the fly, based on the owner's display style, and whether the mouse is over the parent
            </remarks>
        </member>
        <member name="T:Infragistics.Win.InkProviderManager">
            <summary>
            Summary description for InkProviderManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.InkProviderManager.DirtyUltraControlElementsInContainer(System.Windows.Forms.ContainerControl,System.Boolean)">
            <summary>
            Dirties all the UltraControls in the specified container.
            </summary>
        </member>
        <member name="M:Infragistics.Win.InkProviderManager.GetInkProvider(System.Windows.Forms.Control)">
            <summary>
            Returns the InkProvider registered for the specified container control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Infragistics.Win.InkProviderManager.RegisterInkProvider(Infragistics.Win.IInkProvider,System.Windows.Forms.ContainerControl)">
            <summary>
            Registers an InkProvider.
            </summary>
            <returns>True if the InkProvider was successfully registered.</returns>
        </member>
        <member name="M:Infragistics.Win.InkProviderManager.UnRegisterInkProvider(System.Windows.Forms.ContainerControl)">
            <summary>
            UnRegisters an InkProvider.
            </summary>
            <returns>True if the InkProvider was successfully unregistered.</returns>
        </member>
        <member name="P:Infragistics.Win.InkProviderManager.InkProviderListVersion">
            <summary>
            Returns the version of the InkProviderList.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IInkProvider">
            <summary>
            Interface implemented by UltraInkProvider
            </summary>
        </member>
        <member name="M:Infragistics.Win.IInkProvider.GetInkEditorPopupButtonUIElement(Infragistics.Win.UIElement,Infragistics.Win.UIElement)">
            <summary>
            Returns the InkEditorPopupButtonUIElement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IInkProvider.GetInkEditorPopupButtonSize(System.Drawing.Size)">
            <summary>
            Returns the size of the InkEditorPopupButtonUIElement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IInkProvider.PopupUltraPenInputPanel(Infragistics.Win.InkEditorPopupButtonUIElement)">
            <summary>
            Causes the InkProvider's UltraPenInputPanel to popup.  Does nothing if the UltraPenInputPanel is already popped up.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IInkProvider.CloseUltraPenInputPanel(System.Boolean)">
            <summary>
            Closes the pen input panel.
            </summary>
            <param name="applyChanges">True if changes made in the popup should be applied to the editor or false to close the popup without applying the changes.</param>
        </member>
        <member name="P:Infragistics.Win.IInkProvider.IsUltraPenInputPanelPoppedUp">
            <summary>
            Returns whether the InkProvider's UltraPenInputPanel is popped up.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IInkProvider.IsVisible">
            <summary>
            Returns whether the InkProvider's Visible property is set to true.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IInkProvider.CurrentEditor">
            <summary>
            Returns the editor for which the popup is currently displayed or null if the popup is not dropped down.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IInkProvider.IsInkRecognitionAvailable">
            <summary>
            Returns whether Ink recognition is available.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IInkProvider.ShowInkButton">
            <summary>
            Returns when to show the Ink Button on the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.IPopupItemProvider">
            <summary>
            Implemented by an object that provides <see cref="T:Infragistics.Win.IPopupItem"/> instances
            </summary>
            <seealso cref="T:Infragistics.Win.IPopupItem"/>
        </member>
        <member name="M:Infragistics.Win.IPopupItemProvider.GetPopupItem(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.IPopupItem"/> for the specified key.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IPopupItemProvider.GetPopupList">
            <summary>
            Returns a list of keys for the contained popup items.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IPopupItemProvider.VerifyPopupItemKey(System.String)">
            <summary>
            Used to verify that the specified key is a valid key for the popup provider
            </summary>
            <param name="key">Key to evaluate</param>
            <returns>The key for the popup item or null if the popup item does not exist.</returns>
        </member>
        <member name="T:Infragistics.Win.IPopupItem">
            <summary>
            Implemented by an object that can display a popup window.
            </summary>
            <seealso cref="T:Infragistics.Win.IPopupItemProvider"/>
        </member>
        <member name="M:Infragistics.Win.IPopupItem.Show(Infragistics.Win.PopupInfo)">
            <summary>
            Displays the popup window.
            </summary>
            <param name="info">Object providing information about the popup</param>
        </member>
        <member name="M:Infragistics.Win.IPopupItem.Close">
            <summary>
            Hides the popup window
            </summary>
        </member>
        <member name="P:Infragistics.Win.IPopupItem.IsDisplayed">
            <summary>
            Indicates if the popup is currently displayed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.IPopupItem.Closed">
            <summary>
            Invoked when the popup window has been closed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IPopupItem.SourceControl">
            <summary>
            Returns the control associated with the popup window.
            </summary>
        </member>
        <member name="T:Infragistics.Win.PopupInfo">
            <summary>
            Implemented by an object that provides popup information to an <see cref="T:Infragistics.Win.IPopupItemProvider"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.PopupInfo.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.PopupInfo"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.PopupInfo.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.PopupInfo"/> instance
            </summary>
            <param name="owner">Owner control for the popup window</param>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.ExclusionRect">
            <summary>
            Returns or sets the area (in screen coordinates) over which the popup should not be displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.PreferredLocation">
            <summary>
            Returns or sets the preferred location (in screen coordinates) for the upper left corner of the dropdown.
            </summary>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.Owner">
            <summary>
            Returns or sets the control that will own the popup
            </summary>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.AlignRight">
            <summary>
            If true wil attempt to place the dropdown's upper right corner at the location point.
            </summary>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.Position">
            <summary>
            Returns or sets where to place the dropdown with respect to the exclusion rect.
            </summary>
        </member>
        <member name="P:Infragistics.Win.PopupInfo.SourceControl">
            <summary>
            Returns or sets the control associated with the popup window.
            </summary>
            <remarks>
            <p class="body">The <b>SourceControl</b> is analogous of the 
            SourceControl property of a context menu. It is used to identify 
            which control is displaying the popup window. The IPopupItem should 
            return this value from its SourceControl property.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.IStatusBar">
            <summary>
            Interface implemented by a StatusBar control
            </summary>
            <remarks>
            The interface is used to notify the status bar that a control has exclusive access
            to the value of the StatusText that should be displayed. This may be used by
            menu style controls to notify the statusbar that a menu is active. The status text
            may then be set to the value associated with the active menu item.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.IStatusBar.AutoSense">
            <summary>
            Indicates if the statusbar should display the <see cref="P:Infragistics.Win.IStatusBar.StatusText"/> value.
            </summary>
            <remarks>
            When set to false, the control implementing the interface should display
            the value of the <see cref="P:Infragistics.Win.IStatusBar.StatusText"/> property. Otherwise, the status
            text displayed should be the default status text - this is usually the status
            text associated with the control under the current mouse location.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.IStatusBar.StatusText">
            <summary>
            Text to display in a status bar when the <see cref="P:Infragistics.Win.IStatusBar.AutoSense"/>
            property is set to false.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ITabbedMdiManager">
            <summary>
            Interface implemented by a class acting that displays mdi children as tab items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabbedMdiManager.Enabled">
            <summary>
            Returns or sets the enabled state of the tabbed mdi manager.
            </summary>
            <remarks>When disabled, the mdi children will be represented as standard forms. When enabled, the mdichildren
            will be displayed as tab items.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabbedMdiManager.MdiParent">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.Form"/> managed by the <b>ITabbedMdiManager</b>
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ICustomMdiTab">
            <summary>
            Interface implemented by a form that provides custom mdi tab information.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ICustomMdiTab.InitializeMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Invoked when the context menu for a tab is about to be displayed.
            </summary>
            <param name="menu"><see cref="T:System.Windows.Forms.ContextMenu"/> to initialize</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ICustomMdiTab.Close">
            <summary>
            Invoked when the tab should be closed or hidden.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ICustomMdiTab.ResolveAppearance(Infragistics.Win.UltraWinTabs.TabState,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Used to resolve the appearance for the tab.
            </summary>
            <param name="tabState">Tab state that should be resolved.</param>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.AllowClose">
            <summary>
            Indicates whether the specified form may be closed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.HotTrack">
            <summary>
            Indicates if the tab supports hot tracking.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.UniqueId">
            <summary>
            Returns information used to uniquely identify the item.
            </summary>
            <remarks>This information should be constant across application instances for the object. The information
            will be serialized when the tab is serialized and used to reassociated the tab with a particular form
            after serialization.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.Text">
            <summary>
            Returns the text displayed in the tab for the form.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.ToolTip">
            <summary>
            Returns the tooltip displayed in the tab for the form.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.TabWidth">
            <summary>
            Returns the extent for a fixed width tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.IsMdiTab">
            <summary>
            Used to notify the implementing class whether it is being displayed as an mdi tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.HasTabImage">
            <summary>
            Used to determine if a custom tab will provide its own image
            in the appearance resolution.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.ImageList">
            <summary>
            Returns the ImageList used to retreive images provided by the tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ICustomMdiTab.ImageTransparentColor">
            <summary>
            Returns the color masked from the image provided by the tab.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.MdiParentManager">
            <summary>
            Class that maintains information about MdiParent forms
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.MdiParentManager.RegisterTabbedMdiManager(Infragistics.Win.UltraWinTabs.ITabbedMdiManager,System.Windows.Forms.Form)">
            <summary>
            Registers a tabbed mdi manager class with an mdi parent <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
            <param name="mdiManager">TabbedMdiManager to associate with a specified form.</param>
            <param name="form">MdiParent form that the mdi manager should be associated with.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.MdiParentManager.UnregisterTabbedMdiManager(Infragistics.Win.UltraWinTabs.ITabbedMdiManager,System.Windows.Forms.Form)">
            <summary>
            Unregisters a tabbed mdi manager and an mdi parent form.
            </summary>
            <param name="mdiManager">TabbedMdiManager that was associated with the specified form</param>
            <param name="form">Form that was associated with a tabbed mdi manager</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.MdiParentManager.GetTabbedMdiManager(System.Windows.Forms.Form)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinTabs.ITabbedMdiManager"/> that has registered with the specified <see cref="T:System.Windows.Forms.Form"/>
            </summary>
            <param name="form">Form to evaluate</param>
            <returns>A class implementing the <see cref="T:Infragistics.Win.UltraWinTabs.ITabbedMdiManager"/> interface that is associated with the specified form or null if no class has registered for that form.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.MdiParentManager.HasTabbedMdiManager(System.Windows.Forms.Form)">
            <summary>
            Indicates if the specified <see cref="T:System.Windows.Forms.Form"/> is already associated with an <see cref="T:Infragistics.Win.UltraWinTabs.ITabbedMdiManager"/>
            </summary>
            <param name="form">Form to evaluate</param>
            <returns>True if a class implementing the <see cref="T:Infragistics.Win.UltraWinTabs.ITabbedMdiManager"/> has registered with the specified form.</returns>
        </member>
        <member name="T:Infragistics.Win.IToolTipItem">
            <summary>
            Interface returned by a UIElement that should display a tooltip.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IToolTipItem.GetToolTipInfo(System.Drawing.Point,Infragistics.Win.UIElement,Infragistics.Win.UIElement,Infragistics.Win.ToolTipInfo)">
            <summary>
            Invoked when the tooltip information for an element is required.
            </summary>
            <param name="mousePosition">Current mouse position</param>
            <param name="element">Element for which the tooltip will be displayed</param>
            <param name="previousToolTipElement">Previous element that the tooltip was displayed for or null.</param>
            <param name="toolTipInfoDefault">Default ToolTipInfo structure initialized based on the mouse position. The structure may be modified and returned from the method.</param>
        </member>
        <member name="T:Infragistics.Win.ToolTipInfo">
            <summary>
            Structure used to provide ToolTip information.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ToolTipInfo.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.ToolTipInfo"/> based on the specified cursor location
            </summary>
            <param name="mousePosition">Location of the mouse in screen coordinates</param>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.BackColor">
            <summary>
            BackColor for the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.ForeColor">
            <summary>
            ForeColor for the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.Font">
            <summary>
            Font used to display the tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.BorderStyle">
            <summary>
            Borderstyle for the tooltip window
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.Margins">
            <summary>
            Space between the edge of the tooltip window and the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.ToolTipText">
            <summary>
            Text to display
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.Location">
            <summary>
            Location where the tooltip should be displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.AlignRight">
            <summary>
            If true will align the right edge of the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.ExclusionRect">
            <summary>
            Area that the tooltip should not cover
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.Size">
            <summary>
            Size of the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.MaxWidth">
            <summary>
            Maximum width of the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.ExcludeX">
            <summary>
            Indicates whether to flip the tooltip rect across the x axis when the display rectangle intersects the exclusion rect
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.ExcludeY">
            <summary>
            Indicates whether to flip the tooltip rect across the y axis when the display rectangle intersects the exclusion rect
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.AdjustWidth">
            <summary>
            Indicates whether the tooltip width may be adjusted.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.AdjustLeft">
            <summary>
            Indicates whether to adjust the X coordinate to ensure that it is within the screen rect.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.AdjustTop">
            <summary>
            Indicates whether to adjust the Y coordinate to ensure that it is within the screen rect.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.CalculateEmbeddableEditorSize">
            <summary>
            Returns or sets a value indicating whether the size of the embeddable editor should be calculated.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.EditorOwnerContext">
            <summary>
            Returns or sets the owner context for the editor.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.EditorOwner">
            <summary>
            Returns or sets the editor owner.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipInfo.Editor">
            <summary>
            Returns or sets the editor class.
            </summary>
        </member>
        <member name="T:Infragistics.Win.KeyActionMappingBase">
            <summary>
            abstract base class that maps a keystroke to an action
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingBase.#ctor(System.Windows.Forms.Keys,System.Enum,System.Int64,System.Int64,Infragistics.Win.SpecialKeys,Infragistics.Win.SpecialKeys,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of the <b>KeyActionMappingBase</b> class.
            </summary>
            <param name="keyCode"><see cref="T:System.Windows.Forms.Keys"/>KeyCode to map</param>
            <param name="actionCode"><see cref="T:System.Enum"/>Action code to map to the KeyCode</param>
            <param name="stateDisallowed"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST NOT be in for this mapping to be active. If the current state of the control has any of these bits turned on this mapping will be ignored.</param>
            <param name="stateRequired"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST be in for this mapping to be active. In a derived class this property should be hidden by one that returns an appropriate flagged enum.</param>
            <param name="specialKeysDisallowed"><see cref="T:Infragistics.Win.SpecialKeys"/>The special keys that are NOT allowed. If shift, ctrl or alt are pressed and their corresponding bit is turned on in this property the mapping will be ignored. </param>
            <param name="specialKeysRequired"><see cref="T:Infragistics.Win.SpecialKeys"/>These keys (any combination of shift/control/alt) MUST be pressed. Otherwise, this mapping will be ignored. </param>
            <param name="byPassTrailingActions"><see cref="T:System.Boolean"/>Indicates whether to bypass trailing actions once this action matches the current state.</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingBase.#ctor(System.Windows.Forms.Keys,System.Enum,System.Int64,System.Int64,Infragistics.Win.SpecialKeys,Infragistics.Win.SpecialKeys)">
            <summary>
            Constructor, initializes a new instance of the <b>KeyActionMappingBase</b> class.
            </summary>
            <param name="keyCode"><see cref="T:System.Windows.Forms.Keys"/>KeyCode to map</param>
            <param name="actionCode"><see cref="T:System.Enum"/>Action code to map to the KeyCode</param>
            <param name="stateDisallowed"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST NOT be in for this mapping to be active. If the current state of the control has any of these bits turned on this mapping will be ignored.</param>
            <param name="stateRequired"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST be in for this mapping to be active. In a derived class this property should be hidden by one that returns an appropriate flagged enum.</param>
            <param name="specialKeysDisallowed"><see cref="T:Infragistics.Win.SpecialKeys"/>The special keys that are NOT allowed. If shift, ctrl or alt are pressed and their corresponding bit is turned on in this property the mapping will be ignored. </param>
            <param name="specialKeysRequired"><see cref="T:Infragistics.Win.SpecialKeys"/>These keys (any combination of shift/control/alt) MUST be pressed. Otherwise, this mapping will be ignored. </param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingBase.OnDispose">
            <summary>
            Called when the object is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingBase.DoesMappingApply(System.Windows.Forms.Keys,System.Int64,Infragistics.Win.SpecialKeys)">
            <summary>
            Returns true if this KeyActionMappingBase is valid
            for the passed in state
            </summary>
            <param name="keyCode">The key that was pressed</param>
            <param name="state">Bit flags indicating the state of the control</param>
            <param name="specialKeys">Bit flags indicating which special keys are pressed</param>
            <returns>True if this mapping applies</returns>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.ByPassTrailingActions">
            <summary>
            Indicates whether to bypass trailing actions once this action matches the current state. Default value is false.
            </summary>
            <remarks>
            <p>If this property is set to true, the key action mappings logic will skip the actions after this action in the associated key action mappings collection if this action matches the state.</p>
            <p>By default all the actions matching the <see cref="P:Infragistics.Win.ControlUIElementBase.CurrentState"/> of the control will be performed. If this property is set to true, only actions upto this action and including this action will be performed and the matching actions after this will be skipped.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.KeyCode">
            <summary>
            The key code
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.ActionCode">
            <summary>
            Gets/sets the action code. In a derived class this
            property should be hidden by one that returns an 
            appropriate enum. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.StateDisallowed">
            <summary>
            Gets/sets the disallowed state. These are bit flags that specify
            the state that the control MUST NOT be in for this mapping to be
            active. If the current state of the control has any of these 
            bits turned on this mapping will be ignored.
            In a derived class this property should be hidden by one 
            that returns an appropriate flagged enum. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.StateRequired">
            <summary>
            Gets/sets the required state. These are bit flags that specify
            the state that the control MUST be in for this mapping to be
            active. In a derived class this property should be hidden 
            by one that returns an appropriate flagged enum. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.SpecialKeysDisallowed">
            <summary>
            Gets/sets the special keys that are NOT allowed. 
            If shift, ctrl or alt are pressed and their
            corresponding bit is turned on in this property
            the mapping will be ignored. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingBase.SpecialKeysRequired">
            <summary>
            Gets/sets the special keys that are required. 
            These keys (any combination of shift/control/alt)
            MUST be pressed. Otherwise, this mapping will be
            ignored. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.KeyActionMappingsBase">
            <summary>
            An abtract collection class of KeyActionMappingBase objects.
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="initialCapacity">Number of slots to allocate in the collection.</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.CreateActionStateMappingsCollection">
            <summary>
            Abstract class factory method
            creates an instance of a 
            ActionStateMappingsCollection derived class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.IsActionAllowed(System.Enum,System.Int64)">
            <summary>
            Determines if specified action is allowed based on state information
            </summary>
            <param name="actionCode">Action Code</param>
            <param name="currentState">Current State</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Add(Infragistics.Win.KeyActionMappingBase)">
            <summary>
            Adds a new mapping to the end of the collection
            </summary>
            <param name="mapping">The mapping to add</param>
            <returns>The index of the added mapping</returns>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Clear">
            <summary>
            Clear all mappings in the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.GetActionMappings(System.Windows.Forms.Keys,System.Int64,Infragistics.Win.SpecialKeys)">
            <summary>
            Returns the first KeyActionMappingBase that matches the criteria.
            </summary>
            <param name="keyCode">The key that was pressed</param>
            <param name="state">Bit flags indicating the state of the control</param>
            <param name="specialKeyState">Bit flags indicating which special keys are pressed</param>
            <returns>Array of all the mappings matching the criteria</returns>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.GetCurrentSpecialKeyState">
            <summary>
            Static method that returns the current special key state 
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Insert(System.Int32,Infragistics.Win.KeyActionMappingBase)">
            <summary>
            Inserts a new mapping into the collection
            </summary>
            <param name="index">the index where the mapping should be inserted</param>
            <param name="mapping">The mapping to insert</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.IsKeyMapped(System.Windows.Forms.Keys,System.Int64)">
            <summary>
            Determines if any key mapping exists for the key data.
            </summary>
            <param name="keyData">The keyData that was passed into IsInputKey or from KeyEventArgs.</param>
            <param name="state">Bit flags indicating the state of the control.</param>
            <returns>True if any mapping exists for the key data and state.</returns>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.LoadDefaultMappings">
            <summary>
            Abstract method called the first time GetActionMapping
            is called. Allows for lazy loading of mappings
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Remove(Infragistics.Win.KeyActionMappingBase)">
            <summary>
            Removes a mapping from the collection
            </summary>
            <param name="mapping">The mapping to remove</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Remove(System.Int32)">
            <summary>
            Removes a mapping from the collection
            </summary>
            <param name="index">The index of the mapping to remove</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of appearance objects
            </summary>
            <param name="index">Index of first mapping to remove</param>
            <param name="count">Number of mappings to remove</param>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.Reset">
            <summary>
            This method resets the KeyActionMappings collection.
            </summary>
            <remarks>
            This method will clear all the mappings and reload the default mappings.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.VerifyMappingsAreLoaded">
            <summary>
            If no keymappings have been loaded this method calls the abstract
            LoadDefaultMappings method
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.Count">
            <summary>
            Returns the number of mappings in the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.InitialCapacity">
            <summary>
            Abstract property that specifies the initial capacity
            of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.IsReadOnly">
            <summary>
            True if the is a read-only collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMappings">
            <summary>
            Gets/ActionStateMappings collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.KeyActionMappingsBase.ActionStateMapping">
            <summary>
            Maps particular actions to required and disallowed states.
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.ActionStateMapping.#ctor(System.Enum,System.Int64,System.Int64)">
            <summary>
            Constructor, initializes a new instance of ActionStateMapping
            </summary>
            <param name="actionCode">action code</param>
            <param name="stateDisallowed">state disallowed</param>
            <param name="stateRequired">state required</param>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMapping.ActionCode">
            <summary>
            Gets/sets the action code.
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMapping.StateDisallowed">
            <summary>
            Gets/sets the state disallowed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMapping.StateRequired">
            <summary>
            Gets/sets the state required.
            </summary>
        </member>
        <member name="T:Infragistics.Win.KeyActionMappingsBase.ActionStateMappingsCollection">
            <summary>
            ActionStateMappingsCollection
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.ActionStateMappingsCollection.#ctor(Infragistics.Win.KeyActionMappingsBase.ActionStateMapping[])">
            <summary>
            Contructcr
            </summary>
        </member>
        <member name="M:Infragistics.Win.KeyActionMappingsBase.ActionStateMappingsCollection.IsActionAllowed(System.Enum,System.Int64)">
            <summary>
            Determines if specified action is allowed based on state information.
            </summary>
            <param name="actionCode"></param>
            <param name="currentState"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMappingsCollection.InitialCapacity">
            <summary>
            Abstract property that specifies the initial capacity
            of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.KeyActionMappingsBase.ActionStateMappingsCollection.IsReadOnly">
            <summary>
            True if the is a read-only collection
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.ILayoutContainer">
            <summary>
            ILayoutContainer interface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.ILayoutContainer.PositionItem(Infragistics.Win.Layout.ILayoutItem,System.Drawing.Rectangle,System.Object)">
            <summary>
            Called by the layout manager to position a layout item.
            </summary>
            <param name="item"></param>
            <param name="rect"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.ILayoutContainer.GetBounds(System.Object)">
            <summary>
            Returns the container bounds.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.LayoutItemsEnumerator">
            <summary>
            A base class that implements the IEnumerator interface 
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsEnumerator.#ctor(Infragistics.Win.Layout.LayoutItemsCollection)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsEnumerator.MoveNext">
            <summary>
            Implements the IEnumerator.MoveNext method 
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsEnumerator.Reset">
            <summary>
            Implements the IEnumerator.Reset method. Sets the position to
            before the first item in the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current object being enumerated
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.LayoutItemsCollection">
            <summary>
            ILayoutItem collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.#ctor(Infragistics.Win.Layout.LayoutManagerBase)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.InternalSetConstraint(Infragistics.Win.Layout.ILayoutItem,System.Object,System.Int32)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item"></param>
            <param name="constraint"></param>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.GetConstraint(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Returns the constraint object associated with the item. Throws an exception if the item
            does not exist (ie. it hasn't been added through AddLayoutItem method has been removed).
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.SetConstraint(Infragistics.Win.Layout.ILayoutItem,System.Object)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item"></param>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Add(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Adds an item to be managed by this layout manager. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Add(Infragistics.Win.Layout.ILayoutItem,System.Object)">
            <summary>
            Adds an item to be managed by this layout manager.
            </summary>
            <param name="item"></param>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Insert(System.Int32,Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Inserts the item at specified index. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Insert(System.Int32,Infragistics.Win.Layout.ILayoutItem,System.Object)">
            <summary>
            Inserts the item at specified index in with the specified constraint.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Remove(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Removes an item from this layout manager if it exists.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.IndexOf(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Retruns the index of the passed in item in the layout items collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks>
            <p>Layout manager keeps track of the order in which items are added. Some layout managers may layout items in the order in which they were added.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Contains(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Returns true if the passed in item contained in this layout manager.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.Clear">
            <summary>
            Removes all the items.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.GetItem(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            opies the items from the collection into the array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutItemsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable Interface Implementation. Returns a type safe enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.LayoutItems">
            <summary>
            Layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.LayoutItemsConstraints">
            <summary>
            Layout items with their constraints.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.Item(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.Count">
            <summary>
            Returns the number of items this LayoutItemsCollection contains.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ArrayList is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutItemsCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            An object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.LayoutManagerBase">
            <summary>
            Base class for others to implement their own layout managers.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.CalculateMinimumSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns>Returns the minimum size.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.CalculatePreferredSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns>Returns the preferred size.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.LayoutContainer(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.LayoutManagerBase.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.LayoutManagerBase.LayoutItems">
            <summary>
            Layout items collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.FillType">
            <summary>
            Specifies whether to resize the item to fill any extra space.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FillType.None">
            <summary>
            Don't resize to fill the extra space.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FillType.Horizontal">
            <summary>
            Only resize horizontally to fill the extra horizontal space.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FillType.Vertical">
            <summary>
            Only resize vertically to fill the extra vertical space.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FillType.Both">
            <summary>
            Resize horizontally and vertically to fill the extra space.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.AnchorType">
            <summary>
            Specifies where to anchor an item.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.Center">
            <summary>
            Centered horizontally and vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.Left">
            <summary>
            Left centered vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.Top">
            <summary>
            Top centered horizontally.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.Right">
            <summary>
            Right cetered vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.Bottom">
            <summary>
            Bottom centered horizontally.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.AnchorType.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.LayoutPropertyIds">
            <summary>
            Contains ids for properites. Used by the SubObjectPropChange mechanism.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Left">
            <summary>
            <see cref="P:Infragistics.Win.Layout.Insets.Left"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Top">
            <summary>
            <see cref="P:Infragistics.Win.Layout.Insets.Top"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Right">
            <summary>
            <see cref="P:Infragistics.Win.Layout.Insets.Right"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Bottom">
            <summary>
            <see cref="P:Infragistics.Win.Layout.Insets.Bottom"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Insets">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.Insets"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Anchor">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.Anchor"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.Fill">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.Fill"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.OriginX">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.OriginX"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.OriginY">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.OriginY"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.SpanX">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.SpanX"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.SpanY">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.SpanY"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.WeightX">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.WeightX"/> property
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.LayoutPropertyIds.WeightY">
            <summary>
            <see cref="P:Infragistics.Win.Layout.GridBagConstraint.WeightY"/> property
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.Insets">
            <summary>
            Class to specify insets. Insets are the spacing at the edges of an item.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.#ctor">
            <summary>
            Constructor. Creates an empty Insets object with left, top, right and bottom as 0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="left">Left inset.</param>
            <param name="top">Top inset.</param>
            <param name="right">Right inset.</param>
            <param name="bottom">Bottom inset.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.Initialize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the this Insets object with the passed in arguments.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.CopyFrom(Infragistics.Win.Layout.Insets)">
            <summary>
            Copies from the passed in instance of insets.
            </summary>
            <param name="insets"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ShouldSerialize">
            <summary>
            Retruns true if one of the properties of this object is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ShouldSerializeLeft">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ShouldSerializeRight">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ShouldSerializeTop">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ShouldSerializeBottom">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.Reset">
            <summary>
            Resets the object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ResetLeft">
            <summary>
            Resets Left to its default value of 0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ResetRight">
            <summary>
            Resets Right to its default value of 0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ResetTop">
            <summary>
            Resets Top to its default value of 0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.ResetBottom">
            <summary>
            Resets Bottom to its default value of 0.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.Insets.Left">
            <summary>
            Left inset.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.Insets.Top">
            <summary>
            Top inset.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.Insets.Right">
            <summary>
            Right inset.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.Insets.Bottom">
            <summary>
            Bottom inset.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.Insets.InsetsTypeConverter">
            <summary>
            MarginsTypeConverter
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.InsetsTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns true
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.Insets.InsetsTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of property descriptors
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.Layout.IGridBagConstraint">
            <summary>
            Interface for providing constraints to the grid-bag layout manager.
            </summary>
            <remarks>
            <seealso cref="T:Infragistics.Win.Layout.GridBagLayoutManager"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.Anchor">
            <summary>
            If the display area of the item is larger than the item, this property indicates where to anchor the item.
            </summary>
            <remarks><seealso cref="T:Infragistics.Win.Layout.AnchorType"/></remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.Fill">
            <summary>
            <p>Fill indicates whether to resize the item to fill the extra spance if the layout item's display area is larger than its size,</p> 
            </summary>
            <remarks><seealso cref="T:Infragistics.Win.Layout.FillType"/></remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.Insets">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.OriginX">
            <summary>
            <p>OriginX and OriginY define where the layout item will be placed in the virtual grid of the grid-bag layout. OriginX specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has OriginX of 0. The constant <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Relative"/> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Relative"/>. OriginX should be a non-negative value.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.IGridBagConstraint.OriginY"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.OriginY">
            <summary>
            <p>OriginX and OriginY define where the layout item will be placed in the virtual grid of the grid-bag layout. OriginX specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has OriginY of 0. The constant <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Relative"/> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Relative"/>. OriginY should be a non-negative value.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.IGridBagConstraint.OriginX"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.SpanX">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.IGridBagConstraint.SpanY"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.SpanY">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <see cref="F:Infragistics.Win.Layout.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.IGridBagConstraint.SpanX"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.WeightX">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum WeightX of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagConstraint.WeightY">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum WeightY of all the items in the column.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagConstraintConstants">
            <summary>
            Defines constants used by grid-bag constraint object.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagConstraintConstants.Relative">
            <summary>
            This constant can be assigned to OriginX and OriginY to indicate that the cell be positioned relative to the last cell.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagConstraintConstants.Remainder">
            <summary>
            This constant can be assigned to SpanX and SpanY to indicate that the cell occupy the rest of the row or the column respectively.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagConstraint">
            <summary>
            Class for providing constraint objects to the grid-bag layout manager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="originX"></param>
            <param name="originY"></param>
            <param name="spanX"></param>
            <param name="spanY"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,Infragistics.Win.Layout.AnchorType,Infragistics.Win.Layout.FillType,Infragistics.Win.Layout.Insets)">
            <summary>
            Constructor
            </summary>
            <param name="originX"></param>
            <param name="originY"></param>
            <param name="spanX"></param>
            <param name="spanY"></param>
            <param name="weightX"></param>
            <param name="weightY"></param>
            <param name="anchor"></param>
            <param name="fill"></param>
            <param name="insets"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetAnchor">
            <summary>
            Resets the Anchor property to its default value of AnchorType.Center.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetFill">
            <summary>
            Resets the Fill property to its default value of FillType.None.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetInsets">
            <summary>
            Resets the Insets property to its default value which is Insets of left, top, right, bottom being 0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetOriginX">
            <summary>
            Resets the OriginX property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetOriginY">
            <summary>
            Resets the OriginY property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetSpanX">
            <summary>
            Resets the SpanX property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetSpanY">
            <summary>
            Resets the SpanY property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetWeightX">
            <summary>
            Resets the WeightX property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ResetWeightY">
            <summary>
            Resets the WeightY property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.Reset">
            <summary>
            Resets the properties of this object to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerialize">
            <summary>
            Returns true is any of the properties have been set to non-default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeAnchor">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeFill">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeInsets">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeOriginX">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeOriginY">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeSpanX">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeSpanY">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeWeightX">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.ShouldSerializeWeightY">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on a subobject has changed.
            </summary>
            <param name="propChange">Contains information about the property change</param>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.Anchor">
            <summary>
            If the display area of the item is larger than the item, this property indicates where to anchor the item.
            </summary>
            <remarks><seealso cref="T:Infragistics.Win.Layout.AnchorType"/></remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.Fill">
            <summary>
            <p>Fill indicates whether to resize the item to fill the extra space if the layout item's display area is larger than its size,</p> 
            </summary>
            <remarks><seealso cref="T:Infragistics.Win.Layout.FillType"/></remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.Insets">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.OriginX">
            <summary>
            <p>OriginX and OriginY define where the layout item will be placed in the virtual grid of the grid-bag layout. OriginX specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has OriginX of 0. The constant <b>Relative</b> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <b>Relative</b>. OriginX should be a non-negative value.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.GridBagConstraint.OriginY"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.OriginY">
            <summary>
            <p>OriginX and OriginY define where the layout item will be placed in the virtual grid of the grid-bag layout. OriginX specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has OriginY of 0. The constant <b>Relative</b> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <b>Relative</b>. OriginY should be a non-negative value.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.GridBagConstraint.OriginX"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.SpanX">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <b>Remainder</b> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.GridBagConstraint.SpanY"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.SpanY">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <b>Remainder</b> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <remarks>
            <seealso cref="P:Infragistics.Win.Layout.GridBagConstraint.SpanX"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.WeightX">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum WeightX of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagConstraint.WeightY">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum WeightY of all the items in the column.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagConstraint.GridBagConstraintConverter">
            <summary>
            TypeConverter for a <see cref="T:Infragistics.Win.Layout.GridBagConstraint"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.GridBagConstraintConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagConstraint.GridBagConstraintConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutItemDimensions">
            <summary>
            For internal use. A class that contains dimensions of a layout item. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensions.OriginX">
            <summary>
            Returns the OriginX of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensions.OriginY">
            <summary>
            Returns the OriginY of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensions.SpanX">
            <summary>
            Returns the SpanX of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensions.SpanY">
            <summary>
            Retruns the SpanY of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensions.Bounds">
            <summary>
            Item bounds relative to the container's bounds.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutItemDimensionsCollection">
            <summary>
            For internal use. A class that contains GridBagLayoutItemDimensions instances each of which 
            associated with a ILayoutItem.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutItemDimensionsCollection.Exists(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            For Internal use. Returns true if the collection contains a an entry for passed in layout item.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensionsCollection.ColumnDims">
            <summary>
            For Internal use. Column dims relative to left of 0. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensionsCollection.RowDims">
            <summary>
            For Internal use. Row dims relative to top of 0. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutItemDimensionsCollection.Item(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            For Internal use. Indexer. Returns an instance GridBagLayoutItemDimensions associated with passed in layout item.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutManager">
            <summary>
            GridBagLayoutManager class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.CalculateMinimumSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.CalculatePreferredSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.LayoutContainer(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next time.
            </summary>
            <remarks>
            <p>Gridbag layout manager caches layout information which needs to be invalidated any time a change is made that would effect how the items are laid out.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutManager.GetLayoutItemDimensions(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            For internal use. Returns dimensions of layout items. It contains entries for only the visible items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutManager.ColumnWidths">
            <summary>
            Returns the preferred column widths of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutManager.RowHeights">
            <summary>
            Returns the preferred row heights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutManager.ExpandToFitWidth">
            <summary>
            Indicates whether to proportionally resize widths of all the items to fit any extra width.
            This would only get applied if all the items had 0.0 weightX's.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutManager.ExpandToFitHeight">
            <summary>
            Indicates whether to proportionally resize heights of all the items to fit any extra height.
            This would only get applied if all the items had 0.0 weightY's.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutManager.LayoutMode">
            <summary>
            Internal property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutManager.GridBagLayoutMode">
            <summary>
            GridBagLayout mode.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutManager.GridBagLayoutMode.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutManager.GridBagLayoutMode.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.FlowLayoutAlignment">
            <summary>
            Used for specifying FlowLayout.Alignment property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FlowLayoutAlignment.Near">
            <summary>
            Depending on whether the flow layout is horizontal or vertical, the items will
            be aligned left or top respectively.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FlowLayoutAlignment.Center">
            <summary>
            Items will be aligned in center.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.FlowLayoutAlignment.Far">
            <summary>
            Depending on whether the flow layout is horizontal or vertical, the items will
            be aligned right or bottom respectively.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.FlowLayoutManager">
            <summary>
            FlowLayoutManager class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.Layout.FlowLayoutManager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.CalculateMinimumSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.CalculatePreferredSize(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.LayoutContainer(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.FlowLayoutManager.CalculateSize(Infragistics.Win.Layout.ILayoutContainer,System.Object,System.Boolean)">
            <summary>
            Calculates the size.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <param name="minimum">True for minumum, false for preferred.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.Layout.FlowLayoutManager.Vertical">
            <summary>
            Indicates whether the flow layout flows items in vertical direction or horizontal direction.
            </summary>
            <remarks>
            The default value is false so the items flow horizontally. Set this to true to have the items flow vertically.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.Layout.FlowLayoutManager.HorizontalGap">
            <summary>
            Horizontal gap in pixels between each item as well as the border of the container and items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.FlowLayoutManager.VerticalGap">
            <summary>
            Vertical gap in pixels between each item as well as the border of the container and items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.FlowLayoutManager.Alignment">
            <summary>
            Returns or sets the alignment of the items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.FlowLayoutManager.WrapItems">
            <summary>
            Indicates whether all the items should be wrapped to a new line when there is not enough room to position the items on a single line.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.IGridBagLayoutDragManager">
            <summary>
            Interface which provides information to a GridBagLayoutDragStrategy for the purpose of dragging and dropping objects in a GridBagLayout.
            </summary>	
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetContainerElementType">
            <summary>
            Returns the type of UIElement that contains the layout. 
            </summary>
            <remarks>
            This is the type of UIElement that contains the layout object. For example, in a grid this may be a BandHeaderUIElement (when dragging a Header that is separate from the cells) or a RowCellAreaUIElement (when the headers are with the cells).
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetContainerElementContext">
            <summary>
            Returns the Context to use when trying to determine the Container Element of a layout item.
            </summary>
            <remarks>The Context is important so that when the DragManager attempts to find a Layout Container element at a certain point, it gets the correct one. For example, there may be many BandHeaderUIElements in the grid, but a drag operation is only valid within elements that have the same context (the same band).</remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetLayoutItemElementsFromPoint(System.Drawing.Point)">
            <summary>
            Gets an an array of UIElements that represent a LayoutItem within the ContainingElement. This is for the purposes for determining the drop location. 
            </summary>
            <returns>This method returns multiple elements and uses them to determine a drop rect. There may be multiple elements because when the headers and cells are together, both are treated as one.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetLayoutItemFromElement(Infragistics.Win.UIElement)">
            <summary>
            Returns an ILayoutItem that corresponds to a particulr UIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetVisibleLayoutItems">
            <summary>
            Returns the layout items that are visible in the row-layout in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetResolvedGCs">
            <summary>
            Returns resolved GridBagConstraint objects for visible columns as a hashtable where the keys are the visible columns and the values are the GridBagConstraint objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.SetResolvedGCs(System.Collections.Hashtable)">
            <summary>
            Sets the OriginX, OriginY, SpanX and SpanY of each layout item to respective property values in the GridBagConstraint object.
            </summary>
            <param name="hash">A hashtable where the keys are the visible ILayoutItems and the values are the GridBagConstraint objects.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetDragItemSpans(System.Int32@,System.Int32@)">
            <summary>
            Returns the resolved spanX and spanY of the ILayoutItem being dragged. 
            </summary>
            <remarks>This is used when drawing the rectangle when an item is dragged over a hole in a layout.</remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetLayoutItemDimensions(Infragistics.Win.Layout.ILayoutContainer,System.Object)">
            <summary>
            Returns dimensions of layout items. It contains entries for only the visible items.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetLayoutContainerRect(Infragistics.Win.UIElement)">
            <summary>
            Returns the valid rect of the container element.
            </summary>
            <remarks>This is needed because the rect in which the Layout items are positioned isn't neccessarily the same as the rect of the UIElement. In the grid, for example, this rect should not include the area within the row taken up by the Row Selectors when they are present.</remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetPreferredSize(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Returns the resolved preferred size of the item. 
            </summary>
            <remarks>The resolved PreferredSize may differ from the PreferredSize property when dragging multiple objects at once, like a cell and a header when the headers are with the cells in the grid.</remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.SetConstraintsOfDragItem(Infragistics.Win.Layout.GridBagConstraint)">
            <summary>
            Sets the Consraint information on the item being dropped.
            </summary>
            <param name="newConstraint">A GridBagConstraint with the new settings to apply to the item being dragged</param>
            <remarks>This is called when an item is dropped onto a hole in the layout.</remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.SetSpanGC(Infragistics.Win.Layout.ILayoutItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Span and/or labelSpan properties on an item after a Span Resize.
            </summary>
            <param name="itemBeingDragged">The item currently being dragged.</param>
            <param name="spanX">The new SpanX to assign to the constraints of the item being dragged.</param>
            <param name="spanY">The new SpanY to assign to the constraints of the item being dragged.</param>
            <param name="labelSpanX">The new LabeSpanX to assign to the constraints of the item being dragged.</param>
            <param name="labelSpanY">The new LabelSpanX to assign to the constraints of the item being dragged.</param>
            <param name="preferredLabelWidth">The new preferredLabelWidth to assign to the constraints of the item being dragged.</param>
            <param name="preferredLabelHeight">The new preferredLabelHeight to assign to the constraints of the item being dragged.</param>
            <param name="preferredCellWidth">The new preferredCellWidth to assign to the constraints of the item being dragged.</param>
            <param name="preferredCellHeight">The new preferredCellHeight to assign to the constraints of the item being dragged.</param>
            <returns></returns>
            <remarks>This is called after a Span Resize operation to set the new constraints on the item.</remarks>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetAllowMovingResolved(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Determine whether the layoutItem can be moved.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.IGridBagLayoutDragManager.GetAllowSpanSizingResolved(Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Determine whether the layoutItem can be span sized.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagLayoutDragManager.ItemBeingDragged">
            <summary>
            Returns the ILayoutItem currently being dragged.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Layout.IGridBagLayoutDragManager.Control">
            <summary>
            The Control in which the drag starts
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutDragStrategy">
            <summary>
            Class to handle the dragging and dropping of IDraggableLayoutItems within a GridBagLayout
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.#ctor(Infragistics.Win.Layout.IGridBagLayoutDragManager)">
            <summary>
            Constructor
            </summary>
            <param name="gridBagLayoutDragManager">An object which implements IGridBagLayoutDragManager. The IGridBagLayoutManager is used to provide information to the DragStrategy about what is being dragged and the other items in the layout.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragStart(Infragistics.Win.UIElement,System.Drawing.Point)">
            <summary>
            Called by the control to begin the Drag of a header for the purposes of repositioning it.
            </summary>		
            <param name="dragElement">A UIElement that will be rendered onto the dragIndicator.</param>
            <param name="mouseOffset">The offset of the mouse into the drag Element. This will be used to position the Drag Control relative to the mouse.</param>
            <remarks>This method is not used to being a Span Resize. Use DragSpanStart, instead.</remarks>
            <returns>True if a drag opeation was successfully started. False if it failed.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragStart(Infragistics.Win.UIElement[],System.Drawing.Point)">
            <summary>
            Called when the drag operation begins.
            </summary>		
            <param name="dragElements">An array of UIElements that will be rendered onto the dragIndicator.</param>
            <param name="mouseOffset">The offset of the mouse into the drag Element. This will be used to position the Drag Control relative to the mouse.</param>
            <remarks>This method is not used to being a Span Resize. Use DragSpanStart, instead.</remarks>
            <returns>True if a drag opeation was successfully started. False if it failed.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragMove(System.Drawing.Point)">
            <summary>
            Called whenever a DragMove takes place on the source control
            </summary>
            <param name="pointInControlCoords">The current drag position relative to the Control.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragEnd(System.Drawing.Point)">
            <summary>
            Called when the Drag ends
            </summary>
            <returns>Returns true if anything in the layout has changed.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.HideDragIndicator">
            <summary>
            Hides the DragIndicator. This lets the control explicity hide the indicator. This is useful if, for example, the control wants to handle the dragging differently over certain parts of itself.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.HideDropIndicator">
            <summary>
            Hides the DropIndicator. This lets the control explicity hide the indicator. This is useful if, for example, the control wants to handle the dragging differently over certain parts of itself.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragSpanStart(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to begin a Span Resize drag
            </summary>
            <param name="isSpanDragModeHorizontal">Indicates whether the span resizing is a horizontal resize (true) or a vertical resize (false).</param>
            <param name="areColumnHeadersInSeparateArea">Indicates whether the headers are separate from the cells (true) or inline with the cells (false).</param>
            <param name="isHeaderBeingDragged">Indicates whether a header is being span resized (true) or a cell (false).</param>
            <param name="isCardView">Indicates whether the band is in CardView mode.</param>
            <param name="isLabelOnSide">Indicates whether the label is on the left/right side of the cell (true) or if it is on the top/bottm (false). Note that this is only significant when areColumnHeadersInSeparateArea is false.</param>
            <returns>Returns true if the span drag operation started. False if it did not.</returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragSpanMove(System.Drawing.Point,Infragistics.Win.UIElement,Infragistics.Win.Layout.ILayoutItem,Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Called when the mouse moves during a Span Resize drag
            </summary>
            <param name="pointInControlCoords">The current position of the mouse in control coords.</param>
            <param name="dragElement">The UIElement being span resized.</param>
            <param name="headerDragItem">The ILayoutItem representing the header element. This may be the item being dragged or it may be the associated header if the item being dragged is a cell. If the item being dragged is a cell and the headers are not with the cells, this is not used and may be null.</param>
            <param name="columnDragItem">The ILayoutItem representing the cell element. This may be the item being dragged or it may be the associated cell if the item being dragged is a header. If the item being dragged is a header and the headers are not with the cells, this is not used and may be null.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.DragSpanEnd(System.Drawing.Point,Infragistics.Win.UIElement,Infragistics.Win.Layout.ILayoutItem,Infragistics.Win.Layout.ILayoutItem)">
            <summary>
            Called when a DragSpan operation ends. 
            </summary>
            <param name="pointInControlCoords">The current position of the mouse in control coords.</param>
            <param name="dragElement">The UIElement being span resized.</param>
            <param name="headerDragItem">The ILayoutItem representing the header element. This may be the item being dragged or it may be the associated header if the item being dragged is a cell. If the item being dragged is a cell and the headers are not with the cells, this is not used and may be null.</param>
            <param name="columnDragItem">The ILayoutItem representing the cell element. This may be the item being dragged or it may be the associated cell if the item being dragged is a header. If the item being dragged is a header and the headers are not with the cells, this is not used and may be null.</param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.EnsureItemDoesntOverlap(Infragistics.Win.Layout.ILayoutItem,Infragistics.Win.Layout.ILayoutItem[],System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            For Internal Use Only.
            Shifts all the items to the right and below as necessary to ensure that the layoutItem
            doesn't overlap with any layoutItems to the right or below it.
            </summary>
            <param name="layoutItem">The LayoutItem being span resized</param>
            <param name="layoutItems">An array of all the layout items in the layout</param>
            <param name="hash">A hashtable where the keys are the visible ILayoutItems and the values are the GridBagConstraint objects.</param>
            <param name="right"></param>
            <param name="below"></param>
            <param name="belowFirst"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.PackLayout(System.Collections.Hashtable)">
            <summary>
            For Internal Use Only. 
            Removes any columns and rows from the grid-bag that do not have any items.
            In other words, if there isn't any item that is on or goes through a row or 
            a column, then the originX's and originY's of the items will be adjusted to
            get rid of such a column or a row.
            </summary>
            <param name="dims"></param>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.ViolatesMovingRestrictions(System.Collections.Hashtable)">
            <summary>
            Returns true if the new layout violates any of the restrictions imposed by GetAllowMovingResolved.
            </summary>
            <param name="newLayoutHash"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.ViolatesMovingRestrictions(Infragistics.Win.Layout.GridBagConstraint,Infragistics.Win.Layout.GridBagConstraint,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the new layout violates any of the restrictions imposed by GetAllowMovingResolved.
            </summary>
            <param name="originalConstraint"></param>
            <param name="newConstraint"></param>
            <param name="allowOriginXChange"></param>
            <param name="allowOriginYChange"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.ViolatesMovingRestrictions(Infragistics.Win.Layout.GridBagConstraint,Infragistics.Win.Layout.GridBagConstraint,Infragistics.Win.Layout.GridBagLayoutAllowMoving)">
            <summary>
            Returns true if the new layout violates any of the restrictions imposed by GetAllowMovingResolved.
            </summary>
            <param name="originalConstraint"></param>
            <param name="newConstraint"></param>
            <param name="allowMovingResolved"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.HasAnyChanges(System.Collections.Hashtable)">
            <summary>
            Returns true if the new layout has any changes from the original layout.
            </summary>
            <param name="newLayoutHash"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.OnDispose">
            <summary>
            Clean up any resources
            </summary>
        </member>
        <member name="M:Infragistics.Win.Layout.GridBagLayoutDragStrategy.GetBoundingRect(Infragistics.Win.UIElement[])">
            <summary>
            Returns a bounding Rectangle that encompasses all the UIElements in the array. 
            </summary>
            <param name="elements">An array of UIElements</param>
            <returns>A rectangle containing all of the UIElements in the array.</returns>
        </member>
        <member name="P:Infragistics.Win.Layout.GridBagLayoutDragStrategy.GridBagLayoutDragManager">
            <summary>
            Returns the GridBagLayoutDragManager which was passed in to the constructor. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutAllowMoving">
            <summary>
            Options for allowing the user to move columns in a GridBagLayout
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowMoving.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowMoving.None">
            <summary>
            Do not allow moving items in the Layout
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowMoving.AllowAll">
            <summary>
            Items in the layout can be moved without Restriction
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowMoving.AllowOriginXChange">
            <summary>
            Only allow items in the layout to have their OriginX changed. This means an item is restricted to the same logical column.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowMoving.AllowOriginYChange">
            <summary>
            Only allow items in the layout to have their OriginY changed. This means an item is restricted to the same logical row.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing">
            <summary>
            Options for allowing the user to span resize items in a GridBagLayout
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing.None">
            <summary>
            No span resizing is allowed
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing.AllowAll">
            <summary>
            The user can resize the span of items in the layout without restriction (both X and Y).
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing.AllowSpanXChange">
            <summary>
            The user can span resize items in the layout by chaning the spanX only.
            </summary>
        </member>
        <member name="F:Infragistics.Win.Layout.GridBagLayoutAllowSpanSizing.AllowSpanYChange">
            <summary>
            The user can span resize items in the layout by chaning the spanY only.
            </summary>
        </member>
        <member name="T:Infragistics.Win.MarginsPropertyIds">
            <summary>
            Enumeration of Property identifiers for the Check Editor.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MarginsPropertyIds.Left">
            <summary>
            Left margin property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MarginsPropertyIds.Top">
            <summary>
            Top margin property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MarginsPropertyIds.Right">
            <summary>
            Right margin property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.MarginsPropertyIds.Bottom">
            <summary>
            Bottom margin property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Margins">
            <summary>
            Store margin information.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Margins.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="left">Default left margin</param>
            <param name="top">Default top margin</param>
            <param name="right">Default right margin</param>
            <param name="bottom">Default bottom margin</param>
            <param name="allowNegativeMarginValues">Allow negative margin values</param>
        </member>
        <member name="M:Infragistics.Win.Margins.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for de-serialization
            </summary>
        </member>
        <member name="M:Infragistics.Win.Margins.ShouldSerializeLeft">
            <summary>
            Returns whether the Left property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Margins.ShouldSerializeTop">
            <summary>
            Returns whether the Top property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Margins.ShouldSerializeRight">
            <summary>
            Returns whether the Right property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Margins.ShouldSerializeBottom">
            <summary>
            Returns whether the Bottom property should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Margins.AdjustRect(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Adjusts the specified rectangle using the current Margins settings.  
            </summary>
            <param name="rect">The rectangle to be adjusted.</param>
            <param name="addMargins">If true, adds the margin values to the rectangle's dimensions.  Otherwise, subtracts the margin values.</param>
            <returns>A new rectangle with adjusted dimensions.</returns>
        </member>
        <member name="M:Infragistics.Win.Margins.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A new Margins object with the same values.</returns>
        </member>
        <member name="M:Infragistics.Win.Margins.Reset">
            <summary>
            Resets the members to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Margins.ShouldSerialize">
            <summary>
            Returns whether the object should be serialized.
            </summary>
            <returns>True if the object should be serialized</returns>
        </member>
        <member name="M:Infragistics.Win.Margins.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string containing the key and display style.</returns>
        </member>
        <member name="M:Infragistics.Win.Margins.Equals(System.Object)">
            <summary>
            Used to determine if the specified object is the same as this instance.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>True if the values for the objects are the same.</returns>
        </member>
        <member name="M:Infragistics.Win.Margins.GetHashCode">
            <summary>
            Returns the hashcode for the Margins object.
            </summary>
            <returns>A hash code for the structure.</returns>
        </member>
        <member name="P:Infragistics.Win.Margins.Left">
            <summary>
            Returns/sets the left margin value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Margins.Top">
            <summary>
            Returns/sets the top margin value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Margins.Right">
            <summary>
            Returns/sets the right margin value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Margins.Bottom">
            <summary>
            Returns/sets the bottom margin value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Margins.ForceSerialization">
            <summary>
            Internal property.
            </summary>
            <remarks>
            This property is used internally as a workaround for a serialization bug in Visual Studio that was introduced in version 1.1.
            </remarks>
        </member>
        <member name="T:Infragistics.Win.Margins.MarginsTypeConverter">
            <summary>
            MarginsTypeConverter
            </summary>
        </member>
        <member name="M:Infragistics.Win.Margins.MarginsTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns true
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Margins.MarginsTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of property descriptors
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase">
            <summary>
            base type for all CharacterPosition classes
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
             Called when a property has changed on a sub object
            </summary>
            <param name="info"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.OnDispose">
            <summary>
            Called when the object is disposed of
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.MatchChar(System.Char)">
            <summary>
            returns true if the specified character c matches the mask
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.Appearance">
            <summary>
            Determines the appearance of the displayed characters.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.HasAppearance">
            <summary>
            Returns true if an appearance object has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.IncludeMethod">
            <summary>
            Returns or sets a value that specifies how MaskMode is used in deciding whether or not to include the character. 
            </summary>
            <remarks>
            <p class="body">When <b>IncludeMethod</b> is set to Always, the display character will always be included except when it is empty, in which case normal processing takes effect. (The mask is examined to determine whether a prompt character ot a pad character should be used.) If this property is set to Never, it will never be included in the text. The default setting (DisplayCharIncludeMethod.Default) is to look at the MaskMode that's being applied to the text and determine which character to use accordingly.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.IsEditable">
            <summary>
            Indicates if the character position is an editable position, one that
            user can input a character into.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the associated
            literal character
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.InputCharBase">
            <summary>
            Class that represents an editable position in the mask edit control
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InputCharBase.IsEditable">
            <summary>
            Overridden, returns true to indicate that InputPositionBase derivatives
            are editable character positions.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InputCharBase.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.LiteralChar.MatchChar(System.Char)">
            <summary>
            returns true if the character passed in as parameter matches the 
            the literal this instance represents
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.LiteralChar.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DecimalSeperatorChar.Char">
            <summary>
            returns the char associated with this character position.
            If it's an InputPositionBase derivative (character placeholder),
            it will return the character that the user has input, or 0 if it's empty
            
            For LiteralPosition and derivatives, it will return the 
            literal character that will be used in storing the text (if one
            of the DataMaskModes is to include literals)
            
            set will only work if IsEditable returns true, otherwise it will
            throw an exception
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DigitChar">
            <summary>
            Class for matching digits
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DigitChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c mathces a digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.AlphaChar">
            <summary>
            Class for matching alpha characters [A-Za-z]
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.AlphaChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.AlphaNumericChar">
            <summary>
            Class for matching alpha and digits [A-Za-z0-9]
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.AlphaNumericChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyboardAndForeignChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection">
            <summary>
            DisplayCharsCollection class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
             Called when a property has changed on a sub object
            </summary>
            <param name="info"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.OnDispose">
            <summary>
            Called when the object is disposed of
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.CopyTo(Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase[],System.Int32)">
            <summary>
            Copies the display characters of the collection into the array.
            </summary>
            <param name="array">The array to receive the display characters.</param>
            <param name="arrayIndex">The array index to begin inserting the display characters.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.InitialCapacity">
            <summary>
            Overridden method to return optimum initial capacity for DisplayCharsCollection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.IsReadOnly">
            <summary>
            Overridden method returns true to indicate that the collection is read only
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement">
            <summary>
            DisplayCharUIElement class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.#ctor(Infragistics.Win.UltraWinMaskedEdit.SectionUIElement,Infragistics.Win.UltraWinMaskedEdit.DisplayCharBase)">
            <summary>
            Constructor, initializes a new instance of the <b>DisplayCharUIElement</b> class.
            </summary>
            <param name="parent"></param>
            <param name="displayChar"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appData">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden. does nothing 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden. does nothing since background drawing is done in SectionUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden method for drawing the char
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharUIElement.DisplayChar">
            <summary>
            returns the associated DisplayChar instance
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement">
            <summary>
            EditAreaUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <b>EditAreaUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.PositionChildElements">
            <summary>
            Creates the child elements for the grid
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            override initappearance 
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden. does nothing 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden. does nothing 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.EditAreaUIElement.BorderStyle">
            <summary>
            overridden method that returns UIElementBorderStyle.None 
            since EditAreaUIElement does not draw any borders.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditContextMenu.OnPopup(System.EventArgs)">
            <summary>
            Overridden OnPopup method.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Win.IEditType">
            <summary>
            Interface meant to be implemented mask based editor controls as well as objects
            that expose a mask input property (like UltraGridColumn object in the grid).
            This interface is meant to be used in conjuction with <b>MaskPropertyConvertor</b>
            type convertor for displaying a default list of input masks in the designer for
            the mask input properties.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IEditType.EditType">
            <summary>
            Gets the data type (edit type).
            </summary>
        </member>
        <member name="T:Infragistics.Win.MaskTypeConverter">
            <summary>
            Type converter for displaying standard masks.
            </summary>
        </member>
        <member name="M:Infragistics.Win.MaskTypeConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.MaskTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden. This implementation always returns true.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.MaskTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.MaskUITypeEditor">
            <summary>
            UITypeEditor for MaskInput property.
            </summary>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.MaskUITypeEditor.InitializeListBox(System.Windows.Forms.ListBox)">
            <summary>
            Invoked when the listbox used to display the enum values is created.
            </summary>
            <param name="listbox"><see cref="T:System.Windows.Forms.ListBox"/></param>
        </member>
        <member name="M:Infragistics.Win.MaskUITypeEditor.GetListItems(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object@)">
            <summary>
            Returns the set of items to show on the list.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="currentEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.MaskUITypeEditor.ValidateEditItem(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object)">
            <summary>
            Validates an item selected by the user on the list and returns it.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="selectedEntry"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.CharTypeConverter">
            <summary>
            TypeConverter class for character properties.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.CharTypeConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.CharTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.EditorWithMaskEmbeddableUIElement">
            <summary>
            EmbeddableUIElementBase implementation for EditorWithMask editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.GetContext(System.Type,System.Boolean)">
            <summary>
            Returns an object of requested type that relates to the element or null.  
            </summary>
            <param name="type">The requested type or null to pick up default context object. </param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Overridden method. Initialzes the appearance used by this element.
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.PositionChildElements">
            <summary>
            Creates the child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnBeforeDraw">
            <summary>
            A virtual method that gets called before the element draw process starts.
            </summary>
            <remarks>This is for notification purposes, the default implementation does nothing.</remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnAfterDraw(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called on a double click.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnMouseEnter">
            <summary>
            Called when the mouse enters this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.OnMouseLeave">
            <summary>
            Called when the mouse leaves this element
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskEmbeddableUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskEmbeddableUIElement.EditInfo">
            <summary>
            Returns null if not in edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskEmbeddableUIElement.IsDataFullyVisible">
            <summary>
            Returns whether the data this element displays is fully visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskEmbeddableUIElement.DrawsFocusRect">
            <summary>
            Returns true if this  element needs to draw a focus rect. This should 
            be overridden since the default implementation always returns false. 
            </summary>
            <remarks>Even if this property returns true the focus will not be drawn unless the control has focus.</remarks>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskEmbeddableUIElement.BorderStyle">
            <summary>
            Overridden property that returns the border style this ui element is going
            to have.
            </summary>
        </member>
        <member name="T:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement">
            <summary>
            Scroll buttons for the spin button uielement.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.#ctor(Infragistics.Win.EditorWithMaskSpinButtonUIElement,System.Windows.Forms.ScrollButton,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="direction">Direction of the scroll arrow.</param>
            <param name="autoRepeatDelay">Delay before initiating auto repeat.</param>
            <param name="initialDelay">Delay before first click.</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Overridden. Resolves appropriate appearance data for this ui element.
            </summary>
            <param name="appData"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Overrides ButtonUIElementBase OnControlFocus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overridden. Draws the button borders
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the dropdown button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <remarks>
            Since the actual button style is flat when the display style is Office2000 or OfficeXP, we need to override this so the arrow indicator shifts when it is clicked
            </remarks>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.ButtonStyle">
            <summary>
            Determines the style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.Direction">
            <summary>
            Returns the direction of the scroll spin button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskSpinScrollButtonUIElement.BaseArrowSizeOnSystemSize">
            <summary>
            Indicates if the scroll arrow should be limited to the system's scroll arrow size.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinButtonUIElement.CanSpin(System.Windows.Forms.ScrollButton)">
            <summary>
            Used to determine whether a spin button should be disabled during a spin operation and
            when the elements are positioned.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <returns>A boolean indicating whether the button should be enabled or disabled.</returns>
        </member>
        <member name="M:Infragistics.Win.EditorWithMaskSpinButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskSpinButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EditorWithMaskSpinButtonUIElement.BorderStyle">
            <summary>
            Overridden. Returns the border style.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.PropertyIds">
            <summary>
            This enumerates each property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Appearance">
            <summary>
            The appearance property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Appearances">
            <summary>
            The Appearances property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.DisplayChar">
            <summary>
            DisplayChar property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.DisplayChars">
            <summary>
            DisplayChars collection property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Section">
            <summary>
            Section property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Sections">
            <summary>
            Sections collection property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.PadChar">
            <summary>
            PadChar property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.PromptChar">
            <summary>
            PromptChar property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.AutoSize">
            <summary>
            AutoSize property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.InsertMode">
            <summary>
            InsertMode property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.InputMask">
            <summary>
            InputMask property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Nullable">
            <summary>
            Nullable property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SelectedTextBackColor">
            <summary>
            SelectedTextBackColor property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SelectedTextForeColor">
            <summary>
            SelectedTextForeColor property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.BorderStyle">
            <summary>
            BorderStyle property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.ClipMode">
            <summary>
            ClipMode property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.DataMode">
            <summary>
            DataMode property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.DisplayMode">
            <summary>
            DisplayMode property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.EditAs">
            <summary>
            EditAs property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Padding">
            <summary>
            Padding property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Text">
            <summary>
            Text property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.Value">
            <summary>
            Value property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SelectedText">
            <summary>
            SelectedText property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SelectionStart">
            <summary>
            SelectionStart property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SelectionLength">
            <summary>
            SelectionLengh property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.MaskLiteralsAppearance">
            <summary>
            MaskLiteralsAppearance property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.PromptCharacterAppearance">
            <summary>
            PromptCharacterAppearance property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SpinButtonDisplayStyle">
            <summary>
            SpinButtonDisplayStyle property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SpinButtonStyle">
            <summary>
            SpinButtonStyle property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.DisplayStyle">
            <summary>
            DisplayStyle property id
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.MaxValue">
            <summary>
            MaxValue property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.MinValue">
            <summary>
            MinValue property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.ReadOnly">
            <summary>
            ReadOnly property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.NullText">
            <summary>
            NullText property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.ImageTransparentColor">
            <summary>
            ImageTransparentColor property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.TabNavigation">
            <summary>
            TabNavigation
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.SpinWrap">
            <summary>
            SpinWrap
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.PropertyIds.AllowShiftingAcrossSections">
            <summary>
            AllowShiftingAcrossSections
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DisplayCharIncludeMethod">
            <summary>
            This enumeration is used to specify the value for DisplayChar.IncludeMethod 
            property. It dictates how a value of a DisplayChar is included when applying
            mask to get the text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.DisplayCharIncludeMethod.Default">
            <summary>
            Default is to look at the mask mode in deciding whether to include
            or not.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.DisplayCharIncludeMethod.Always">
            <summary>
            Always include the DisplayChar
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.DisplayCharIncludeMethod.Never">
            <summary>
            Never include the DisplayChar
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.Orientation">
            <summary>
            used to specify whether a section is right-to-left ( number sections )
            or left-to-right edit
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.Orientation.LeftToRight">
            <summary>
            for regular sections
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.Orientation.RightToLeft">
            <summary>
            usually used for number sections
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.FilterType">
            <summary>
            Used to specify the type of converting is to be done
            on an input character
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.FilterType.Unchanged">
            <summary>
            Unchanged, character will be unchanged
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.FilterType.LowerCase">
            <summary>
            character will be converted to lower case
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.FilterType.UpperCase">
            <summary>
            character will be converted to upper case
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MaskMode">
            <summary>
            specifies the mode to be applied when getting text from the 
            masked edit control
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskMode.Raw">
            <summary>
            (Default) Raw Data Mode. Only significant characters will be
            returned. Any prompt characters or literals will be excluded 
            from the text.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskMode.IncludeLiterals">
            <summary>
            Include Literal Characters. Data and literal characters will 
            be returned. Prompt characters will be omitted.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskMode.IncludePromptChars">
            <summary>
            Include Prompt Characters. Data and prompt characters will be 
            returned. Literals will be omitted.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskMode.IncludeBoth">
            <summary>
            Include both Prompt Characters and Literals. Text will be 
            returned exactly as it appears in the object when a cell is
            in edit mode. Data, prompt character and literals will all be 
            included.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskMode.IncludeLiteralsWithPadding">
            <summary>
            Include Literals With Padding. Prompt characters will be 
            converted into pad characters (by default they are spaces,
            which are then included with literals and data when text 
            is returned.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.SignDisplayType.None">
            <summary>
            No sign support in the section, so the section will always contain positive numbers.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.SignDisplayType.ShowWhenNegative">
            <summary>
            Sign will only be displayed when the value is negative.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.SignDisplayType.ShowAlways">
            <summary>
            Sign will always be displayed (+ when positive, - when negative).
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MaskedEditTabNavigation">
            <summary>
            Determines the behavior of the tab key in masked editors.
            </summary>
            <remarks>This only applies to masked editor controls where there are number sections defined.</remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditTabNavigation.NextControl">
            <summary>
            Tab to the next control
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditTabNavigation.NextSection">
            <summary>
            Tab to the next section or to the next control if focus is in the last section. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.InvalidOperationEventArgs">
            <summary>
            InvalidOperationEventArgs class for firing InvalidOperation event. You
            can prevent the default behaviour of MaskedEdit control which is to beep
            by setting the Beep property to false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InvalidOperationEventArgs.Message">
            <summary>
            gets the message associated with an illegal operation user was
            trying to perform
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InvalidOperationEventArgs.Beep">
            <summary>
            you can set this property to false to prevent the masked edit from 
            beeping.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.InvalidCharEventArgs">
            <summary>
            InvalidCharEventArgs class for firing InvalidChar event. You
            can prevent the default behaviour of MaskedEdit control which is to beep
            by setting the Beep property to false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InvalidCharEventArgs.Char">
            <summary>
            gets the invalid char that the user attempted to input		
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InvalidCharEventArgs.DisplayChar">
            <summary>
            gets the display char instance associated with the illegal char
            input
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.InvalidCharEventArgs.Beep">
            <summary>
            you can set this property to false to prevent the masked edit from 
            beeping.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.InputMaskParser.AdjustNonstandardForeignDateMask(System.String@)">
            <summary>
            If the current culture requires a non-standard mask for dates (such as in Japan) then
            this method inserts a '/' character after the last date section in the input mask.  This
            allows the analyze method to successfully insert the special postfix character after that
            last date section.
            </summary>
            <param name="inputMask">A reference to the input mask to be analyzed and modified, if appropriate.</param>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction">
            <summary>
            Enumerates the possible actions that can be performed on the masked edit control
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.NextCharacter">
            <summary>
            move to next character
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.PrevCharacter">
            <summary>
            move to prev character
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.FirstCharacter">
            <summary>
            move the caret to the beginning of the text
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.AfterLastCharacter">
            <summary>
            move the caret to the end of the text
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.NextSection">
            <summary>
            move to next section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.PrevSection">
            <summary>
            move to prev section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.Delete">
            <summary>
            delete operation when delete key is pressed
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.Backspace">
            <summary>
            backspace operation when delete key is pressed
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.Copy">
            <summary>
            Copy action
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.Cut">
            <summary>
            Cut action
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.Paste">
            <summary>
            Paste action
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.ToggleInsertionMode">
            <summary>
            toggle the insertion mode
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.SetPivot">
            <summary>
            set's the position of pivot to current caret position
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.SelectSection">
            <summary>
            Selects the current section. If there is some text already
            selected, it will deselect it and then select the current section.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.UpKeyAction">
            <summary>
            action associated with up arrow key
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.DownKeyAction">
            <summary>
            action associated with down arrow key
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.NextControl">
            <summary>
            go to next control
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction.PrevControl">
            <summary>
            go to prev control
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState">
            <summary>
            Bit flags that describe the state of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.Character">
            <summary>
            caret is positioned right before a display char
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.FirstCharacter">
            <summary>
            the caret is positioned right before the first display char
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.LastCharacter">
            <summary>
            the caret is positioned right before the last display char 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.FirstSection">
            <summary>
            the caret is in the first section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.LastSection">
            <summary>
            the caret is in the last section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.FirstCharacterInSection">
            <summary>
            the caret is positioned right before the first character in a section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.LastCharacterInSection">
            <summary>
            the caret is positioned right before the last character in a section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.AfterLastCharacter">
            <summary>
            the caret is positioned after the last display character		
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.Selected">
            <summary>
            some text is selected
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.UnInitialized">
            <summary>
            Mask has not been initialized, and thus no sections or
            display chars collection exists
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.FirstEditSection">
            <summary>
            the caret is in the first edit section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.LastEditSection">
            <summary>
            the caret is in the last edit section
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.NotInEditMode">
            <summary>
            State where the editor is not in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinMaskedEdit.MaskedEditState.TabBySections">
            <summary>
            State whether the editor permits tabbing by sections based on the TabNavigation proeprty.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping">
            <summary>
            Key/Action mapping object for UltraGrid.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping.#ctor(System.Windows.Forms.Keys,Infragistics.Win.UltraWinMaskedEdit.MaskedEditAction,Infragistics.Win.UltraWinMaskedEdit.MaskedEditState,Infragistics.Win.UltraWinMaskedEdit.MaskedEditState,Infragistics.Win.SpecialKeys,Infragistics.Win.SpecialKeys)">
            <summary>
            Constructor, initializes a new instance of the <b>KeyActionMapping</b> class.
            </summary>
            <param name="keyCode"><see cref="T:System.Windows.Forms.Keys"/>KeyCode to map</param>
            <param name="actionCode"><see cref="T:System.Enum"/>Action code to map to the KeyCode</param>
            <param name="stateDisallowed"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST NOT be in for this mapping to be active. If the current state of the control has any of these bits turned on this mapping will be ignored.</param>
            <param name="stateRequired"><see cref="T:System.Int64"/>These are bit flags that specify the state that the control MUST be in for this mapping to be active. In a derived class this property should be hidden by one that returns an appropriate flagged enum.</param>
            <param name="specialKeysDisallowed"><see cref="T:Infragistics.Win.SpecialKeys"/>The special keys that are NOT allowed. If shift, ctrl or alt are pressed and their corresponding bit is turned on in this property the mapping will be ignored. </param>
            <param name="specialKeysRequired"><see cref="T:Infragistics.Win.SpecialKeys"/>These keys (any combination of shift/control/alt) MUST be pressed. Otherwise, this mapping will be ignored. </param>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping.ActionCode">
            <summary>
            Gets/sets the action code. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping.StateDisallowed">
            <summary>
            Gets/sets the disallowed state. These are bit flags that specify
            the state that the control MUST NOT be in for this mapping to be
            active. If the current state of the control has any of these 
            bits turned on this mapping will be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping.StateRequired">
            <summary>
            Gets/sets the required state. These are bit flags that specify
            the state that the control MUST be in for this mapping to be
            active.  
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings">
            <summary>
               Summary description for KeyActionMappings.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>KeyActionMappings</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings.LoadDefaultMappings">
            <summary>
            Called the first time GetActionMapping
            is called (enables lazy loading of mappings)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings.CopyTo(Infragistics.Win.UltraWinMaskedEdit.KeyActionMapping[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="array">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings.CreateActionStateMappingsCollection">
            <summary>
            Creates an instance of an ActionStateMappingsCollection derived class
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.KeyActionMappings.Item(System.Int32)">
            <summary>
            indexer 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement">
            <summary>
            The main element for an editing area for the masked edit.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <b>MaskedEditUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appData">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.PositionChildElements">
            <summary>
            Creates the child elements for the grid
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden method for drawing the foreground of masked edit ui element.
            </summary>
            <param name="drawParams"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            overridden method for drawing the foreground of masked edit ui element.
            </summary>
            <param name="drawParams"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Called on a double click. It selects all the characters.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse up message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.BorderStyle">
            <summary>
            Overrides the BorderStyle to return the BorderStyle from the UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.ClipChildren">
            <summary>
            overridden method that returns true to indicate that the children 
            are to be clipped
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.ClipRectChildren">
            <summary>
            Overridden method. Returns the clip rectangle for all it's child 
            ui elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskedEditUIElement.Cursor">
            <summary>
            Overrides the Cursor to return the cursor from the UIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditInfo.OnDispose">
            <summary>
            overridden method that properly disposes of allocated
            resources
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskInfo.IsBeingEditedAndFocused">
            <summary>
            Returns true if in edit mode and the associated control is focused.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskInfo.IsBeingEdited">
            <summary>
            Returns true if in edit mode.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetMaskInfo(System.Object,System.String@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@,Infragistics.Win.UltraWinMaskedEdit.MaskMode@)">
            <summary>
            Returns masking information. This is only of ibterest to a editor that supports masking.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="mask">The string used for masking the value or null if there is no mask.</param>
            <param name="dataMode">Determines whether literals and prompt characters are included in Value property of the Editor.</param>
            <param name="displayMode">Determines whether literals and prompt characters are displayed when not in edit mode.</param>
            <param name="clipMode">Determines whether literals and prompt characters are included when the editor copyies text to the clipboard.</param>
            <returns>True only if masking info is available.</returns>
            <remarks>The default implementation returns <b>false</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)">
            <summary>
            Returns information needed to format a string.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <param name="format">Returns the format string or null.</param>
            <param name="provider">Returns the IFormatProvider or null.</param>
            <remarks>The default implementation returns <b>null</b> (Nothing in VB)</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetValue(System.Object)">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetEditor(System.Object)">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetDataType(System.Object)">
            <summary>
            Returns the data type.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <remarks>The default implementation returns type of <b>string</b>.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.GetEditorElement(System.Object)">
            <summary>
            Returns the embeddable uielement associated with a particular object or null if none is available.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <returns>The embeddable uielement representing the specified owner context.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.MaskEmbeddableOwner.DesignMode">
            <summary>
            This member supports the Editor infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.ParsedMask">
            <summary>
            Class for applying a mask to a string without having to create a masked
            edit control
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.ParsedMask.#ctor(System.String)">
            <summary>
            Contructor, initializes a new instance of the <b>ParsedMask</b> class.
            </summary>
            <param name="mask">Parsing of mask will be based on the settings on the maskedEdit.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.ParsedMask.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Contructor, initializes a new instance of the <b>ParsedMask</b> class.
            </summary>
            <param name="mask">Parsing of mask will be based on the settings on the maskedEdit.</param>
            <param name="formatProvider">CultureInfo settings to use to determine decimal seperator and comma chars.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.ParsedMask.ApplyMask(System.String,Infragistics.Win.UltraWinMaskedEdit.MaskMode,System.Char,System.Char)">
            <summary>
             Applies the mask to str and returns the new string
            </summary>
            <param name="str">String to be masked</param>
            <param name="maskMode"><see cref="T:Infragistics.Win.UltraWinMaskedEdit.MaskMode"/></param>
            <param name="promptChar">Prompt characters</param>
            <param name="padChar">Padding characters</param>
            <returns>Masked string</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.ParsedMask.ApplyMask(System.String,Infragistics.Win.UltraWinMaskedEdit.MaskMode,System.Char,System.Char,System.Int32@)">
            <summary>
            Applies the mask to str and returns the new string
            </summary>
            <param name="str">String to be masked</param>
            <param name="maskMode"><see cref="T:Infragistics.Win.UltraWinMaskedEdit.MaskMode"/></param>
            <param name="promptChar">Prompt characters</param>
            <param name="padChar">Padding characters</param>
            <param name="numberOfCharsMatched">Returns number of chars that matched mask.</param>
            <returns>Masked string</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.ParsedMask.Mask">
            <summary>
            Mask that this parsed mask object was created from
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.SectionBase">
            <summary>
            abstract base class for all the different kinds of sections
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionBase.ValidateString(System.String@)">
            <summary>
            checks if str is a valid string for this section.
            Either returns str itself or returns a modified string that is to be displayed.
            Returns null to indicate that validation failed
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionBase.GetText">
            <summary>
            Returns the text for this section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
             Called when a property has changed on a sub object
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionBase.OnDispose">
            <summary>
            Called when the object is disposed of
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.Sections">
            <summary>
            returns the edit sections collection this edit section belongs to
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.DisplayChars">
            <summary>
            returns the display chars collection for this edit section
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.PrevSection">
            <summary>
            Finds the previous section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.PrevLiteralSection">
            <summary>
            Returns the previous literal section, skipping any edit sections.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.NextSection">
            <summary>
            Returns the next section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.PrevEditSection">
            <summary>
            Returns the previous edit section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.NextEditSection">
            <summary>
            Returns the next edit section, skipping any literal sections.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.NextLiteralSection">
            <summary>
            Returns the next literal section, skipping any edit sections.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.Appearance">
            <summary>
            Returns the Appearance for this section.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionBase.HasAppearance">
            <summary>
            Returns true if an appearance object has been created.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.LiteralSection">
            <summary>
            LiteralSection class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.LiteralSection.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.LiteralSection.SetFilterToAllChars(Infragistics.Win.UltraWinMaskedEdit.FilterType)">
            <summary>
            overridden method does nothing
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.LiteralSection.ValidateString(System.String@)">
            <summary>
            Validates the string for this section.
            </summary>
            This method checks to see if the specified string is a valid string for this section. It may modify the specified string in which case the new string will be close to the specified string, but one that matches the section. This method returns False to indicate that validation failed.
            <param name="str">string to validate</param>
            <returns><b>True</b> if string is valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase">
            <summary>
            base class for any non-literal sections
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase.SafeDisplayCharAt(System.Int32)">
            <summary>
            Returns character in DisplayChars collection at index.
            </summary>
            <param name="index">index of char to display</param>
            <returns>character at position or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase.ValidateSection">
            <summary>
            Validates the section
            </summary>
            This method is usually invoked when the input position is being removed from the section. It returns True if an appropriate value has been input in the section. This function may modify the values of display characters.
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase.ValidateSection(System.Boolean)">
            <summary>
            Validates the section.
            </summary>
            <remarks>
            This method is usually invoked when the input position is being removed from the section. It returns True if an appropriate value has been input in the section. This function may modify the values of display characters.
            </remarks>
            <param name="contentModificationsAllowed">Whether the implementation should modify the contents.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.EditSectionBase.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection">
            <summary>
            display charsedit section that is based
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>DisplayCharsEditSection</b> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection.ValidateString(System.String@)">
            <summary>
            Checks if str is a valid string for this section.
            Either returns itself or returns a modified string that is to be displayed.
            Returns false to indicate that validation failed
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection.ValidateSection(System.Boolean)">
            <summary>
            checks to see if the so far input chars in the section
            satisfy the input requirement for the section
            </summary>
            <param name="contentModificationsAllowed">Whether or not to allow content modification</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.DisplayCharsEditSection.Orientation">
            <summary>
            indicates whether this section is a right-to-left edit section (number section)
            or a left-to-right (regular edit sections)
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.NumberSection">
            <summary>
            a number section
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.NumberSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.NumberSection.ShiftLeft(System.Int32,System.Int32)">
             <summary>
            Overridden. Throws an InvalidOperationException exception
             since this function is invalid for a number section 
             </summary>
             <param name="from"></param>
             <param name="positionsToShift"></param>
             <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.NumberSection.ValidateString(System.String@)">
            <summary>
            Returns true if string str matches the mask associated with this section
            </summary>
            <param name="str">string to validate</param>
            <returns><b>true</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.NumberSection.ValidateSection(System.Boolean)">
            <summary>
            if the input in this section matches the mask.
            </summary>
            <param name="contentModificationsAllowed">Whether or not modifications are allowed</param>
            <returns><b>true</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.NumberSection.CreateDisplayChars">
            <summary>
            Creates display chars associated with this edit section to the passed
            in displayChars collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.NumberSection.MinValue">
            <summary>
            min value for this section
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.NumberSection.MaxValue">
            <summary>
            max value for this section
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.NumberSection.Orientation">
            <summary>
            overridden. returns RightToLeft to indicate that this section
            is to be edited right-to-left
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MonthSection">
            <summary>
            month section part of a date mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MonthSection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>MonthSection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MonthSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MonthSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MonthSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.DaySection">
            <summary>
            day section part of a date mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DaySection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>DaySection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DaySection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DaySection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.DaySection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.YearSection">
            <summary>
            year section of a date mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.YearSection.#ctor(System.Boolean)">
            <summary>
            constructor, initializes a new instance of the <b>YearSection</b> class.
            </summary>
            <param name="isFourDigits">indicates if year section is 4 digits or 2 digits</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.YearSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.YearSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.HourSection">
            <summary>
            hour section of a time mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.HourSection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>HourSection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.HourSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.HourSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.HourSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.AMPMSection">
            <summary>
            Class for AP-PM section of a time mask.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.AMPMSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.AMPMSection.CustomDisplayChar.MatchChar(System.Char)">
            <summary>
            checks to see if specified character c matches
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.AMPMSection.CustomDisplayChar.Char">
            <summary>
            Overridden
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.MinuteSection">
            <summary>
            minute section of a time mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MinuteSection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>MinuteSection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MinuteSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MinuteSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.MinuteSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.SecondSection">
            <summary>
            second section of a time mask
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SecondSection.#ctor">
            <summary>
            constructor, initializes a new instance of the <b>SecondSection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SecondSection.ValidateString(System.String@)">
            <summary>
            ValidateString
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SecondSection.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SecondSection.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.FractionPart">
            <summary>
            Edit section implementation for a fraction part.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.FractionPart.SetText(System.String)">
            <summary>
            Assigns the text to the section. Call to this method with an invalid text will result in an exception.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.FractionPart.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection.
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.FractionPart.ValidateString(System.String@)">
            <summary>
            ValidateString.
            </summary>
            <param name="str">string to validate</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.FractionPart.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.FractionPartContinuous">
            <summary>
            Edit section implementation for a fraction part.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.FractionPartContinuous.ValidateSection(System.Boolean)">
            <summary>
            ValidateSection.
            </summary>
            <param name="contentModificationsAllowed">Whether or not contents can be modified</param>
            <returns><b>True</b> if valid, <b>false</b> otherwise</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.FractionPartContinuous.Orientation">
            <summary>
            Returns whether editing is left-to-right or right-to-left.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection">
            <summary>
            sections collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.CopyTo(Infragistics.Win.UltraWinMaskedEdit.SectionBase[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="array">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
             Called when a property has changed on a sub object
            </summary>
            <param name="info"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.OnDispose">
            <summary>
            Called when the object is disposed of
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.Clone">
            <summary>
            Clones the sections collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.InitialCapacity">
            <summary>
            overriden property returns optimum initial capacity for sections
            collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.IsReadOnly">
            <summary>
            overridden. indicates that the collection is read only
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionsCollection.Item(System.Int32)">
            <summary>
            read only indexer
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement">
            <summary>
            SectionUIElement. Used for drawing each section
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinMaskedEdit.SectionBase)">
            <summary>
            Initializes a new <b>SectionUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
            <param name="section">Associated <b>SectionBase</b></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default backcolor drawing just does a FillRectangle with the backcolor.
            overridden. does nothing 
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default background picture drawing
            overridden. does nothing 
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.PositionChildElements">
            <summary>
            Creates the child elements for the grid
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appData">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.Section">
            <summary>
            returns associated EditSection instance
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.BorderStyle">
            <summary>
            overridden method to return appropriated BorderStyle for SectionUIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinMaskedEdit.SectionUIElement.ClipChildren">
            <summary>
            overridden method that returns true to indicate that the children 
            are to be clipped
            </summary>
        </member>
        <member name="T:Infragistics.Win.MicrosoftColorTable">
            <summary>
            Abstract base class for <see cref="T:Infragistics.Win.Office2003ColorTable"/> and <see cref="T:Infragistics.Win.VisualStudio2005ColorTable"/>
            </summary>
        </member>
        <member name="F:Infragistics.Win.MicrosoftColorTable.NO_THEME">
            <summary>
            
            </summary>
        </member>
        <member name="E:Infragistics.Win.MicrosoftColorTable.NonThemeColorsRefreshNeeded">
            <summary>
            Fires when the non-themed colors need to be refreshed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.AddRemoveHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.AddRemoveOpenHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.DockAreaGradientLight">
            <summary>
            DockAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.DockAreaGradientDark">
            <summary>
            DockAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.FloatingControlContainerToolbar">
            <summary>
            FloatingControlContainerToolbar
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.FloatingToolbarCaption">
            <summary>
            FloatingToolbarCaption
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.FloatingToolbarCaptionText">
            <summary>
            FloatingToolbarCaptionText
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.GrabHandleDarkSquare">
            <summary>
            GrabHandleDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightMouseDownGradientLight">
            <summary>
            HighlightMouseDownGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightMouseDownGradientDark">
            <summary>
            HighlightMouseDownGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightNotPressedGradientLight">
            <summary>
            HighlightNotPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightNotPressedGradientDark">
            <summary>
            HighlightNotPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightNotPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightNotPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightPopupMenuItem">
            <summary>
            HighlightPopupMenuItem
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightPressedGradientLight">
            <summary>
            HighlightPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightPressedGradientDark">
            <summary>
            HighlightPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightQuickCustomizeFloating">
            <summary>
            HighlightQuickCustomizeFloating
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightQuickCustomizeGradientLight">
            <summary>
            HighlightQuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightQuickCustomizeGradientDark">
            <summary>
            HighlightQuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightTaskPaneScrollButton">
            <summary>
            HighlightTaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.HighlightTaskPaneScrollButtonBorder">
            <summary>
            HighlightTaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MainMenuBarGradientLight">
            <summary>
            MainMenuBarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MainMenuBarGradientDark">
            <summary>
            MainMenuBarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuExpandButtonGradientLight">
            <summary>
            MenuExpandButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuExpandButtonGradientDark">
            <summary>
            MenuExpandButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuIconAreaGradientLight">
            <summary>
            MenuIconAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuIconAreaGradientDark">
            <summary>
            MenuIconAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuIconAreaExpandedGradientLight">
            <summary>
            MenuIconAreaExpandedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuIconAreaExpandedGradientDark">
            <summary>
            MenuIconAreaExpandedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuItemCheckmark">
            <summary>
            MenuItemCheckmark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuItemCheckmarkHighlight">
            <summary>
            MenuItemCheckmarkHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.MenuDroppedBackColor">
            <summary>
            MenuDroppedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneBorder">
            <summary>
            OutlookNavPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneCurrentGroupHeaderForecolor">
            <summary>
            OutlookNavPaneCurrentGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneCurrentGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneCurrentGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneGroupHeaderForecolor">
            <summary>
            OutlookNavPaneGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneHotGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneHotGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneHotGroupHeaderForecolor">
            <summary>
            OutlookNavPaneHotGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneHotOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneHotOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneItemAreaBackcolor">
            <summary>
            OutlookNavPaneItemAreaBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneOverflowButtonBackcolor">
            <summary>
            OutlookNavPaneOverflowButtonBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPanePressedGroupHeaderGradientLight">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPanePressedGroupHeaderGradientDark">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPanePressedGroupHeaderForecolor">
            <summary>
            OutlookNavPanePressedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPanePressedOverflowButtonGradientLight">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPanePressedOverflowButtonGradientDark">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSelectedGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSelectedGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSelectedGroupHeaderForecolor">
            <summary>
            OutlookNavPaneSelectedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSelectedOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSelectedOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSplitterGradientLight">
            <summary>
            OutlookNavPaneSplitterGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSplitterGradientDark">
            <summary>
            OutlookNavPaneSplitterGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSplitterDarkSquare">
            <summary>
            OutlookNavPaneSplitterDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSplitterLightSquare">
            <summary>
            OutlookNavPaneSplitterLightSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneSplitterMiddleSquare">
            <summary>
            OutlookNavPaneSplitterMiddleSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneLabelItemGradientLight">
            <summary>
            OutlookNavPaneLabelItemGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneLabelItemGradientDark">
            <summary>
            OutlookNavPaneLabelItemGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.OutlookNavPaneItemWithNoImageForeColor">
            <summary>
            OutlookNavPaneItemWithNoImageForeColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.PopupMenuBorder">
            <summary>
            PopupMenuBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.PopupMenuToolOpenGradientLight">
            <summary>
            PopupMenuToolOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.PopupMenuToolOpenGradientDark">
            <summary>
            PopupMenuToolOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.PressedGradientLight">
            <summary>
            PressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.PressedGradientDark">
            <summary>
            PressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.QuickCustomizeGradientLight">
            <summary>
            QuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.QuickCustomizeGradientDark">
            <summary>
            QuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.QuickCustomizeOpenGradientLight">
            <summary>
            QuickCustomizeOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.QuickCustomizeOpenGradientDark">
            <summary>
            QuickCustomizeOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.QuickCustomizeOpenFloating">
            <summary>
            QuickCustomizeOpen
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.SeparatorLight">
            <summary>
            SeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.SeparatorDark">
            <summary>
            SeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneActiveCaptionLight">
            <summary>
            TaskPaneActiveCaptionLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneActiveCaptionDark">
            <summary>
            TaskPaneActiveCaptionDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneBorder">
            <summary>
            TaskPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneContentArea">
            <summary>
            TaskPaneContentArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneNavigationArea">
            <summary>
            TaskPaneNavigationArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneNavigationToolSeparatorDark">
            <summary>
            TaskPaneNavigationToolSeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneNavigationToolSeparatorLight">
            <summary>
            TaskPaneNavigationToolSeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneScrollButton">
            <summary>
            TaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TaskPaneScrollButtonBorder">
            <summary>
            TaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.TearawayStrip">
            <summary>
            TearawayStrip
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarCornerShadowDark">
            <summary>
            ToolbarCornerShadowDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarCornerShadowLight">
            <summary>
            ToolbarCornerShadowLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarCornerShadowMedium">
            <summary>
            ToolbarCornerShadowMedium
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarGradientLight">
            <summary>
            ToolbarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarGradientDark">
            <summary>
            ToolbarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolbarUnderline">
            <summary>
            ToolbarUnderline
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolBorder">
            <summary>
            ToolBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.MicrosoftColorTable.ToolBorderMouseDown">
            <summary>
            ToolBorderMouseDown
            </summary>
        </member>
        <member name="T:Infragistics.Win.Office2003ColorTable">
            <summary>
            Class containing color properties representing the colors used by the Microsoft Office 2003 products.
            </summary>	
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.Colors">
            <summary>
            Colors: Returns singleton instance of Office2003ColorTable class
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.AddRemoveHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.AddRemoveOpenHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.DockAreaGradientLight">
            <summary>
            DockAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.DockAreaGradientDark">
            <summary>
            DockAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.FloatingControlContainerToolbar">
            <summary>
            FloatingControlContainerToolbar
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.FloatingToolbarCaption">
            <summary>
            FloatingToolbarCaption
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.FloatingToolbarCaptionText">
            <summary>
            FloatingToolbarCaptionText
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.GrabHandleDarkSquare">
            <summary>
            GrabHandleDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightMouseDownGradientLight">
            <summary>
            HighlightMouseDownGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightMouseDownGradientDark">
            <summary>
            HighlightMouseDownGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightNotPressedGradientLight">
            <summary>
            HighlightNotPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightNotPressedGradientDark">
            <summary>
            HighlightNotPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightNotPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightNotPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightPopupMenuItem">
            <summary>
            HighlightPopupMenuItem
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightPressedGradientLight">
            <summary>
            HighlightPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightPressedGradientDark">
            <summary>
            HighlightPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightQuickCustomizeFloating">
            <summary>
            HighlightQuickCustomizeFloating
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightQuickCustomizeGradientLight">
            <summary>
            HighlightQuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightQuickCustomizeGradientDark">
            <summary>
            HighlightQuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightTaskPaneScrollButton">
            <summary>
            HighlightTaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.HighlightTaskPaneScrollButtonBorder">
            <summary>
            HighlightTaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MainMenuBarGradientLight">
            <summary>
            MainMenuBarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MainMenuBarGradientDark">
            <summary>
            MainMenuBarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuExpandButtonGradientLight">
            <summary>
            MenuExpandButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuExpandButtonGradientDark">
            <summary>
            MenuExpandButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuIconAreaGradientLight">
            <summary>
            MenuIconAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuIconAreaGradientDark">
            <summary>
            MenuIconAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuIconAreaExpandedGradientLight">
            <summary>
            MenuIconAreaExpandedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuIconAreaExpandedGradientDark">
            <summary>
            MenuIconAreaExpandedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuItemCheckmark">
            <summary>
            MenuItemCheckmark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuItemCheckmarkHighlight">
            <summary>
            MenuItemCheckmarkHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.MenuDroppedBackColor">
            <summary>
            MenuDroppedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneBorder">
            <summary>
            OutlookNavPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneCurrentGroupHeaderForecolor">
            <summary>
            OutlookNavPaneCurrentGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneCurrentGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneCurrentGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneGroupHeaderForecolor">
            <summary>
            OutlookNavPaneGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneHotGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneHotGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneHotGroupHeaderForecolor">
            <summary>
            OutlookNavPaneHotGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneHotOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneHotOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneItemAreaBackcolor">
            <summary>
            OutlookNavPaneItemAreaBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneOverflowButtonBackcolor">
            <summary>
            OutlookNavPaneOverflowButtonBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPanePressedGroupHeaderGradientLight">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPanePressedGroupHeaderGradientDark">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPanePressedGroupHeaderForecolor">
            <summary>
            OutlookNavPanePressedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPanePressedOverflowButtonGradientLight">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPanePressedOverflowButtonGradientDark">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSelectedGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSelectedGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSelectedGroupHeaderForecolor">
            <summary>
            OutlookNavPaneSelectedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSelectedOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSelectedOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSplitterGradientLight">
            <summary>
            OutlookNavPaneSplitterGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSplitterGradientDark">
            <summary>
            OutlookNavPaneSplitterGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSplitterDarkSquare">
            <summary>
            OutlookNavPaneSplitterDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSplitterLightSquare">
            <summary>
            OutlookNavPaneSplitterLightSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneSplitterMiddleSquare">
            <summary>
            OutlookNavPaneSplitterMiddleSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneLabelItemGradientLight">
            <summary>
            OutlookNavPaneLabelItemGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneLabelItemGradientDark">
            <summary>
            OutlookNavPaneLabelItemGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.OutlookNavPaneItemWithNoImageForeColor">
            <summary>
            OutlookNavPaneItemWithNoImageForeColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.PopupMenuBorder">
            <summary>
            PopupMenuBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.PopupMenuToolOpenGradientLight">
            <summary>
            PopupMenuToolOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.PopupMenuToolOpenGradientDark">
            <summary>
            PopupMenuToolOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.PressedGradientLight">
            <summary>
            PressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.PressedGradientDark">
            <summary>
            PressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.QuickCustomizeGradientLight">
            <summary>
            QuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.QuickCustomizeGradientDark">
            <summary>
            QuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.QuickCustomizeOpenGradientLight">
            <summary>
            QuickCustomizeOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.QuickCustomizeOpenGradientDark">
            <summary>
            QuickCustomizeOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.QuickCustomizeOpenFloating">
            <summary>
            QuickCustomizeOpen
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.SeparatorLight">
            <summary>
            SeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.SeparatorDark">
            <summary>
            SeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneActiveCaptionLight">
            <summary>
            TaskPaneActiveCaptionLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneActiveCaptionDark">
            <summary>
            TaskPaneActiveCaptionDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneBorder">
            <summary>
            TaskPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneContentArea">
            <summary>
            TaskPaneContentArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneNavigationArea">
            <summary>
            TaskPaneNavigationArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneNavigationToolSeparatorDark">
            <summary>
            TaskPaneNavigationToolSeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneNavigationToolSeparatorLight">
            <summary>
            TaskPaneNavigationToolSeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneScrollButton">
            <summary>
            TaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TaskPaneScrollButtonBorder">
            <summary>
            TaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.TearawayStrip">
            <summary>
            TearawayStrip
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarCornerShadowDark">
            <summary>
            ToolbarCornerShadowDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarCornerShadowLight">
            <summary>
            ToolbarCornerShadowLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarCornerShadowMedium">
            <summary>
            ToolbarCornerShadowMedium
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarGradientLight">
            <summary>
            ToolbarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarGradientDark">
            <summary>
            ToolbarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolbarUnderline">
            <summary>
            ToolbarUnderline
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolBorder">
            <summary>
            ToolBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003ColorTable.ToolBorderMouseDown">
            <summary>
            ToolBorderMouseDown
            </summary>
        </member>
        <member name="T:Infragistics.Win.VisualStudio2005ColorTable">
             <summary>
             Class containing color properties representing the colors used by Visual Studio 2005.
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.Colors">
            <summary>
            Colors: Returns singleton instance of VisualStudio2005ColorTable class
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.AddRemoveHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.AddRemoveOpenHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockAreaGradientLight">
            <summary>
            DockAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockAreaGradientDark">
            <summary>
            DockAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.FloatingControlContainerToolbar">
            <summary>
            FloatingControlContainerToolbar
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.FloatingToolbarCaption">
            <summary>
            FloatingToolbarCaption
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.FloatingToolbarCaptionText">
            <summary>
            FloatingToolbarCaptionText
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.GrabHandleDarkSquare">
            <summary>
            GrabHandleDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightMouseDownGradientLight">
            <summary>
            HighlightMouseDownGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightMouseDownGradientDark">
            <summary>
            HighlightMouseDownGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightNotPressedGradientLight">
            <summary>
            HighlightNotPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightNotPressedGradientDark">
            <summary>
            HighlightNotPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightPopupMenuItem">
            <summary>
            HighlightPopupMenuItem
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightPressedGradientLight">
            <summary>
            HighlightPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightPressedGradientDark">
            <summary>
            HighlightPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightNotPressedTaskPaneNavigationAreaButton">
            <summary>
            HighlightNotPressedTaskPaneNavigationAreaButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightQuickCustomizeFloating">
            <summary>
            HighlightQuickCustomizeFloating
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightQuickCustomizeGradientLight">
            <summary>
            HighlightQuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightQuickCustomizeGradientDark">
            <summary>
            HighlightQuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightTaskPaneScrollButton">
            <summary>
            HighlightTaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.HighlightTaskPaneScrollButtonBorder">
            <summary>
            HighlightTaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MainMenuBarGradientLight">
            <summary>
            MainMenuBarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MainMenuBarGradientDark">
            <summary>
            MainMenuBarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuExpandButtonGradientLight">
            <summary>
            MenuExpandButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuExpandButtonGradientDark">
            <summary>
            MenuExpandButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuIconAreaGradientLight">
            <summary>
            MenuIconAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuIconAreaGradientDark">
            <summary>
            MenuIconAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuIconAreaExpandedGradientLight">
            <summary>
            MenuIconAreaExpandedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuIconAreaExpandedGradientDark">
            <summary>
            MenuIconAreaExpandedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuItemCheckmark">
            <summary>
            MenuItemCheckmark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuItemCheckmarkHighlight">
            <summary>
            MenuItemCheckmarkHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.MenuDroppedBackColor">
            <summary>
            MenuDroppedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneBorder">
            <summary>
            OutlookNavPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneCurrentGroupHeaderForecolor">
            <summary>
            OutlookNavPaneCurrentGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneCurrentGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneCurrentGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneGroupHeaderForecolor">
            <summary>
            OutlookNavPaneGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneHotGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneHotGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneHotGroupHeaderForecolor">
            <summary>
            OutlookNavPaneHotGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneHotOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneHotOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneItemAreaBackcolor">
            <summary>
            OutlookNavPaneItemAreaBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneOverflowButtonBackcolor">
            <summary>
            OutlookNavPaneOverflowButtonBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPanePressedGroupHeaderGradientLight">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPanePressedGroupHeaderGradientDark">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPanePressedGroupHeaderForecolor">
            <summary>
            OutlookNavPanePressedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPanePressedOverflowButtonGradientLight">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPanePressedOverflowButtonGradientDark">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSelectedGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSelectedGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSelectedGroupHeaderForecolor">
            <summary>
            OutlookNavPaneSelectedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSelectedOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSelectedOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSplitterGradientLight">
            <summary>
            OutlookNavPaneSplitterGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSplitterGradientDark">
            <summary>
            OutlookNavPaneSplitterGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSplitterDarkSquare">
            <summary>
            OutlookNavPaneSplitterDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSplitterLightSquare">
            <summary>
            OutlookNavPaneSplitterLightSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneSplitterMiddleSquare">
            <summary>
            OutlookNavPaneSplitterMiddleSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneLabelItemGradientLight">
            <summary>
            OutlookNavPaneLabelItemGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneLabelItemGradientDark">
            <summary>
            OutlookNavPaneLabelItemGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.OutlookNavPaneItemWithNoImageForeColor">
            <summary>
            OutlookNavPaneItemWithNoImageForeColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.PopupMenuBorder">
            <summary>
            PopupMenuBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.PopupMenuToolOpenGradientLight">
            <summary>
            PopupMenuToolOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.PopupMenuToolOpenGradientDark">
            <summary>
            PopupMenuToolOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.PressedGradientLight">
            <summary>
            PressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.PressedGradientDark">
            <summary>
            PressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.QuickCustomizeGradientLight">
            <summary>
            QuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.QuickCustomizeGradientDark">
            <summary>
            QuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.QuickCustomizeOpenGradientLight">
            <summary>
            QuickCustomizeOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.QuickCustomizeOpenGradientDark">
            <summary>
            QuickCustomizeOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.QuickCustomizeOpenFloating">
            <summary>
            QuickCustomizeOpen
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.SeparatorLight">
            <summary>
            SeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.SeparatorDark">
            <summary>
            SeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneActiveCaptionLight">
            <summary>
            TaskPaneActiveCaptionLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneActiveCaptionDark">
            <summary>
            TaskPaneActiveCaptionDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneBorder">
            <summary>
            TaskPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneContentArea">
            <summary>
            TaskPaneContentArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneNavigationArea">
            <summary>
            TaskPaneNavigationArea
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneNavigationToolSeparatorDark">
            <summary>
            TaskPaneNavigationToolSeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneNavigationToolSeparatorLight">
            <summary>
            TaskPaneNavigationToolSeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneScrollButton">
            <summary>
            TaskPaneScrollButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TaskPaneScrollButtonBorder">
            <summary>
            TaskPaneScrollButtonBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TearawayStrip">
            <summary>
            TearawayStrip
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarCornerShadowDark">
            <summary>
            ToolbarCornerShadowDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarCornerShadowLight">
            <summary>
            ToolbarCornerShadowLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarCornerShadowMedium">
            <summary>
            ToolbarCornerShadowMedium
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarGradientLight">
            <summary>
            ToolbarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarGradientDark">
            <summary>
            ToolbarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolbarUnderline">
            <summary>
            ToolbarUnderline
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolBorder">
            <summary>
            ToolBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolBorderMouseDown">
            <summary>
            ToolBorderMouseDown
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxGroupHeaderBackColor">
            <summary>
            ToolboxGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemAreaGradientDark">
            <summary>
            ToolboxItemAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemAreaGradientLight">
            <summary>
            ToolboxItemAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemCheckedBackColor">
            <summary>
            ToolboxItemCheckedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemHotTrackingBackColor">
            <summary>
            ToolboxItemHotTrackingBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemHotTrackingAndCheckedBackColor">
            <summary>
            ToolboxItemHotTrackingAndCheckedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.ToolboxItemBorderColor">
            <summary>
            ToolboxItemBorderColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionActiveGradientDark">
            <summary>
            DockManagerCaptionActiveGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionActiveGradientLight">
            <summary>
            DockManagerCaptionActiveGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionInactiveGradientDark">
            <summary>
            DockManagerCaptionInactiveGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionInactiveGradientLight">
            <summary>
            DockManagerCaptionInactiveGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionTextActive">
            <summary>
            DockManagerCaptionTextActive
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerCaptionTextInactive">
            <summary>
            DockManagerCaptionTextInactive
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerTabAreaGradientDark">
            <summary>
            DockManagerTabAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerTabAreaGradientLight">
            <summary>
            DockManagerTabAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerTabBorder">
            <summary>
            DockManagerTabBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerTabGradientDark">
            <summary>
            DockManagerTabGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DockManagerTabGradientLight">
            <summary>
            DockManagerTabGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TabGradientLight">
            <summary>
            TabGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TabGradientDark">
            <summary>
            TabGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TabBorderColor">
            <summary>
            TabBorderColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.TabSelectedBorderColor">
            <summary>
            TabSelectedBorderColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DropDownButtonGradientLight">
            <summary>
            The lighter color in the gradient for VisualStudio2005 dropdown buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.VisualStudio2005ColorTable.DropDownButtonGradientDark">
            <summary>
            The darker color in the gradient for VisualStudio2005 dropdown buttons.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Office2003Colors">
            <summary>
            Class containing static color properties representing the colors used by the 
            Microsoft Office 2003 products.  <see cref="P:Infragistics.Win.Office2003ColorTable.Colors"/>
            is the new way to retrieve the Office2003 color scheme.  Office2003Colors is
            maintained for backward compatability.
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.AddRemoveHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.AddRemoveOpenHighlight">
            <summary>
            AddRemoveHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.DockAreaGradientLight">
            <summary>
            DockAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.DockAreaGradientDark">
            <summary>
            DockAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.FloatingControlContainerToolbar">
            <summary>
            FloatingControlContainerToolbar
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.FloatingToolbarCaption">
            <summary>
            FloatingToolbarCaption
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.FloatingToolbarCaptionText">
            <summary>
            FloatingToolbarCaptionText
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.GrabHandleDarkSquare">
            <summary>
            GrabHandleDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightMouseDownGradientLight">
            <summary>
            HighlightMouseDownGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightMouseDownGradientDark">
            <summary>
            HighlightMouseDownGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightNotPressedGradientLight">
            <summary>
            HighlightNotPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightNotPressedGradientDark">
            <summary>
            HighlightNotPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightPopupMenuItem">
            <summary>
            HighlightPopupMenuItem
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightPressedGradientLight">
            <summary>
            HighlightPressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightPressedGradientDark">
            <summary>
            HighlightPressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightQuickCustomizeFloating">
            <summary>
            HighlightQuickCustomizeFloating
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightQuickCustomizeGradientLight">
            <summary>
            HighlightQuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.HighlightQuickCustomizeGradientDark">
            <summary>
            HighlightQuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MainMenuBarGradientLight">
            <summary>
            MainMenuBarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MainMenuBarGradientDark">
            <summary>
            MainMenuBarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuExpandButtonGradientLight">
            <summary>
            MenuExpandButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuExpandButtonGradientDark">
            <summary>
            MenuExpandButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuIconAreaGradientLight">
            <summary>
            MenuIconAreaGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuIconAreaGradientDark">
            <summary>
            MenuIconAreaGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuIconAreaExpandedGradientLight">
            <summary>
            MenuIconAreaExpandedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuIconAreaExpandedGradientDark">
            <summary>
            MenuIconAreaExpandedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuItemCheckmark">
            <summary>
            MenuItemCheckmark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuItemCheckmarkHighlight">
            <summary>
            MenuItemCheckmarkHighlight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.MenuDroppedBackColor">
            <summary>
            MenuDroppedBackColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneBorder">
            <summary>
            OutlookNavPaneBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneCurrentGroupHeaderForecolor">
            <summary>
            OutlookNavPaneCurrentGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneCurrentGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneCurrentGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneCurrentGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneGroupHeaderForecolor">
            <summary>
            OutlookNavPaneGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneHotGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneHotGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneHotGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneHotGroupHeaderForecolor">
            <summary>
            OutlookNavPaneHotGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneHotOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneHotOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneHotOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneItemAreaBackcolor">
            <summary>
            OutlookNavPaneItemAreaBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneOverflowButtonBackcolor">
            <summary>
            OutlookNavPaneOverflowButtonBackcolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPanePressedGroupHeaderGradientLight">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPanePressedGroupHeaderGradientDark">
            <summary>
            OutlookNavPanePressedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPanePressedGroupHeaderForecolor">
            <summary>
            OutlookNavPanePressedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPanePressedOverflowButtonGradientLight">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPanePressedOverflowButtonGradientDark">
            <summary>
            OutlookNavPanePressedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSelectedGroupHeaderGradientLight">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSelectedGroupHeaderGradientDark">
            <summary>
            OutlookNavPaneSelectedGroupHeaderGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSelectedGroupHeaderForecolor">
            <summary>
            OutlookNavPaneSelectedGroupHeaderForecolor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSelectedOverflowButtonGradientLight">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSelectedOverflowButtonGradientDark">
            <summary>
            OutlookNavPaneSelectedOverflowButtonGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSplitterGradientLight">
            <summary>
            OutlookNavPaneSplitterGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSplitterGradientDark">
            <summary>
            OutlookNavPaneSplitterGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSplitterDarkSquare">
            <summary>
            OutlookNavPaneSplitterDarkSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSplitterLightSquare">
            <summary>
            OutlookNavPaneSplitterLightSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneSplitterMiddleSquare">
            <summary>
            OutlookNavPaneSplitterMiddleSquare
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneLabelItemGradientLight">
            <summary>
            OutlookNavPaneLabelItemGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneLabelItemGradientDark">
            <summary>
            OutlookNavPaneLabelItemGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.OutlookNavPaneItemWithNoImageForeColor">
            <summary>
            OutlookNavPaneItemWithNoImageForeColor
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.PopupMenuBorder">
            <summary>
            PopupMenuBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.PopupMenuToolOpenGradientLight">
            <summary>
            PopupMenuToolOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.PopupMenuToolOpenGradientDark">
            <summary>
            PopupMenuToolOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.PressedGradientLight">
            <summary>
            PressedGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.PressedGradientDark">
            <summary>
            PressedGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.QuickCustomizeGradientLight">
            <summary>
            QuickCustomizeGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.QuickCustomizeGradientDark">
            <summary>
            QuickCustomizeGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.QuickCustomizeOpenGradientLight">
            <summary>
            QuickCustomizeOpenGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.QuickCustomizeOpenGradientDark">
            <summary>
            QuickCustomizeOpenGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.QuickCustomizeOpenFloating">
            <summary>
            QuickCustomizeOpen
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.SeparatorLight">
            <summary>
            SeparatorLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.SeparatorDark">
            <summary>
            SeparatorDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.TearawayStrip">
            <summary>
            TearawayStrip
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarCornerShadowDark">
            <summary>
            ToolbarCornerShadowDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarCornerShadowLight">
            <summary>
            ToolbarCornerShadowLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarCornerShadowMedium">
            <summary>
            ToolbarCornerShadowMedium
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarGradientLight">
            <summary>
            ToolbarGradientLight
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarGradientDark">
            <summary>
            ToolbarGradientDark
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolbarUnderline">
            <summary>
            ToolbarUnderline
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolBorder">
            <summary>
            ToolBorder
            </summary>
        </member>
        <member name="P:Infragistics.Win.Office2003Colors.ToolBorderMouseDown">
            <summary>
            ToolBorderMouseDown
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionButtonIndicatorUIElement">
            <summary>
            OptionButtonIndicatorUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.IButtonDrawStateSource)">
            <summary>
            Constructor, initializes a new instance of the <b>OptionButtonIndicatorUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="buttonDrawStateSource"><see cref="T:Infragistics.Win.IButtonDrawStateSource"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawBackColor and do nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawImageBackground and do nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawBorders and do nothing
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Override DrawForeground to draw the check box
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonIndicatorUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="T:Infragistics.Win.OptionButtonUIElement">
            <summary>
            OptionButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, intializes a new instance of the <b>OptionButtonUIElement</b> class.
            </summary>
            <param name="parent">The parent element</param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonUIElement.PositionChildElements">
            <summary>
            Creates and positions child elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonUIElement.InvalidateBtnStateArea">
            <summary>
            Invalidates just the check indicator
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonUIElement.ButtonClick">
            <summary>
            ButtonClick
            </summary>
            <returns><b>True</b> if button was clicked, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.ButtonState">
            <summary>
            Returns information regarding the mouse in relation to the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.Infragistics#Win#IButtonDrawStateSource#CheckState">
            <summary>
            Returns the checkstate of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.Infragistics#Win#IButtonDrawStateSource#ElementButtonState">
            <summary>
            Returns the state of the button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.Infragistics#Win#IButtonDrawStateSource#ButtonDrawState">
            <summary>
            Returns the buttonstate used for drawing the check box
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.CheckSize">
            <summary>
            The size of the check image in pixels (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.TextIndentation">
            <summary>
            The indentation of the text from the actual option element
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.CheckRect">
            <summary>
            Returns the rectangle for the text element (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.TextRect">
            <summary>
            Returns the rectangle for the text element
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.CheckState">
            <summary>
            The checked state of the btn element
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.CheckAlign">
            <summary>
            Controls where the check mark is placed in relation to the
            element rect
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.ButtonStyle">
            <summary>
            Gets the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonUIElement.IsButtonStyleMouseActive">
            <summary>
            Indicates if the button style requires invalidation of the element
            on the mouse enter and exit.
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionButtonWithImageUIElement">
            <summary>
            OptionButtonWithImageUIElement, option button element that also supports an image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of <b>OptionButtonWithImageUIElement</b>.
            </summary>
            <param name="parent">parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.#ctor(Infragistics.Win.UIElement,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of <b>OptionButtonWithImageUIElement</b>.
            </summary>
            <param name="parent">parent UIElement</param>
            <param name="positionImageInsideTextRect">This is the standard winforms behavior. Setting this to false 
            will position the image outside of the optionbutton+text element rect.</param>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.OnDispose">
            <summary>
            Clean up resources used
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.PositionChildElements">
            <summary>
            Handles the position of the child UIElements
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.GetPreferredSize(System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement 
            </summary>
            <param name="sizeFont">Size of font.</param>
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <returns><see cref="T:System.Drawing.Size"/> element needs to properly render</returns>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.GetPreferredSize(System.Drawing.Font,System.Boolean,System.Drawing.Graphics)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="sizeFont">Size of font.</param>
            <param name="includeImageHeight">Determines whether or not image height is taken into account.</param>		
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <returns><see cref="T:System.Drawing.Size"/> element needs to properly render</returns>
        </member>
        <member name="M:Infragistics.Win.OptionButtonWithImageUIElement.GetPreferredSize(System.Drawing.Font,System.Boolean,System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Calculates the size of a single line text string for use by an ImageAndTextUIElement
            </summary>
            <param name="sizeFont">Size of font.</param>
            <param name="includeImageHeight">Determines whether or not image height is taken into account.</param>		
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="maxColumnWidth">The largest width for the item (if applicable) or 0.</param>
            <param name="minColumnWidth">The smallest width of the item (if applicable) or 0.</param>
            <returns><see cref="T:System.Drawing.Size"/> element needs to properly render</returns>
        </member>
        <member name="P:Infragistics.Win.OptionButtonWithImageUIElement.ImageElement">
            <summary>
            Returns the imageElement, creating it if necessary
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonWithImageUIElement.PositionImageInsideTextRect">
            <summary>
            Determines if image should be positioned inside of the text rect. 
            This is the standard winforms behavior. Setting this to false 
            will position the image outside of the optionbutton+text element rect.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonWithImageUIElement.Image">
            <summary>
            Set/Get the image to be displayed by the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionButtonWithImageUIElement.ImageAlign">
            <summary>
            Sets the alignment of the image that will be displayed in the face of the element
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionSetEditor">
            <summary>
            Option Set Editor is an editor that binds to a value list. It renders selection by showing the selected item as checked
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>OptionSetEditor</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Constructor, initializes a new instance of the <b>OptionSetEditor</b> class.
            </summary>
            <param name="defaultOwner"><see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#OnCloseUp">
            <summary>
            Fired when the value list is closed
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#OnSelectedItemChanged">
            <summary>
            Fired when selected item is changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#OnSelectionChangeCommitted">
            <summary>
            Fired when Selection change has been committed
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#ResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            Resolve Appearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#OnListGotFocus">
            <summary>
            Called when the list receives input focus.
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.CanEditType(System.Type)">
            <summary>
            used to determine if type can be edited
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><b>true</b> if type can be edited, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.CanRenderType(System.Type)">
            <summary>
            Used to determine if type can be edited
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><b>true</b> if type can be rendered, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Focus">
            <summary>
            Called when focus is set to the control
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetEmbeddableElementType">
            <summary>
            Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.
            </summary>
            <returns>Returns the type of the EmbeddableUIElementBase derived class that this editor uses as it's embeddable element.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Called from inside the <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method of the parent element to create and position the embedded element or elements.
            </summary>
            <param name="parentElement">The element that will contain the embedded element.</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">Context information that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
            <param name="previousElement">The element returned the prior time the parent element's  <see cref="M:Infragistics.Win.UIElement.PositionChildElements"/> method was called.</param>
            <returns>An instance of a class derived from EmbeddableUIElementBase.</returns>
            <remarks>
            <p>The <b>owner</b> and <b>ownerContext</b> values are saved by the added element to get value and state information later.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="borders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Is called to get the size needed to render a value. 
            </summary>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>\
            <param name="valueOnly">If false will include space needed for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="full">If true will return the size required to completely render the value otherwise the size returned should be the preferred size.</param>
            <param name="borders">If true will include borders</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <param name="height">The constraining height; a value of zero implies no limit.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
            <remarks><p class="">The <see cref="T:Infragistics.Win.OptionSetEditor"/> uses this parameter to determine the number of logical columns, which is dependent on the amount of available vertical space.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Returns whether the key is used by the editor.
            </summary>
            <param name="keyData"><see cref="T:System.Windows.Forms.Keys"/></param>
            <returns>True only if the editor is in edit mode and the key is used by the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OnAfterEnterEditMode">
            <summary>
            OnAfterEnterEditMode
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OnAfterExitEditMode">
            <summary>
            Called after edit mode has been exited
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OnBeforeExitEditMode(System.Boolean@,System.Boolean,System.Boolean)">
            <summary>
            Invoked before the <see cref="T:Infragistics.Win.OptionSetEditor"/> exits edit mode.
            </summary>
            <param name="cancel">By reference boolean indicating whether the exit should be canceled.</param>
            <param name="forceExit">True if the editor is being forced out of edit mode.</param>
            <param name="applyChanges">True to apply changes.</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OnOwnerKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnOwnerKeyDown
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ShouldSerializeHorizontalItemSpacing">
            <summary>
            Helper used to determine if item should be serialized
            </summary>
            <returns><b>True</b> if item should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ResetHorizontalItemSpacing">
            <summary>
            Helper to reset the property
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ShouldSerializeVerticalItemSpacing">
            <summary>
            Helper used to determine if item should be serialized
            </summary>
            <returns><b>True</b> if item should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ResetVerticalItemSpacing">
            <summary>
            Helper to reset the property
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ShouldSerializeItemOrigin">
            <summary>
            Helper used to determine if item should be serialized
            </summary>
            <returns><b>True</b> if item should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ResetItemOrigin">
            <summary>
            Helper to reset the property
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ShouldSerializeTextIndentation">
            <summary>
            Helper used to determine if item should be serialized
            </summary>
            <returns><b>True</b> if item should be serialized, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.ResetTextIndentation">
            <summary>
            Helper to reset the property
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Initializes the state of this object from a source object of the same type
            </summary>
            <param name="source">Object whose properties should be copied</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetEditorValue">
            <summary>
            Override this in specific editor to provide editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.GetAutoConvertedDestinationValue(Infragistics.Win.ConversionDirection,System.Object,System.Type,System.Boolean@,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Override this in specific editor to provide automatic conversions for that editor.
            </summary>
            <param name="direction">Type of conversion.</param>
            <param name="sourceVal">Value to convert.</param>
            <param name="destinationType">Type of converted value</param>
            <param name="isValidConversion">True if conversion was valid.</param>
            <param name="owner">Owner.</param>
            <param name="ownerContext">OwnerContext.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#Control">
            <summary>
            ValueList owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#EditControl">
            <summary>
            Value list edit control
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#ImageList">
            <summary>
            ImageList 
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#IsDropDownList">
            <summary>
            Determines if item is drop down list
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#SizeOfImages">
            <summary>
            Size of images
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Infragistics#Win#IValueListOwner#ValueLists">
            <summary>
            Collection of value lists
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.CanFocus">
            <summary>
            Determines if item can recieve focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Focused">
            <summary>
            Determines if editor has focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.IsValid">
            <summary>
            Determines if value is valid
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.Value">
            <summary>
            Returns the Selected item
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.CurrentEditText">
            <summary>
            Returns the current text being edited without doing any validation. This will return the text currently typed in. If the editor does not have an textbox-like control, it will return the current edit value in form of text.
            </summary>
            <remarks>Accessing this property when the editor is not in edit mode will throw an exception.</remarks>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.WantsOwnerKeyEvents">
            <summary>
            WantsOwnerKeyEvents
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.SupportsValueList">
            <summary>
            Specifies whether the editor supports value list (read-only).
            </summary>
            <remarks>
            <p>If the editor makes use of value list returned by EmbeddableEditorOwnerBase, it returns true.</p>
            <p>The default implemenation returns false.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.FocusedIndex">
            <summary>
            Sets/Gets the focused index
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.HorizontalItemSpacing">
            <summary>
            Controls the horizontal spacing between item columns
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.VerticalItemSpacing">
            <summary>
            Controls the vertical spacing between item columns
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.TextIndentation">
            <summary>
            Controls the space between the option button and the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.ItemOrigin">
            <summary>
            Determines the origin of the option buttons relative
            to the top/left of the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.MaxColumnWidth">
            <summary>
            Determines the largest possible width that a column of items can have.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.MinColumnWidth">
            <summary>
            Determines the smallest possible width of a columns of items.
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.OptionSetEditor,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated optionset editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.GetChildUIElement(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the <b>UIElement</b> associated with a particular child accessible object.
            </summary>
            <param name="child">Accessible object representing the child whose uielement should be returned.</param>
            <returns>The uielement used to display the child or null if the element is not available.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.PerformChildNavigation(Infragistics.Win.AccessibleObjectWrapper,System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Processes the navigation request of the child accessible object.
            </summary>
            <param name="child">Child accessible object whose navigate method is being invoked.</param>
            <param name="direction">Indicates the direction of the navigation.</param>
            <returns>The accessible object based on the navigation direction.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.IndexOf(Infragistics.Win.AccessibleObjectWrapper)">
            <summary>
            Returns the index of the specified child accessible object.
            </summary>
            <param name="child">Child accessible object to evaluate</param>
            <returns>-1 if the child was not found. Otherwise the index of the child is returned.</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.GetFocused">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.GetSelected">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject">
            <summary>
            Accessible object representing an option item in the optionset editor
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.#ctor(System.Int32,Infragistics.Win.OptionSetEditor.OptionSetEditorAccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject"/>
            </summary>
            <param name="index">Index of the item</param>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.Index">
            <summary>
            Returns the index of the option set item.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.Name">
            <summary>
            Returns the name of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEditor.OptionSetItemAccessibleObject.CanPerformDefaultAction">
            <summary>
            Indicates if the default action can be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionSetEmbeddableUIElement">
            <summary>
            Summary Description for OptionSetEmbeddableUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of <b>OptionSetEmbeddableUIElement</b>
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="owner">An object that implements to EmbeddableEditorOwner interface.</param>
            <param name="editor">An object that implements to EmbeddableEditor interface.</param>
            <param name="ownerContext">Context information used by the owner to identify the value.</param>
            <param name="includeEditElements">If true will add associated elements (e.g. editing elements like spin buttons).</param>
            <param name="reserveSpaceForEditElements">If true will reserve space for associated elements (e.g. editing elements like spin buttons).</param>
            <param name="drawOuterBorders">If true the element is expected to draw the outer borders</param>
            <param name="isToolTip">If true the element should draw as a tooltip, i.e., use SystemColors.Info as a BackColor, and not draw gradients.</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.GetValueList">
            <summary>
            Gets the value list associated with this elements parent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.SetSelectedItem(System.Int32)">
            <summary>
            Sets the selected value list item and de-selects all previous options
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.IncrementFocus">
            <summary>
            Shifts the focus to the next element
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.DecrementFocus">
            <summary>
            Shifts the focus to the prev element
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.ToggleFocusedElement">
            <summary>
            Toggles the checkstate of the selected item
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the mouse button was pressed while the cursor was positioned over the adjustable area</param>
            <param name="captureMouseForElement">If not null, contains a reference to the element that has captured the mouse</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.PositionChildElements">
            <summary>
            Position Child Elements, the option buttons are based off the editors
            valuelist. Each item equates to one option. The selected option is the current
            VALUE of the editor
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.OptionElementFromIndex(System.Int32)">
            <summary>
            Returns element at this index casted to OptionButtonWithImageUIElement
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetEmbeddableUIElement.OnBeforeDraw">
            <summary>
            Called before the element draw process starts.
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEmbeddableUIElement.OptionSetEditor">
            <summary>
            Returns parent editor as OptionSetEditor
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEmbeddableUIElement.FocusedIndex">
            <summary>
            Returns the focused index
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEmbeddableUIElement.ClipSelf">
            <summary>
            Returns true so that this element does not draw outside itself
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetEmbeddableUIElement.ClipChildren">
            <summary>
            Returns true so that this element does not draw outside itself
            </summary>
        </member>
        <member name="T:Infragistics.Win.OptionSetOptionButtonUIElement">
            <summary>
            Summary Description for OptionSetOptionButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.#ctor(Infragistics.Win.UIElement,System.Int32)">
            <summary>
            Constructor, initializes a new instance of the <b>OptionSetOptionButtonUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="valueListIndex">Index into value list.</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.OnClick">
            <summary>
            Called when the mouse is clicked on this element. The default
            implementatiun just walks up the parent element chain.
            Sets the selected item
            </summary>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Called when the mouse down message is received over the element. 
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Draws a focus rectangle around the <see cref="T:Infragistics.Win.UIElement"/>.
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.Initialize(System.Int32)">
            <summary>
            Initializes the element
            </summary>
            <param name="valueListIndex">Index of associated value list item.</param>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.OptionSetOptionButtonUIElement.GetContext(System.Type,System.Boolean)">
            <summary>
            Returns an object of requested type that relates to the element or null.  
            </summary>
            <param name="type">The requested type or null to pick up default context object. </param>
            <param name="checkParentElementContexts">If true will walk up the parent chain looking for the context.</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="P:Infragistics.Win.OptionSetOptionButtonUIElement.OptionSetEmbeddableUIElement">
            <summary>
            Returns the parent element
            </summary>
        </member>
        <member name="P:Infragistics.Win.OptionSetOptionButtonUIElement.DrawsFocusRect">
            <summary>
            Only Draw the focus rect if our index matches the focused index
            </summary>
        </member>
        <member name="T:Infragistics.Win.OriginMarker">
            <summary>
            OriginMarker class
            Derives from System.Windows.Forms.Form
            This class is basically a non-activatable form with a transparent
            background that simply displays the appropriate origin marker bitmap
            based on which types of mouse panning operations are supported
            </summary>
        </member>
        <member name="M:Infragistics.Win.OriginMarker.#ctor(Infragistics.Win.UltraControlBase,System.Boolean,System.Boolean)">
            <summary>
            OriginMarker class constructor
            </summary>
            <param name="owningControl">The control that is using this instance of the OriginMarker</param>
            <param name="supportsVerticalPanning">Determines whether vertical panning is supported</param>
            <param name="supportsHorizontalPanning">Determines whether horizontal panning is supported</param>
        </member>
        <member name="M:Infragistics.Win.OriginMarker.ShowMarker(System.Drawing.Point)">
            <summary>
            Shows the OriginMarker at the specified location
            </summary>
            <param name="screenPos">The screen coordinates at which to display the OriginMarker</param>
        </member>
        <member name="T:Infragistics.Win.PresetType">
            <summary>
            Describes the type of properties used when saving/loading presets	
            </summary>
        </member>
        <member name="F:Infragistics.Win.PresetType.Appearance">
            <summary>
            Properties that relate primarily to appearances
            </summary>
        </member>
        <member name="F:Infragistics.Win.PresetType.Behavior">
            <summary>
            Properties that relate primarily to behavior
            </summary>
        </member>
        <member name="F:Infragistics.Win.PresetType.All">
            <summary>
            All preset properties
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISupportPresets">
            <summary>
            This interface is used for objects which support Presets
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISupportPresets.GetPresetProperties(Infragistics.Win.PresetType)">
            <summary>
            Get the properties on this object which can be preset
            </summary>
            <param name="presetType">Specifies which group of properties to return</param>
            <returns>An array of property names as strings.</returns>
        </member>
        <member name="M:Infragistics.Win.ISupportPresets.GetPresetTargetTypeName">
            <summary>
            A unique type name for the object used to determine if the Preset data is valid for a particular object
            </summary>
            <returns>A unique type name for the object</returns>
        </member>
        <member name="T:Infragistics.Win.PresetSerializer">
            <summary>
            Class for serializing and deserializing the properties of an object implementing the <see cref="T:Infragistics.Win.ISupportPresets"/> interface
            </summary>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.SaveAsBinary(System.IO.Stream,Infragistics.Win.ISupportPresets)">
            <summary>
            Serializes the specified preset properties of the target to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="target">The target ISupportPresets object whose properties will be saved.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.SaveAsBinary(System.String,Infragistics.Win.ISupportPresets)">
            <summary>
            Serializes the specified preset properties of the target to a file
            </summary>
            <param name="filename">The name of the file to write to</param>
            <param name="target">The target ISupportPresets object whose properties will be saved.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.SaveAsXml(System.IO.Stream,Infragistics.Win.ISupportPresets)">
            <summary>
            Serializes the specified preset properties of the target to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="target">The target ISupportPresets object whose properties will be saved.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.SaveAsXml(System.String,Infragistics.Win.ISupportPresets)">
            <summary>
            Serializes the specified preset properties of the target to a file
            </summary>
            <param name="filename">The name of the file to write to</param>
            <param name="target">The target ISupportPresets object whose properties will be saved.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.Apply(Infragistics.Win.ISupportPresets,System.Boolean)">
            <summary>
            Applies the current Preset data to the target object.
            </summary>
            <param name="target">The object to apply the setting to.</param>
            <param name="clear">Determines whether to clear all settings before applying the new settings.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.Apply(Infragistics.Win.ISupportPresets)">
            <summary>
            Applies the current Preset data to the target object.
            </summary>
            <param name="target">The object to apply the setting to.</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.FromObject(Infragistics.Win.ISupportPresets,Infragistics.Win.PresetType)">
            <summary>
            Creates a new instance of a PresetSerializer based on a target object
            </summary>
            <param name="source">The ISupportPresets object from which the data will be taken</param>
            <param name="presetType">Specifies which properties of the object to read</param>
            <returns>A new PresetSerializer instance</returns>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.FromBinary(System.IO.Stream)">
            <summary>
            Creates a new instance of a PresetSerializer based on a previously saved stream
            </summary>
            <param name="stream">The stream from which the data will be read</param>
            <returns>A new PresetSerializer instance</returns>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.FromBinary(System.String)">
            <summary>
            Creates a new instance of a PresetSerializer based on a previously saved file
            </summary>
            <param name="filename">The stream from which the data will be read</param>
            <returns>A new PresetSerializer instance</returns>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.FromXml(System.IO.Stream)">
            <summary>
            Creates a new instance of a PresetSerializer based on a previously saved stream
            </summary>
            <param name="stream">The stream from which the data will be read</param>
            <returns>A new PresetSerializer instance</returns>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.FromXml(System.String)">
            <summary>
            Creates a new instance of a PresetSerializer based on a previously saved file
            </summary>
            <param name="filename">The stream from which the data will be read</param>
            <returns>A new PresetSerializer instance</returns>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.ClearPresets(Infragistics.Win.ISupportPresets)">
            <summary>
            Get the Preset properties for the target ISupportPresets object and resets all of them
            </summary>
            <param name="target">A ISupportPresets object whose preset properties will be cleared</param>
        </member>
        <member name="M:Infragistics.Win.PresetSerializer.ClearPresets(Infragistics.Win.ISupportPresets,Infragistics.Win.PresetType)">
            <summary>
            Get the Preset properties for the target ISupportPresets object and resets some of them, based on the PresetType
            </summary>
            <param name="target">A ISupportPresets object whose preset properties will be cleared</param>
            <param name="presetType">Determines which preset properties are cleared</param>
        </member>
        <member name="P:Infragistics.Win.PresetSerializer.TargetTypeName">
            <summary>
            The type name of the target object to which the stored data applies
            </summary>
        </member>
        <member name="P:Infragistics.Win.PresetSerializer.PresetType">
            <summary>
            The PresetType defines which type of preset data is stored by this object. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.PresetSerializer.PresetName">
            <summary>
            A display name for the preset
            </summary>
        </member>
        <member name="P:Infragistics.Win.PresetSerializer.PresetDescription">
            <summary>
            A display Description for the preset
            </summary>
        </member>
        <member name="T:Infragistics.Win.PresetObjectWrapper">
            <summary>
            Object used to filter the properties of an object based on the <see cref="T:Infragistics.Win.ISupportPresets"/> interface
            </summary>
        </member>
        <member name="M:Infragistics.Win.PresetObjectWrapper.#ctor(Infragistics.Win.ISupportPresets,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.PresetObjectWrapper"/>
            </summary>
            <param name="objectToWrap">Object whose properties will be returned</param>
            <param name="includeLookProperties">True to include IPreset "Look" properties</param>
            <param name="includeBehaviorProperties">True to include IPreset "Behavior" properties</param>
            <param name="includeOtherProperties">True to include all other properties</param>
        </member>
        <member name="M:Infragistics.Win.PresetObjectWrapper.ToString">
            <summary>
            Returns the string representation of the underlying object.
            </summary>
            <returns>A string representation of the <see cref="P:Infragistics.Win.PresetObjectWrapper.UnderlyingObject"/></returns>
        </member>
        <member name="P:Infragistics.Win.PresetObjectWrapper.UnderlyingObject">
            <summary>
            Returns the actual object represented by the wrapper.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.PercentSetting">
            <summary>
            Object for associating an appearance with a specific percent value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.#ctor(System.Decimal)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> class.
            </summary>
            <param name="percent">Initial value for the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Percent"/> property.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.ShouldSerializeAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.ShouldSerializeFillAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.ResetFillAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified object.
            </summary>
            <param name="obj">Object to compare to this instance</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a subobject provides a notification.
            </summary>
            <param name="propChange">Object providing information about the property change notification.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Percent">
            <summary>
            Returns or sets the minimum percentage at which the appearances will be applied.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance">
            <summary>
            Default appearance for the control.
            </summary>
            <remarks>
            <p class="body">The <b>Appearance</b> property is used to determine appearance of the non-filled area of the <b>ProgressBar</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.HasAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance">
            <summary>
            Default appearance for the filled area of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>FillAppearance</b> property is used to determine appearance of the filled area of the <b>ProgressBar</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearance"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.HasFillAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSetting.Appearances">
            <summary>
            Returns or sets the collection that provides appearance information for the appearance properties
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.PercentSetting.PercentSettingTypeConverter">
            <summary>
            TypeConverter for the <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.PercentSettingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSetting.PercentSettingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> instances used to apply
            appearances to a progress bar based on the current percent being displayed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Add(Infragistics.Win.UltraWinProgressBar.PercentSetting)">
            <summary>
            Adds a <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> to the collection
            </summary>
            <param name="item">Item to add</param>
            <returns>The index of the item</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Add(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> in the collection with the specified value.
            </summary>
            <param name="percent">Maximum percentage at which the associated appearances will be applied</param>
            <returns>The new <b>PercentSetting</b></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Insert(System.Int32,Infragistics.Win.UltraWinProgressBar.PercentSetting)">
            <summary>
            Inserts the specified item at the specified index.
            </summary>
            <param name="index">The index at which the item is to be inserted</param>
            <param name="item">The item to insert into the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.IndexOf(Infragistics.Win.UltraWinProgressBar.PercentSetting)">
            <summary>
            Gets the index of the item in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>The index in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Contains(Infragistics.Win.UltraWinProgressBar.PercentSetting)">
            <summary>
            Sees if the item is in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.CopyTo(Infragistics.Win.UltraWinProgressBar.PercentSetting[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="itemArray">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Remove(Infragistics.Win.UltraWinProgressBar.PercentSetting)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified item at the specified index
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Clear">
            <summary>
            Clears the contents of the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.CreateArray">
            <summary>
            Virtual method used by the All 'get' method to
            create the array it returns.
            </summary>
            <returns>The newly created object array</returns>
            <remarks>This is normally overridden in a derived class to allocate a type safe array.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a subobject provides a notification.
            </summary>
            <param name="propChange">Object providing information about the property change notification.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Collection of <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> instances used to apply
            appearances to a progress bar based on the current percent being displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Appearances">
            <summary>
            Returns or sets the collection that provides appearance information for the item's appearance properties
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> at the specified index
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.Item(System.Decimal)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> whose used to format
            the specified percent.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.InitialCapacity">
            <summary>
            Returns the initial capacity for the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.PercentSettingsCollection.IsReadOnly">
            <summary>
            Indicates if the collection may be modified.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement">
            <summary>
            The main UIElement for the <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar"/> control.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar"/>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>
            <remarks>
            <p class="body">The <b>ProgressBarControlUIElement</b> is the main <see cref="T:Infragistics.Win.UIElement"/> for the <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar"/> control. The element encompasses the entire visible area of the control and contains only one child element - the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.#ctor(Infragistics.Win.UltraWinProgressBar.UltraProgressBar)">
            <summary>
            Initializes a new ProgressBarControlUIElement with the specified <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar"/> control.
            </summary>
            <param name="progress">Owning progress bar control</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.PositionChildElements">
            <summary>
            Overriden. Handles the creation and positioning of the child elements.
            </summary>
            <remarks>
            <p class="body">The <b>ProgressBarControlUIElement</b> contains only one child element - a <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar">
            <summary>
            Returns the associated <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement.UltraProgressBar"/> control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor">
             <summary>
            ProgressBarEditor
             </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CanEditType(System.Type)">
            <summary>
            Indicates if the specified data type can be edited
            </summary>
            <param name="type">Type to check</param>
            <returns>True if the type may be edited</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CanRenderType(System.Type)">
            <summary>
            Indicates if the specified data type can be rendered
            </summary>
            <param name="type">Type to check</param>
            <returns>True if the type is a numeric type</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Focus">
            <summary>
            Attempts to put focus in the editor
            </summary>
            <returns>False. The progress bar does not take focus</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns an embeddable element for the specified parameters
            </summary>
            <param name="parentElement">Parent uielement</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Context to identify the value to be rendered by the element</param>
            <param name="includeEditElements">True if edit element are to be displayed</param>
            <param name="reserveSpaceForEditElements">True if space should be left for edit elements</param>
            <param name="drawOuterBorders">True if the outer borders should be displayed</param>
            <param name="isToolTip">True if the element will be used for display in a tooltip</param>
            <param name="previousElement">Previous element or null if there was no previous embeddable element</param>
            <returns>A ProgressBarEmbeddableElement</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.GetEmbeddableElementType">
            <summary>
            Returns the type for the embeddable element to be returned.
            </summary>
            <returns>A ProgressBarEmbeddableUIElement type</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Indicates if the specified key is used for input by the editor
            </summary>
            <param name="keyData">Key to check</param>
            <returns>False. The progress bar does not use keyboard input</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.SetEditorValueInternal(System.Object)">
            <summary>
            Internal.
            </summary>
            <param name="newVal">New editor value.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.GetSize(Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Returns the preferred size of the element
            </summary>
            <param name="owner">Owner</param>
            <param name="ownerContext">Context to identify the value being rendered</param>
            <param name="valueOnly">Value only</param>
            <param name="full">True for the size required to display the value fully</param>
            <param name="borders">True if borders should be included</param>
            <param name="maxTextWidth">Maximum width of the string.</param>
            <returns>Returns the size needed to render a value and optionally its associated elements.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.DataValueToText(System.Object,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Converts data value to text making use of any format provider and format strings that owner may provide. If unsuccessful, returns null.
            </summary>
            <param name="valueToConvert">The value to be converted</param>
            <param name="owner">An object that derives from the <see cref="T:Infragistics.Win.EmbeddableEditorOwnerBase"/> class.</param>
            <param name="ownerContext">An object that is used to get the value to render via a call to the <see cref="M:Infragistics.Win.EmbeddableEditorOwnerBase.GetValue(System.Object)"/> method.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CloneWithOwner(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor"/> whose <see cref="P:Infragistics.Win.EmbeddableEditorBase.DefaultOwner"/> is set to the specified owner.
            </summary>
            <param name="defaultOwner">Default owner for the new progress bar editor</param>
            <returns>A new <b>ProgressBarEditor</b> whose default owner is the specified owner but whose properties are initialized based on the property settings of this instance of the <b>ProgressBarEditor</b>.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Used by an editor owner to create an accessible object for a specific object managed by an editor.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="owner">Editor owner</param>
            <param name="ownerContext">Owner context that can be supplied to the editor owner to obtain information about the object represented by the accessible instance.</param>
            <returns>An accessible object that represents the specified owner context for the editor.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.GetEditorValue">
            <summary>
            Override this in specific editor to provide editor value.
            </summary>
            <returns>Editor value.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CanFocus">
            <summary>
            Indicates if the element can take focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.CurrentEditText">
            <summary>
            Returns the current edited text - null since the progress bar does not enter edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Focused">
            <summary>
            Indicates if the progress bar has focus
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.IsValid">
            <summary>
            Indicates if the current value is valid
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Value">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>Minimum</b> and <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Maximum"/> values determine the range used to calculate the percentage of the flood fill. The <b>Minimum</b> value must be less than or equal to the <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Maximum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Minimum"/> and <b>Maximum</b> values determine the range used to calculate the percentage of the flood fill. The <b>Maximum</b> value must be greater than or equal to the <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Minimum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Style">
            <summary>
            Determines the style of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>Style</b> property determines the type of fill that is rendered. The fill may be a continuous block or be rendered in segments.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Label">
            <summary>
            Gets or sets the label displayed in the progress bar
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.LabelVisible">
            <summary>
            Indicates whether to display the label.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.Label"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.FillAppearance">
            <summary>
            Gets/sets the appearance used to resolve the appearance of the filled area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.SegmentWidth">
            <summary>
            Gets/sets the width of the segments in a Segmented style progress bar.
            </summary>
            <remarks>
            When set to UltraProgressBar.DefaultSegmentWidth (-1), the default segment width is used. The default
            segment width is equal to 2/3 the size relative to the orientation. e.g. The width of a progress bar segment
            in a horizontal progress bar is approximately 2/3 the height of the control.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.PercentSettings">
            <summary>
            Returns a collection of value based appearances
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressBarEditorAccessibleObject">
            <summary>
            Accessible object representing an progress bar editor instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressBarEditorAccessibleObject.#ctor(System.Windows.Forms.AccessibleObject,Infragistics.Win.UltraWinProgressBar.ProgressBarEditor,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressBarEditorAccessibleObject"/>
            </summary>
            <param name="parent">Parent accessible object</param>
            <param name="editor">Associated progress editor</param>
            <param name="owner">Associated owner</param>
            <param name="ownerContext">Owner context that identifies the object which the accessible instance represents</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressBarEditorAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfoEx">
            <summary>
            Interface for defining a progress bar with value based appearances
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo">
            <summary>
            Interface for providing information to a progress bar uielement.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the progress bar background
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the filled area of the progress bar
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance">
            <summary>
            Appearance for the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance">
            <summary>
            Appearance for the filled area of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value">
            <summary>
            Current value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label">
            <summary>
            Display label for the progress bar.
            </summary>
            <remarks>
            <p class="body">The label may include special characters to insert the different values.</p>
            <p class="body">e.g.</p>
            <list type="table">
            <item><term>[Percent]</term><description>Unformatted percent completed</description></item>
            <item><term>[RemainingPercent]</term><description>Unformatted percent remaining</description></item>
            <item><term>[Formatted]</term><description>Formatted percent completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[RemainingFormatted]</term><description>Formatted percent remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[Remaining]</term><description>Amount remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Completed]</term><description>Amount completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Minimum]</term><description>Minimum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Maximum]</term><description>Maximum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/>)</description></item>
            <item><term>[Value]</term><description>Current value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Range]</term><description>Value Range (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            </list>
            <p class="body">The format used to display the [Formatted] and [RemainingFormatted] can be specified using the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat">
            <summary>
            Format used when formatting the percent for the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> items [Formatted] and
            [FormattedRemaining]
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.ShowLabel">
            <summary>
            Indicates if the label should be displayed.
            </summary>
            <value>Return true to indicate that the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> should be displayed.</value>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Orientation">
            <summary>
            Orientation of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.BorderStyle">
            <summary>
            BorderStyle of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Style">
            <summary>
            Style of the progress bar fill.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FormatInfo">
            <summary>
            Returns the culture specific information used to determine how values are formatted.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.SegmentWidth">
            <summary>
            Returns the width of the segments.
            </summary>
            <remarks>If set to -1, the default segment width is used. The default segment width is approximately 2/3 the side opposite the orientation. e.g. If the progress bar has a horizontal orientation, the default segment width is approximately 2/3 the height of the progress bar.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfoEx.PercentSettings">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Win.UltraWinProgressBar.PercentSetting"/> instances used to apply
            appearances conditionally based on the current percent.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the progress bar background
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the filled area of the progress bar
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#SegmentWidth">
            <summary>
            Width of the segment bars
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FormatInfo">
            <summary>
            Returns the owner's <see cref="T:System.IFormatProvider"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Appearance">
            <summary>
            Appearance for the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FillAppearance">
            <summary>
            Appearance for the filled area of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Value">
            <summary>
            Current value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Label">
            <summary>
            Display label for the progress bar.
            </summary>
            <remarks>
            <p class="body">The label may include special characters to insert the different values.</p>
            <p class="body">e.g.</p>
            <list type="table">
            <item><term>[Percent]</term><description>Unformatted percent completed</description></item>
            <item><term>[RemainingPercent]</term><description>Unformatted percent remaining</description></item>
            <item><term>[Formatted]</term><description>Formatted percent completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[RemainingFormatted]</term><description>Formatted percent remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[Remaining]</term><description>Amount remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Completed]</term><description>Amount completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Minimum]</term><description>Minimum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Maximum]</term><description>Maximum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/>)</description></item>
            <item><term>[Value]</term><description>Current value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Range]</term><description>Value Range (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            </list>
            <p class="body">The format used to display the [Formatted] and [RemainingFormatted] can be specified using the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#PercentFormat">
            <summary>
            Format used when formatting the percent for the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> items [Formatted] and
            [FormattedRemaining]
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ShowLabel">
            <summary>
            Indicates if the label should be displayed.
            </summary>
            <value>Return true to indicate that the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> should be displayed.</value>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Orientation">
            <summary>
            Orientation of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#BorderStyle">
            <summary>
            BorderStyle of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEditor.ProgressEditorInfo.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Style">
            <summary>
            Style of the progress bar fill.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement">
            <summary>
            Embeddable uielement for a progress bar editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,Infragistics.Win.EmbeddableEditorBase,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor for the embeddable progress bar uielement
            </summary>
            <param name="parentElement">Parent uielement</param>
            <param name="owner">Owner</param>
            <param name="editor">Editor</param>
            <param name="ownerContext">Context to identify the object that the element represents</param>
            <param name="includeEditElements">True to include edit elements</param>
            <param name="reserveSpaceForEditElements">True to reserve space for edit elements</param>
            <param name="drawOuterBorders">True to draw outer borders</param>
            <param name="isToolTip">True if the element is being used for a tooltip</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the progress bar background
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the filled area of the progress bar
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.PositionChildElements">
            <summary>
            Handles the positioning and creation of the child elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#SegmentWidth">
            <summary>
            Width of the segment bars
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FormatInfo">
            <summary>
            Returns the owner's <see cref="T:System.IFormatProvider"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Appearance">
            <summary>
            Appearance for the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FillAppearance">
            <summary>
            Appearance for the filled area of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Value">
            <summary>
            Current value of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Label">
            <summary>
            Display label for the progress bar.
            </summary>
            <remarks>
            <p class="body">The label may include special characters to insert the different values.</p>
            <p class="body">e.g.</p>
            <list type="table">
            <item><term>[Percent]</term><description>Unformatted percent completed</description></item>
            <item><term>[RemainingPercent]</term><description>Unformatted percent remaining</description></item>
            <item><term>[Formatted]</term><description>Formatted percent completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[RemainingFormatted]</term><description>Formatted percent remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>)</description></item>
            <item><term>[Remaining]</term><description>Amount remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Completed]</term><description>Amount completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Minimum]</term><description>Minimum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            <item><term>[Maximum]</term><description>Maximum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/>)</description></item>
            <item><term>[Value]</term><description>Current value (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>)</description></item>
            <item><term>[Range]</term><description>Value Range (<see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>)</description></item>
            </list>
            <p class="body">The format used to display the [Formatted] and [RemainingFormatted] can be specified using the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.PercentFormat"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#PercentFormat">
            <summary>
            Format used when formatting the percent for the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> items [Formatted] and
            [FormattedRemaining]
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ShowLabel">
            <summary>
            Indicates if the label should be displayed.
            </summary>
            <value>Return true to indicate that the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> should be displayed.</value>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Orientation">
            <summary>
            Orientation of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#BorderStyle">
            <summary>
            BorderStyle of the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Style">
            <summary>
            Style of the progress bar fill.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableUIElement.DrawsFocusRect">
            <summary>
            Indicates if the focus rect should be displayed by the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner">
            <summary>
            A class for managing the values used by a ProgressBarEmbeddableUIElement for an UltraProgressBar
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.#ctor(Infragistics.Win.UltraWinProgressBar.UltraProgressBar)">
            <summary>
            Initializes a new progress bar embeddable owner
            </summary>
            <param name="progressBar">Progress bar control</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetMaxValue(System.Object)">
            <summary>
            Returns the maximum allowable value.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The maximum value or null if there is no maximum.</returns>
            <remarks>The default implementation returns 100.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetMinValue(System.Object)">
            <summary>
            Returns the minimum allowable value.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns>The minimum value or null if there is no minimum.</returns>
            <remarks>The default implementation returns 0.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetControl(System.Object)">
            <summary>
            Returns the associated control
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>Owner control that contains the element</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetDataType(System.Object)">
            <summary>
            Returns the data type rendered/edited by the element
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>Type to be rendered</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetFormatInfo(System.Object,System.String@,System.IFormatProvider@)">
            <summary>
            Returns the format info used to render the text.
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <param name="format">Out. Format string</param>
            <param name="provider">Out. Format provider used to format the output</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetValue(System.Object)">
            <summary>
            Returns the value rendered/edited
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>The current value</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.IsEnabled(System.Object)">
            <summary>
            Indicates if the element is enabled.
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>True if the element is enabled</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.IsNullable(System.Object)">
            <summary>
            Indicates if the element may return a null value
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>False since the progress bar does not go into edit mode</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.ResolveAppearance(System.Object,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.EmbeddableEditorArea,System.Boolean,System.String)">
            <summary>
            Resolves the appearance for the element
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <param name="appearance">Appearance struct to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
            <param name="area">Area for which the appearance is being requested</param>
            <param name="hotTracking">True if the mouse is over the element</param>
            <param name="customArea">String describing the custom area to render - only used when area is Custom</param>
            <returns>True if the specified appearance was resolved</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.ShouldDrawFocus(System.Object)">
            <summary>
            Indicates if the element should display focus
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>Returns the focused state of the control</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetBorderStyle(System.Object,Infragistics.Win.UIElementBorderStyle@)">
            <summary>
            Returns the border style to be displayed by the element
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <param name="borderStyle">Out. Borderstyle to render</param>
            <returns>True if the border should be rendered</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.IsVertical(System.Object)">
            <summary>
            Indicates if the element should be displayed vertically
            </summary>
            <param name="ownerContext">Context identifying the element</param>
            <returns>True if the editor should be displayed vertically</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetEditor(System.Object)">
            <summary>
            Returns the editor for the passed in ownerContext. This is used by the base implementation of EmbeddableOwnerBase.
            </summary>
            <param name="ownerContext">The context that was passed into the <see cref="M:Infragistics.Win.EmbeddableEditorBase.GetEmbeddableElement(Infragistics.Win.UIElement,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,Infragistics.Win.EmbeddableUIElementBase)"/> method.</param>
            <returns><see cref="T:Infragistics.Win.EmbeddableEditorBase"/></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.GetEditorElement(System.Object)">
            <summary>
            Returns the embeddable uielement associated with a particular object or null if none is available.
            </summary>
            <param name="ownerContext">Context used to identify the object to reference</param>
            <returns>The embeddable uielement representing the specified owner context.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarEmbeddableOwner.DesignMode">
            <summary>
            Indicates if the owner is being used in design mode
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement">
            <summary>
            UIElement for displaying the filled area of a ProgressBar.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement"/>
            <remarks>
            <p class="body">The <b>ProgressBarFillUIElement</b> has only one child element - a <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement"/> used to display the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> for the filled area of the element. The element is a child of the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>.</p>
            <p class="body">Depending upon the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Style"/>, the <see cref="P:Infragistics.Win.AppearanceBase.BackColor"/>, and if provided in the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance"/>, the <see cref="P:Infragistics.Win.AppearanceBase.ImageBackground"/> will be displayed as either a continuous fill or as segments. The segments may either appear as complete blocks or filled in as the progress value increases.</p>
            <p class="body">The percentage of the area filled is based on the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/> divided by the difference of the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/> and <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>. When displaying a <see cref="F:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle.Segmented"/> style fill, the area used may be less since only complete segments are rendered until the percentage reaches 100.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.#ctor(Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement)">
            <summary>
            Initializes a new ProgressBarFillUIElement with a reference to the specified ProgressBarUIElement parent.
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Overriden. Initializes the appearance for the flood fill area of the element.
            </summary>
            <param name="appearance">AppearanceData to update with the appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <remarks>
            <p class="body">The main source of information for resolving the <see cref="T:Infragistics.Win.AppearanceBase"/> information for the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement"/> is the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance"/>.</p>
            <p class="note">Since the child <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement"/> must be positioned exactly as that of the TextElement for the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/>, the <see cref="P:Infragistics.Win.AppearanceBase.FontData"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextTrimming"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextHAlign"/> and <see cref="P:Infragistics.Win.AppearanceBase.TextVAlign"/> properties cannot be honored on the <b>FillAppearance</b>. Instead, the resolved values of the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/> are used.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.PositionChildElements">
            <summary>
            Overriden. Handles the positioning of the child elements.
            </summary>
            <remarks>
            <p class="body">The <b>ProgressBarFillUIElement</b> contains only one child element - a <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Handles rendering the themed version of the progress fill.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element could be rendered using themes.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.ClipSelf">
            <summary>
            Overriden. Indicates if the element needs to be clipped.
            </summary>
            <value>
            Returns true so that all drawing of this element is expicitly clipped to its <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.Region"/>.
            </value>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.Region">
            <summary>
            Overriden. Returns the region of this element.
            </summary>
            <remarks>
            <p class="body"> The region is used to clip the filled area to the percentage of the parent's <see cref="P:Infragistics.Win.UIElement.Rect"/> based on the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>, <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>, and <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/>. The area of the region itself is created based on the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Style"/> of the progress bar.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.ClipChildren">
            <summary>
            Overriden. Indicates if the child elements need to be clipped.
            </summary>
            <value>Returns true to ensure that all drawing of this element's child elements be expicitly clipped based on the <see cref="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.ClipRectChildren"/>.</value>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement.ClipRectChildren">
            <summary>
            Overriden. Returns the rect used to clip the child elements.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement">
            <summary>
            Class used to render the text for the filled area of an <see cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement.#ctor(Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement,System.String)">
            <summary>
            Initializes a new text element used when rendering the text for the filled area of the progress bar.
            </summary>
            <param name="parent">Parent uielement.</param>
            <param name="text">Initial text to display.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Overrides the rendering of the text so that it will not be clipped by the individual
            segments when rendering a segmented style fill.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Style"/>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds">
            <summary>
            Enumeration of <see cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/> property Ids. These values can be used to identify the UltraProgressBar specific property changes passed along by the <see cref="E:Infragistics.Win.UltraControlBase.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.BorderStyle">
            <summary>
            BorderStyle property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.TextVisible">
            <summary>
            TextVisible property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Orientation">
            <summary>
            Orientation property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Minimum">
            <summary>
            Minimum property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Maximum">
            <summary>
            Maximum property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Value">
            <summary>
            Value property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Appearance">
            <summary>
            Appearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.FillAppearance">
            <summary>
            FillAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Appearances">
            <summary>
            Appearances property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Text">
            <summary>
            Text property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Step">
            <summary>
            Step property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.PercentFormat">
            <summary>
            PercentFormat property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Style">
            <summary>
            Style property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.FormatInfo">
            <summary>
            FormatInfo property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.SegmentWidth">
            <summary>
            SegmentWidth property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.PercentSetting">
            <summary>
            <see cref="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.PercentSetting"/> object
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.Percent">
            <summary>
            Percent property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarPropertyIds.PercentSettings">
            <summary>
            PercentSettingsCollection
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement">
            <summary>
            UIElement for displaying the unfilled area of a ProgressBar.
            </summary>
            <remarks>
            <p class="body">The <b>ProgressBarUIElement</b> can have two child elements - a <see cref="T:Infragistics.Win.TextUIElement"/> used to display the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/>  and a <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement"/> used to render the filled area of the ProgressBar. The element may be a child of the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarControlUIElement"/>.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement"/>
            <seealso cref="T:Infragistics.Win.UltraWinProgressBar.ProgressFillTextUIElement"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinProgressBar.IProgressBarInfo)">
            <summary>
            Initializes a new ProgressBarUIElement with the specified UIElement parent and object implementing the <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/> interface.
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="info">Class providing the progress bar state information.</param>
            <remarks>
            <p class="body">The info parameter specifies the class that implements the <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/> interface. This object will be used to query for the information required to display the ProgressBar.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.Initialize(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo)">
            <summary>
            Initializes the progress bar uielement to retreive its information from the specified object.
            </summary>
            <param name="progressInfo">An object implementing the IProgressBarInfo interface</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Overriden. Initializes the appearance of the element.
            </summary>
            <param name="appearance">AppearanceData to update with the Appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.PositionChildElements">
            <summary>
            Overriden. Handles positioning the child elements.
            </summary>
            <remarks>
            <p class="body">The <b>ProgressBarUIElement</b> can only contain two elements - a <see cref="T:Infragistics.Win.TextUIElement"/> and a <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Draws the themed background for a progress bar.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element could be rendered using the system themes.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the backcolor for the element should be rendered.
            </summary>
            <param name="drawParams">Draw params structure containing information about the draw operation</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.ProgressInfo">
            <summary>
            Returns the class which provides the state information for the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.Text">
            <summary>
            Returns the current text for the progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.Percent">
            <summary>
            Returns the percent for the progress bar.
            </summary>
            <remarks>
            <p class="body">The percent is calculated using the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Minimum"/>, <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Maximum"/>, and <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement.BorderStyle">
            <summary>
            Overriden. Border style of the progress bar.
            </summary>
            <value>
            <p class="body">The <see cref="T:Infragistics.Win.UIElementBorderStyle"/> used for the border of the <b>ProgressBarUIElement</b> is based on the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.BorderStyle"/>.</p>
            </value>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle">
            <summary>
            Enumeration of progress bar styles.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle.Continuous">
            <summary>
            The filled area's <see cref="P:Infragistics.Win.AppearanceBase.BackColor"/> and <see cref="P:Infragistics.Win.AppearanceBase.ImageBackground"/> is rendered using a solid bar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle.Segmented">
            <summary>
            The filled area's <see cref="P:Infragistics.Win.AppearanceBase.BackColor"/> and <see cref="P:Infragistics.Win.AppearanceBase.ImageBackground"/> is rendered using segments [bars].
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.ProgressBarStyle.SegmentedPartial">
            <summary>
            The filled area's <see cref="P:Infragistics.Win.AppearanceBase.BackColor"/> and <see cref="P:Infragistics.Win.AppearanceBase.ImageBackground"/> is rendered using segments [bars]. This differs from Segmented in
            that the last bar may appear smaller than the previous bars even when the fill is not complete.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.RegexUITypeEditor">
            <summary>
            UITypeEditor for regular expressions.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.RegexUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.RegexUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="T:Infragistics.Win.Design.RegexUITypeEditorForm">
            <summary>
            A Form used by the RegexUITypeEditor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.RegexUITypeEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.RegexUITypeEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.RegexUITypeEditorForm.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="regex">The initial regular expression to display.</param>
        </member>
        <member name="P:Infragistics.Win.Design.RegexUITypeEditorForm.Regex">
            <summary>
            Gets the user's regular expression, assuming they closed the dialog via the 'OK' button.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Shared.ResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Win.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="P:Infragistics.Win.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Win.ScrollbarIntersectionUIElement">
            <summary>
            This element occupies the square area at the lower right corner
            where a verticaal and horizontal scrollbar meet
            </summary>
        </member>
        <member name="M:Infragistics.Win.ScrollbarIntersectionUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollbarIntersectionUIElement</b> class.
            </summary>
            <param name="parent">Parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.ScrollbarIntersectionUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditor">
            <summary>
            The editor for a property of type <see cref="T:Infragistics.Win.UltraWinTabs.ScrollButtonTypes"/>.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.ScrollButtonTypes"/>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.Design.ScrollButtonTypesUITypeEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.MouseMessageType">
            <summary>
            MouseMessageType is used in MouseMessageInfo structure to identify
            which type of mouse message was received
            </summary>
        </member>
        <member name="F:Infragistics.Win.MouseMessageType.Down">
            <summary>
            MouseDown message
            </summary>
        </member>
        <member name="F:Infragistics.Win.MouseMessageType.Move">
            <summary>
            MouseMove message
            </summary>
        </member>
        <member name="F:Infragistics.Win.MouseMessageType.Up">
            <summary>
            MouseUp message
            </summary>
        </member>
        <member name="T:Infragistics.Win.MouseMessageInfo">
            <summary>
            MouseMessageInfo structure identifies the message type, buttons
            and point infoprmation received on a mousedown, mouseup or 
            mousemove message
            </summary>
        </member>
        <member name="M:Infragistics.Win.MouseMessageInfo.#ctor(System.Windows.Forms.MouseButtons,Infragistics.Win.MouseMessageType,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.MouseMessageInfo.Buttons">
            <summary>
            The mouse buttons that are pressed (left, right and/or middle). Read-only
            </summary>
        </member>
        <member name="P:Infragistics.Win.MouseMessageInfo.MouseMessageType">
            <summary>
            The mouse message type (down, up or move). Read-only
            </summary>
        </member>
        <member name="P:Infragistics.Win.MouseMessageInfo.X">
            <summary>
            The x coordinate of the mouse
            </summary>
        </member>
        <member name="P:Infragistics.Win.MouseMessageInfo.Y">
            <summary>
            The y coordinate of the mouse
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISelectionStrategy">
            <summary>
            ISelectionStrategy is implemented by SelectionStrategyBase class
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategy.OnMouseMessage(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called when a mouse down, up or move message is received. 
            
            Note: MouseMove and MouseUp message processing calls this 
            method only if this method returned true on the MouseDown
            and thereby captured the mouse.
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="msginfo">Struct with the mouse message data</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategy.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Processes selection based on the keyboard action and current selection
            </summary>
            <param name="item">The selectable item based on the keystroke </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategy.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Processes selection based on the keyboard action and current selection
            </summary>
            <param name="item">The selectable item based on the keystroke </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategy.OnCancelMode">
            <summary>
            Called when a cancelMode message is received
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionStrategy.CanItemBeNavigatedTo(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Determines if item can be navigated to.
            </summary>
            <param name="selectableItem"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="shiftKeyDown"><b>true</b> if shift key is depressed.</param>
            <param name="ctlKeyDown"><b>true</b> if Ctrl key is depressed.</param>
            <returns>True if the itme can be navigated to.</returns>
        </member>
        <member name="P:Infragistics.Win.ISelectionStrategy.IsMultiSelect">
            <summary>
            True if this strategy supports selecting more than one 
            item at a time (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ISelectionStrategy.IsSingleSelect">
            <summary>
            True if this strategy supports selecting only one 
            item at a time (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Win.ISelectionManager">
            <summary>
            Usually implemented by the control, this is called by the
            selection strategy to perform various actions.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.ActivateItem(Infragistics.Shared.ISelectableItem)">
            <summary>
            Activate the specified item.
            Returns true if action was canceled, false otherwise.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.SelectItem(Infragistics.Shared.ISelectableItem,System.Boolean)">
            <summary>
            Select the specified item.
            Returns true if action was canceled, false otherwise.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.UnselectItem(Infragistics.Shared.ISelectableItem,System.Boolean)">
            <summary>
            Unselect the specified item.
            Returns true if action was canceled, false otherwise.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.SelectRange(Infragistics.Shared.ISelectableItem,System.Boolean)">
            <summary>
            Select the range from the pivot item to the specified item.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.UnselectRange(Infragistics.Shared.ISelectableItem,System.Boolean)">
            <summary>
            Unselect the range from the pivot item to the specified item.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.SetPivotItem(Infragistics.Shared.ISelectableItem,System.Boolean)">
            <summary>
            Set the specified item as the pivot item.  
            isRangeSelect specifies if this is part of range selection or not.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <param name="isRangeSelect"></param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.GetPivotItem(Infragistics.Shared.ISelectableItem)">
            <summary>
            Returns the ISelectableItem that is the pivot item based on the type
            of item passed-in.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.IsMaxSelectedItemsExceeded(Infragistics.Shared.ISelectableItem)">
            <summary>
            Returns true if MaxSelectedItems will be exceeded by selecting the item.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.ClearInitialSelection">
            <summary>
            Clear the initial selection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.SetInitialSelection(Infragistics.Shared.ISelectableItem)">
            <summary>
            Sets the initial selection.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>The selectable item</param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.TranslateItem(Infragistics.Shared.ISelectableItem@)">
            <summary>
            Potentially translates the passed-in item to a ISelectableItem of a
            different type.  For instance, the grid translates a passed-in cell 
            into its parent row if CellClickAction is CellClickActionRowSelect.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.OnDragStart(Infragistics.Shared.ISelectableItem,System.Drawing.Point)">
            <summary>
            Called when a dragging operation is about to begin.
            </summary>
            <param name="item">The selectable item</param>
            <param name="mousePosition">The position of the mouse at the start of the drag</param>
            <returns>Returning true means that it was handled internally and no further action should be taken</returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.OnDragMove(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called on a mouse move during a dragging operation
            </summary>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.OnDragEnd(System.Boolean)">
            <summary>
            Called at the end of a dragging operation
            </summary>
            <param name="cancelled"><b>True</b> if drag cancelled, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.OnMouseUp(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            This is a MouseUp notification that occurs after selectionStartegy
            has processed the MouseUp msg.  The control can do anything it needs 
            to (if anything) in response to this.  For example, the MonthViewSingle 
            control enters edit mode.
            </summary>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.GetSelectionStrategy(Infragistics.Shared.ISelectableItem)">
            <summary>
            Returns the selection stratgey for a specific item.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.IsItemSelectableWithCurrentSelection(Infragistics.Shared.ISelectableItem)">
            <summary>
            Returns true if the item can be selected without first 
            clearing the current selection
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>Selected item</param>
            <returns><b>True</b> if Item is selectable with current selection, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.GetControl">
            <summary>
            Returns the control implementing the interface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.ItemNearestPoint(System.Drawing.Point,Infragistics.Shared.ISelectableItem)">
            <summary>
            Returns the ISelectableItem compatible with the specified item that
            is nearest to the specified point.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.DoDragScrollVertical(System.Int32)">
            <summary>
            Do a vertical scroll operation. This is called during a drag operation
            based on the position of the mouse cursor
            </summary>
            <param name="timerInterval">The interval that was used in the timer. This is passed along to provide additional context to the method.</param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.DoDragScrollHorizontal(System.Int32)">
            <summary>
            Do a horizontal scroll operation. This is called during a drag operation
            based on the position of the mouse cursor
            </summary>
            <param name="timerInterval">The interval that was used in the timer. This is passed along to provide additional context to the method.</param>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.DoesDragNeedScrollVertical(System.Drawing.Point,System.Int32@)">
            <summary>
            Called to see if the mouse is in a location that would cause a
            timer to be started to trigger vertical scrolling operations.
            </summary>
            <param name="mouseLocation">The location of the mouse</param>
            <param name="timerInterval">The interval (in milliseconds) to use when starting the timer.</param>
            <returns>Return true to start the timer</returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.DoesDragNeedScrollHorizontal(System.Drawing.Point,System.Int32@)">
            <summary>
            Called to see if the mouse is in a location that would cause a
            timer to be started to trigger horizontal scrolling operations.
            </summary>
            <param name="mouseLocation">The location of the mouse</param>
            <param name="timerInterval">The interval (in milliseconds) to use when starting the timer.</param>
            <returns>Return true to start the timer</returns>
        </member>
        <member name="M:Infragistics.Win.ISelectionManager.EnterSnakingMode(Infragistics.Shared.ISelectableItem)">
            <summary>
            Used to tell the selection manager to enter snaking mode if
            appropriate for the item type being selected. 
            </summary>
            <param name="item"></param>
            <remarks>Snaking refers to range selection where the items being selected 
            form a snaking pattern instead of a rectangular pattern. For eample, if in 
            a grid that contained 5 columns the user was selecting a range of cells
            from different rows, the selection could be either rectangular or snake 
            from row to row in which case all cells from intervening rows would get selected.
            </remarks>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyBase">
            <summary>
            Abstract base class derived by a set of classes to handle 
            None, Single and Extended selection strategies.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.dragThreshold">
            <summary>
            The drag threshold.  Dragging will start when this is exceeded.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.VerticalScrollTimer">
            <summary>
            Time for scroll dragging vertically
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.HorizontalScrollTimer">
            <summary>
            Time for scroll dragging horizontally
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.item">
            <summary>
            The current item.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.xPos">
            <summary>
            The initial X position.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.yPos">
            <summary>
            The initial Y position.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.ignoreNextMouseMove">
            <summary>
            Flag to indicate ignoring the next MouseMove.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.inDragMode">
            <summary>
            flag to keep track of whther we are currently in drag mode
            so that we can tunnel messages to OnDragMode and OnDragEnd
            functions
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.CanItemBeNavigatedTo(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Determines if item can be navigated to.
            </summary>
            <param name="selectableItem"></param>
            <param name="shiftKeyDown"></param>
            <param name="ctlKeyDown"></param>
            <returns>True if the itme can be navigated to.</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.OnDragStartCanceled">
            <summary>
            This method is called when the selection manager cancels OnDragStart. Default implementation releases the capture.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.DragStart">
            <summary>
            Called when dragging is to be started.
            It calls OnDragStart off the SelectionManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.DragMove(Infragistics.Win.MouseMessageInfo)">
            <summary>
            Called when currently dragging and mouse has moved.
            It calls OnDragMove off the SelectionManager.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.state">
            <summary>
            The current selection state of the strategy.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.SetState(Infragistics.Win.SelectionStrategyBase.SelectState)">
            <summary>
            Set the current selection state of the strategy.
            </summary>
            <param name="state"><see cref="T:Infragistics.Win.SelectionStrategyBase.SelectState"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.ShouldStartDrag(System.Int32,System.Int32)">
            <summary>
            Returns true if dragging should start (when we're in preDrag mode).
            The default implementation checks to see if the x or y coords exceed
            the drag threshold.
            </summary>
            <param name="xPos">x position</param>
            <param name="yPos">y position</param>
            <returns><b>True</b> if should start drag, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            SelectionStrategyBase constructor
            </summary>
            <param name="selectionManager">Required (usually implemented by the control).</param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.OnMouseMessage(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            Called when a mouse down, up or move message is received. 
            
            Note: MouseMove and MouseUp message processing calls this 
            method only if this method returned true on the MouseDown
            and thereby captured the mouse.
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="msginfo">Struct with the mouse message data</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Abstract method that processes selection based on the keyboard action
            </summary>
            <param name="item">The selectable item based on the keyboard action </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Abstract method that processes selection based on the keyboard action
            </summary>
            <param name="item">The selectable item based on the keyboard action </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.OnCancelMode">
            <summary>
            Called when a cancel mode message is received
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.SetVerticalScrollTimer(System.Int32)">
            <summary>
            First kill the timer then restarts it with a new interval
            </summary>
            <param name="nInterval">time interval in milliseconds</param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.VerticalScrollTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            VerticalScrollTimer_Tick event listener
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.KillVerticalScrollTimer">
            <summary>
            If the drag scroll row timer is still active kill it 
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.SetHorizontalScrollTimer(System.Int32)">
            <summary>
            First kill the timer then restarts it with a new interval
            </summary>
            <param name="nInterval">interval in milliseconds</param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.HorizontalScrollTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            HorizontalScrollTimer_Tick event listener
            </summary>
            <param name="sender"><see cref="T:System.Object"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.KillHorizontalScrollTimer">
            <summary>
            If the drag scroll row timer is still active kill it
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyBase.ManageTimers(System.Drawing.Point)">
            <summary>
            Determines during a drag operation whether timers
            are required to generate horizontal or vertical scrolling.
            </summary>
            <param name="point">The current location of the cursor</param>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyBase.SelectionManager">
            <summary>
            Returns the associated SelectionManager (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyBase.IsMultiSelect">
            <summary>
            Returns true if multiple items can be selected at one time 
            </summary>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyBase.IsSingleSelect">
            <summary>
            Returns true if only a single item can be selected 
            at any given time 
            </summary>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyBase.SelectState">
            <summary>
            The potential selection states of the strategy.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.SingleSelect">
            <summary>
            Currently in single selection state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.ExtSelect">
            <summary>
            Currently in extended selection state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.PreDrag">
            <summary>
            Currently in pre-drag state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.PreEdit">
            <summary>
            Currently in pre-edit state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.CtlClick">
            <summary>
            The item has been control-clicked on.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyBase.SelectState.PotentialPreDrag">
            <summary>
            Currently in a potential pre-drag state, used for manual dragging.
            </summary>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyContiguous">
            <summary>
            Selection strategy that only allows contiguous selection and does not
            allow unselecting an item by control-clicking on it.
            </summary>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyExtended">
            <summary>
            Strategy used for multiple selection of items.
            at any time.
            </summary>
        </member>
        <member name="F:Infragistics.Win.SelectionStrategyExtended.select">
            <summary>
            Flag to indicate whether we should select or unselect.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of the <b>SelectionStrategyExtended</b> class.
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnMouseMessage(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            Called when a mouse down, up or move message is received. 
            
            Note: MouseMove and MouseUp message processing calls this 
            method only if this method returned true on the MouseDown
            and thereby captured the mouse.
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="msginfo">Struct with the mouse message data</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Mouse down handler.
            </summary>
            <param name="item">The item clicked on</param>
            <param name="msginfo">A struct containing mouse message information.</param>
            <returns>True to capture the mouse.</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.CanItemBeNavigatedTo(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Returns true if item can be selected.
            </summary>
            <param name="selectableItem"><see cref="T:Infragistics.Shared.ISelectableItem"/>Selected item</param>
            <param name="shiftKeyDown"><b>true</b> if shift key is down</param>
            <param name="ctlKeyDown"><b>true</b> if shift key is down</param>
            <returns><b>true</b> if item can be selected</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@,System.Boolean)">
            <summary>
            Mouse down handler that is used by both SelectionStrategyExtended and 
            SelectionStrategyExtendedAuoDrag.  SelectionStrategyExtendedAutoDrag passes
            true for the forceDrag parameter which puts strategy in preDrag mode when
            selecting.
            </summary>
            <param name="item">The item clicked on</param>
            <param name="msginfo">A struct containing mouse message information.</param>
            <param name="forceDrag">If true will always puts strategy in preDrag mode.</param>
            <returns>True to capture the mouse.</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnMouseUp(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Mouse up handler
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnDragStartCanceled">
            <summary>
            This method is called when the selection manager cancels OnDragStart. Default implementation releases the capture.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.OnMouseMove(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            MouseMove handler.  Since we release capture on mouse up, this 
            means they are dragging.  See if we need to start drag on item
            or if a new item is being selected.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Overloaded method that takes a parameter that denotes whether the
            existing selection should be cleared
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtended.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Override method that selects/unselects and/or activates items based on what 
            is currently selected and if the shift/control are down.
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyExtended.IsMultiSelect">
            <summary>
            Returns true if only a single item can be selected 
            at any given time 
            </summary>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyExtended.IsDiscontiguousAllowed">
            <summary>
            Returns true if discontinuous selection is allowed 
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyContiguous.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of <b>SelectionStrategyContiguous</b>
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategyContiguous.IsDiscontiguousAllowed">
            <summary>
            Returns false to disallow discontinuous selection
            </summary>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyExtendedAutoDrag">
            <summary>
            Strategy used when multiple items can be selected but pressing the left
            button and dragging does not select other items but instead starts dragging
            the selected item immediately.  This is how Windows Explorer works.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtendedAutoDrag.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of <b>SelectionStrategyExtendedAutoDrag</b>.
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyExtendedAutoDrag.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Mouse down handler.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategyNone">
            <summary>
            Strategy used when selection is not supported
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of the <b>SelectionStrategyNone</b>
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.OnMouseMessage(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            Called when a mouse down, up or move message is received. 
            
            Note: MouseMove and MouseUp message processing calls this 
            method only if this method returned true on the MouseDown
            and thereby captured the mouse.
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="msginfo">Struct with the mouse message data</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Overloaded method that takes a parameter that denotes whether the
            the keystroke being processed includes the space bar
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Override method that selects/unselects and/or activates items based on what 
            is currently selected and if the shift/control are down.
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Mouse down handler.
            </summary>
            <param name="item"><see cref="T:Infragistics.Win.ISelectionManager"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategyNone.OnMouseMove(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            MouseMove handler.  Since we release capture on mouse up, this 
            means they are dragging.  See if we need to start drag on item.
            </summary>
            <param name="item"><see cref="T:Infragistics.Win.ISelectionManager"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategySingle">
            <summary>
            Strategy used when only a single item can be selected
            at any time.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of the <b>SelectionStrategySingle</b> class.
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseMessage(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            Called when a mouse down, up or move message is received. 
            
            Note: MouseMove and MouseUp message processing calls this 
            method only if this method returned true on the MouseDown
            and thereby captured the mouse.
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="msginfo">Struct with the mouse message data</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Fired on Mouse Down
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/></param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@,System.Boolean)">
            <summary>
            OnMouseDown handler that takes a third parameter that specifies whether
            we are forcing a drag or not.  SelectionStrategySingleAutoDrag passes
            true to this.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/></param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <param name="forceDrag"><b>true</b> if drag should be forced</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseMove(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="item">The selectable item the mouse is over</param>
            <param name="msginfo">Mouse releated data struct</param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.SelectItemAtPoint(System.Drawing.Point)">
            <summary>
            Selects the item at or nearest the mouse location
            </summary>
            <param name="point">The location of the mouse</param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse is released over an element
            </summary>
            <param name="e">Mouse event arguments </param>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Overloaded method that takes a parameter that denotes whether the
            the keystroke being processed includes the space bar
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <param name="forceToggle">True to force a toggle</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingle.ProcessKeyBoardItem(Infragistics.Shared.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Override method that selects/unselects and/or activates items based on what 
            is currently selected and if the shift/control are down.
            </summary>
            <param name="item">item is obtained based on the keyboard action and current 
            selection. For example if the right arrow key is depressed and a cell is 
            selected, the default action is NEXTCELL. The grid gets the cell 'Next-to' 
            the currently selected cell and passes that cell to this stragegy </param>
            <param name="shift"> True to behave as if the shift key is down </param>
            <param name="control"> True to behave as if the control key is down</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.SelectionStrategySingle.IsSingleSelect">
            <summary>
            Returns true if only a single item can be selected 
            at any given time 
            </summary>
        </member>
        <member name="T:Infragistics.Win.SelectionStrategySingleAutoDrag">
            <summary>
            Strategy used when only a single item can be selected and pressing the left
            button and dragging does not select other items but instead starts dragging
            the selected item immediately.
            </summary>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingleAutoDrag.#ctor(Infragistics.Win.ISelectionManager)">
            <summary>
            Constructor, initializes a new instance of <b>SelectionStrategySingleAutoDrag</b>.
            </summary>
            <param name="selectionManager"><see cref="T:Infragistics.Win.ISelectionManager"/></param>
        </member>
        <member name="M:Infragistics.Win.SelectionStrategySingleAutoDrag.OnMouseDown(Infragistics.Shared.ISelectableItem,Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Mouse down handler.
            </summary>
            <param name="item"><see cref="T:Infragistics.Shared.ISelectableItem"/>selected item</param>
            <param name="msginfo"><see cref="T:Infragistics.Win.MouseMessageInfo"/></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.ShadowManager">
            <summary>
            ShadowManager places shadows around a top level form a specified rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.#ctor(System.Windows.Forms.Form,System.Drawing.Rectangle)">
            <summary>
            This constructor will place drop shadows around a form. 
            </summary>
            <param name="formToShadow">The form to place a drop shadow around.</param>
            <param name="exclusionRect">The rectangle, in screen coodinates, to exclude from the drop shadows.</param>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.#ctor(System.Windows.Forms.Form,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="owningForm">The form that will own the shadow windows.</param>
            <param name="shadowRect">The rectangle, in screen coodinates, to place the drop shadow around.</param>
            <param name="exclusionRect">The rectangle, in screen coodinates, to exclude from the drop shadows.</param>
            <param name="rightShadow">If true, will place a shadow window on the right of the rectangle.</param>
            <param name="bottomShadow">If true, will place a shadow window on the bottom of the rectangle.</param>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.Hide">
            <summary>
            Hides the shadows
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.Refresh">
            <summary>
            Refreshes the shadows
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.Show">
            <summary>
            Shows the shadows
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.OnDispose">
            <summary>
            Called when the object is disposed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ShadowManager.ExclusionRect">
            <summary>
            Gets or sets the rectangle, in screen coodinates, to exclude from the drop shadows.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ShadowManager.ShadowRect">
            <summary>
            Gets or sets the rectangle, in screen coodinates, to place the drop shadows around.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.Shadow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ShadowManager.Shadow.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.ShadowManager.ShadowEx.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Responds to the WM_GETMINMAXINFO message
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Infragistics.Win.ShadowManager.ShadowEx.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.SplitterUIElement">
            <summary>
               This is an abstract base call used for either vertical or
               or horizontal splitter elements
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.#ctor(Infragistics.Win.UIElement,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent UIElement</param>
            <param name="vertical"><b>true</b> if vertical, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.SupportsUpDownAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized vertically
            by clicking on the passed in mouse point
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.SupportsLeftRightAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized horizontally
            by clicking on the passed in mouse point
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.GetAdjustmentRange(System.Drawing.Point,Infragistics.Win.UIElementAdjustmentRangeParams@)">
            <summary>
            Returns the range limits for adjusting the element in either or both
            dimensions. It also returns the initial rects for the vertical and horizontal
            bars that will need to be inverted during the mouse drag operation.
            </summary>
            <param name="point">The location of the cursor</param>
            <param name="range">Returned limits</param>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.PointInAdjustableArea(System.Drawing.Point)">
            <summary>
            Returns true if the point is in the adjustable area
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.GetAdjustableCursor(System.Drawing.Point)">
            <summary>
            The cursor to use over the adjustable area of the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.ApplyAdjustment(System.Drawing.Point)">
            <summary>
            Called after a move/resize operation. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            the default implementation sets the backcolor to the system color
            for controls
            </summary>
        </member>
        <member name="P:Infragistics.Win.SplitterUIElement.BorderStyle">
            <summary>
            The style of borders to draw around the element
            </summary>
        </member>
        <member name="P:Infragistics.Win.SplitterUIElement.BorderSides">
            <summary>
            Flags indicating which sides of the element to
            draw borders.
            </summary>
        </member>
        <member name="P:Infragistics.Win.SplitterUIElement.Rect">
            <summary>
            The element's bounding rectangle in client coordinates
            </summary>
        </member>
        <member name="P:Infragistics.Win.SplitterUIElement.DefaultThickness">
            <summary>
            Default thickness of the splitter in pixels
            </summary>
        </member>
        <member name="T:Infragistics.Win.SplitterIntersectionUIElement">
            <summary>
            An element at the intersection of a vertical and horizontal
            slippter element
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.SplitterUIElement,Infragistics.Win.SplitterUIElement)">
            <summary>
            Constructor, initializes a new instance of <b>SplitterIntersectionUIElement</b>
            </summary>
            <param name="parent">Parent UIElement</param>
            <param name="leftRightAdjustmentSplitter"></param>
            <param name="upDownAdjustmentSplitter"></param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.Initialize(Infragistics.Win.SplitterUIElement,Infragistics.Win.SplitterUIElement)">
            <summary>
            Initializes the element with the splitters to intersect
            </summary>
            <param name="leftRightAdjustmentSplitter"></param>
            <param name="upDownAdjustmentSplitter"></param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.OnElementAdjusted(System.Object,Infragistics.Win.UIElementAdjustedEventArgs)">
            <summary>
            Called when one of the intersecting splitter element's has
            been adjusted 
            </summary>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.ApplyAdjustment(System.Drawing.Point)">
            <summary>
            Called after a move/resize operation. 
            </summary>
            <param name="delta"><see cref="T:System.Drawing.Point"/></param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.SupportsUpDownAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized vertically
            by clicking on the passed in mouse point
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.SupportsLeftRightAdjustmentsFromPoint(System.Drawing.Point)">
            <summary>
            Returns true if the element can be moved or resized horizontally
            by clicking on the passed in mouse point
            </summary>
            <param name="point">In client coordinates</param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.GetAdjustmentRange(System.Drawing.Point,Infragistics.Win.UIElementAdjustmentRangeParams@)">
            <summary>
            Returns the range limits for adjusting the element in either or both
            dimensions. It also returns the initial rects for the vertical and horizontal
            bars that will need to be inverted during the mouse drag operation.
            </summary>
            <param name="point">The position of the cursor</param>
            <param name="range">Returned limits</param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.PointInAdjustableArea(System.Drawing.Point)">
            <summary>
            Returns true if the point is in the adjustable area
            </summary>
            <param name="point"><see cref="T:System.Drawing.Point"/> to check</param>
            <returns><b>true</b> if point is in adjustable area</returns>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            we need specialized border drawing logic for a splitter intersection
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.SplitterIntersectionUIElement.GetAdjustableCursor(System.Drawing.Point)">
            <summary>
            The cursor to use over the adjustable area of the element
            </summary>
            <param name="point"><see cref="T:System.Drawing.Point"/></param>
            <returns><see cref="T:System.Windows.Forms.Cursor"/></returns>
        </member>
        <member name="P:Infragistics.Win.SplitterIntersectionUIElement.BorderSides">
            <summary>
            Flags indicating which sides of the element to
            draw borders.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="T:Infragistics.Win.TabbedColorPicker">
            <summary> 
            Summary description for TabbedColorPicker.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TabbedColorPicker.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>TabbedColorPicker</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TabbedColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TabbedColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TabbedColorPicker.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            The size of the TabbedColorPicker cannot be changed
            </summary>
            <param name="x">The new Left property value of the control. </param>
            <param name="y">The new Top property value of the control. </param>
            <param name="width">The new Width property value of the control.</param>
            <param name="height">The new Height property value of the control.</param>
            <param name="specified">A bitwise combination of the BoundsSpecified values.</param>
        </member>
        <member name="E:Infragistics.Win.TabbedColorPicker.ColorChanged">
            <summary>
            Fires when color is changed or selected
            </summary>
        </member>
        <member name="E:Infragistics.Win.TabbedColorPicker.MouseUpOnColor">
            <summary>
            Fires when tabPane is clicked
            </summary>
        </member>
        <member name="P:Infragistics.Win.TabbedColorPicker.DefaultSize">
            <summary>
            The default size of the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.TabbedColorPicker.CustomColors">
            <summary>
            Returns an array of custom colors
            </summary>
        </member>
        <member name="P:Infragistics.Win.TabbedColorPicker.Color">
            <summary>
            The currently selected color
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabDragManager">
            <summary>
            Class for managing the drag action for a <see cref="P:Infragistics.Win.UltraWinTabs.TabDragManager.TabManager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.#ctor(Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabDragManager"/>
            </summary>
            <param name="manager">Owning <b>TabManager</b></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.StartDrag(System.Drawing.Point,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElement)">
            <summary>
            Invoked when a drag operation should begin
            </summary>
            <param name="tabOffset">Offset of the mouse into the tab being dragged</param>
            <param name="tabToDrag">Tab being dragged</param>
            <param name="tabElement">Associated element</param>
            <returns>True if the drag operation began</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.InitiateDrag(System.Drawing.Point,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElement)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinTabs.TabDragManager.StartDrag(System.Drawing.Point,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElement)"/> when a drag should be initiated.
            </summary>
            <param name="tabOffset">Amount of offset between the mouse location when pressed down on the tab and the upper left of the tab element</param>
            <param name="tabToDrag">Tab item to drag</param>
            <param name="tabElement">Element associated with the tab. This element should not be stored and may be reused.</param>
            <returns>True if the drag operation was started</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            Invoked when the interval has elapsed for the scroll timer
            </summary>
            <param name="sender">Timer invoking the tick</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked during a drag operation as the mouse is repositioned
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.CancelDrag">
            <summary>
            Invoked if the drag operation was cancelled.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.DragEnded">
            <summary>
            Invoked when the drag has ended so resources can be released.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.ProcessDrop">
            <summary>
            Invoked during a drag operation when the mouse button has been released.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabDragManager.OnDispose">
            <summary>
            Invoked when the object is disposed so that it may release any resources.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.IsDragging">
            <summary>
            Indicates if there is a drag operation in progress
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.Tab">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> being dragged
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.TabManager">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabDragManager.TabManager"/>
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.IndicatorManager">
            <summary>
            Returns the indicator manager used to manage the indicator positions during a drag operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.ScrollTimer">
            <summary>
            Returns the timer used to detect whether we should scroll the tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.HasScrollTimer">
            <summary>
            Indicates if a scroll timer has been created.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.DragSourceControl">
            <summary>
            Returns the control whose element started the drag operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabDragManager.CancelOnEscape">
            <summary>
            Indicates if the drag operation may be cancelled when the user presses the escape key.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabHitTestInfo">
            <summary>
            Structure containing information about a tab hit test operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabHitTestInfo.Tab">
            <summary>
            Returns the tab at the specified point
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabHitTestInfo.Element">
            <summary>
            Returns the element associated with the tab
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabHitTestInfo.ScrollDirection">
            <summary>
            Returns the scroll direction (if any) that should occur based on the specified location
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabHitTestInfo.Distance">
            <summary>
            Returns the distance from the group area
            </summary>
            <remarks>Positive values indicate that the point was outside the row area, while negative
            values indicate the delta within the row area.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabHitTestInfo.RowAreaRect">
            <summary>
            Returns the area containing the rows
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.DragScrollDirection">
            <summary>
            Enumeration of scroll directions
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.DragScrollDirection.None">
            <summary>
            No scroll operation should be performed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.DragScrollDirection.Previous">
            <summary>
            The tabs should be scrolled to show the previous items
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.DragScrollDirection.Next">
            <summary>
            The tabs should be scrolled to show the next items
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ITabProvider">
            <summary>
            Interface implemented by a class that manages a collection of ITabItems.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.CreateMetricsFont">
            <summary>
            Creates a font used for all tab text measurements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.GetTabItemState(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Gets the current state of the tab.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.ResolveClientAreaAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the client area (not including the tab header area).
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.ResolveDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the default appearance for the tab area.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.ResolveScrollButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for scroll buttons.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the scroll track area.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.GetTabParentAccessibleObject">
            <summary>
            Gets the Accessible Object of that parent of the tabs.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabProvider.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.AllowTabMoving">
            <summary>
            Determines if the user can drag tabs around.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelect">
            <summary>
            Determines if a tab should be selected automatically when the mouse pauses over it for <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelectDelay"/> milliseconds.
            </summary>
            <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelectDelay"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelectDelay">
            <summary>
            Returns the delay (in milliseconds) before a tab is automatically selected when the mouse is paused over it and <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelect"/> is true.
            </summary>
            <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelect"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.HotkeyPrefix">
            <summary>
            Determines whether mnemonics will be displayed. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.HotTrack">
            <summary>
            Determines whether the a tab's appearance changes when the mouse passes over it.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ImageList">
            <summary>
            Returns the image list to use.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ImageSize">
            <summary>
            Returns the size of images in the tab's text area.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ImageTransparentColor">
            <summary>
            Returns the transparent color used when drawing tool images.
            </summary>
            <remarks>
            <p class="body">When set to a color other than Color.Transparent (the default), all 
            occurrences of the color in the image will be made transparent.</p>
            <p class="body">If a tab image is supplied by setting an Appearance.Image property
            to an Imagelist index, the ImageList's TransparentColor property is 
            looked at first.  If the property is set to Color.TransparentColor,
            then the components ImageTransparentColor is used.  If it is set 
            to Color.TransparentColor, then no color masking is done.</p>
            <p class="body">If a tab image is supplied by setting the Appearance.Image property to
            an image, the component's ImageTransparentColor is used.  If it is
            set to Color.TransparentColor, then no color masking is done.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.InterRowSpacing">
            <summary>
            Determines the spacing between tab rows
            </summary>
            <remarks>Applies only to 'MultiRow...' <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabLayoutStyle"/>s</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.InterTabSpacing">
            <summary>
            Determines the spacing between tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.MaxAvailableTabAreaSize">
            <summary>
            Returns the maximum available size for the tab area.   
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.MaxTabWidth">
            <summary>
            Returns the maximum width of a tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.MaxVisibleTabRows">
            <summary>
            Returns the maximum number of tab rows to display.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.MinTabWidth">
            <summary>
            Returns the minimum width of a tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.MultiRowSelectionStyle">
            <summary>
            Determines if tab rows are re-arranged when a tab is selected.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScaleImages">
            <summary>
            Determines if images will be scaled to <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.ImageSize"/>. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollArrowStyle">
            <summary>
            Indicates the style of the arrows displayed by the scroll buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtons">
            <summary>
            Determines if scroll buttons will be shown. 
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabScrollButtons"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtonStyle">
            <summary>
            Determines the visual style of the scroll buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtonTypes">
            <summary>
            Determines which scroll buttons will be shown. 
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.ScrollButtonTypes"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollTrackExtent">
            <summary>
            Determines the size of the scroll thumb track.
            </summary>
            <remarks>
            <p>This value is ignored unless <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtonTypes"/> is set to <see cref="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.Thumb"/>.</p>
            <p>A value of zero will result in a default size being applied.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtonTypes"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.Thumb"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ShowButtonSeparators">
            <summary>
            Determines whether separators are rendered between button style tabs.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ShowCloseButton">
            <summary>
            Determines whether a close button is displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ShowFocus">
            <summary>
            Determines whether a focus rect will be drawn on the selected tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.ShowToolTips">
            <summary>
            Determines whether tooltips will be shown over the tab area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.Style">
            <summary>
            Determines the style of the tabs.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabStyle"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabButtonStyle">
            <summary>
            Determines the style of tab buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabLayoutStyle">
            <summary>
            Determines how the tabs will be laid out.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabOrientation">
            <summary>
            Determines where the tabs are displayed in relation to the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabPadding">
            <summary>
            Returns the amount of extra padding around the tab text and image.  
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.Tabs">
            <summary>
            Returns a list of objects that implement the <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> interface.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabSize">
            <summary>
            Returns the size of a tab. This is the functional equivalent of the inbox tab control’s ‘ItemSize’ property.   
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabsPerRow">
            <summary>
            Returns the number of tabs on each row. 
            </summary>
            <remarks>Applies only to <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabLayoutStyle"/>s <see cref="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowTabsPerRow"/> and <see cref="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.MultiRowTabsPerRow"/></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.TextOrientation">
            <summary>
            Returns the orientation of the tab text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabProvider.VisibleTabsCount">
            <summary>
            Returns the total number of tabs whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true.
            </summary>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ITabItem">
            <summary>
            Interface implemented by a class that represents a single tab.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.ITabItem.ResolveAppearance(Infragistics.Win.UltraWinTabs.TabState,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for this tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.AllowMoving">
            <summary>
            Determines if the user can drag this tab around.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled">
            <summary>
            Determines if the tab is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.FixedWidth">
            <summary>
            The fixed width of the tab.
            </summary>
            <remarks>If a value less than 1 is returned the width will be calulated based on <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.HotTrack">
            <summary>
            Determines whether the tab's appearance changes when the mouse passes over it.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.ImageSize">
            <summary>
            Determines how much space is reserved for an image.
            </summary>
            <remarks>This should return the largest image that will be used by the tab in any of its <see cref="T:Infragistics.Win.UltraWinTabs.TabState"/>s.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.Index">
            <summary>
            The zero-based index of the tab in the <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.Tabs"/> list.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.Tag">
            <summary>
            Returns/sets an object that is used by the caller. It is completely opague to the implementor of this interface.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.Text">
            <summary>
            Returns the tab's caption text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.ToolTipText">
            <summary>
            Returns tooltip text (if any) for this tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible">
            <summary>
            Determines if the tab is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.ITabItem.AccessibilityObject">
            <summary>
            Returns the accessible object representing the tab item.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabButtonSeparatorUIElement">
            <summary>
            TabButtonSeparatorUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabButtonSeparatorUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            UIElement used to display the separator between two tab buttons.
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabButtonSeparatorUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the foreground/borders for the separator.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabButtonSeparatorUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Used to prevent the backcolor from rendering for the tab line
            </summary>
            <param name="drawParams">Draw parameters</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabButtonSeparatorUIElement.Vertical">
            <summary>
            Indicates if the separator is rendered vertically
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement">
            <summary>
            TabCloseButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the tab close button element.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.ButtonClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
            <returns>True to prevent the base implementation from being invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the spin button arrow.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the UIElement.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the UIElement.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.TabManager">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.TabManager"/> object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.Enabled">
            <summary>
            Gets/sets the enabled state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object that represents the element or its associated object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabCloseButtonUIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabLocation">
            <summary>
            Enumeration of locations used for the caption and tab locations.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLocation.Top">
            <summary>
            Located at the top
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLocation.Bottom">
            <summary>
            Located at the bottom
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLocation.Left">
            <summary>
            Located on the left.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLocation.Right">
            <summary>
            Located on the right.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabSizing">
            <summary>
            Enumeration of tab sizing modes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.Default">
            <summary>
            Default tab sizing
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.Fixed">
            <summary>
            The size of the tab is based on a specified size.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.Justified">
            <summary>
            The tabs are sized up to the autosize width. If there is not enough room to display all of the tabs then the space is divided evenly amongst the tabs.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.AutoSize">
            <summary>
            The tab caption is sized based on the caption and image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.Compressed">
            <summary>
            The text and image are displayed for the active tab only. All other tabs display only the image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.TabsPerRow">
            <summary>
            The size of each tab is a percentage of the available space based on the TabsPerRow setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSizing.SizeToFit">
            <summary>
            The tabs are sized up to the autosize width. If there is not enough room to display the all of the tabs then the space is divided evenly amongst the tabs. If there is space left over then it is divided evenly among all the tabs so that the entire row is always filled.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ScrollArrowStyle">
            <summary>
            Enumeration of scroll arrow styles
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollArrowStyle.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollArrowStyle.Standard">
            <summary>
            Standard style scroll arrows
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollArrowStyle.VisualStudio">
            <summary>
            Visual Studio style scroll arrows
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollArrowStyle.WindowsXP">
            <summary>
            Windows XP style scroll arrows
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabStyle">
            <summary>
            Enumeration of tab styles
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.Default">
            <summary>
            Default tab style
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.PropertyPage">
            <summary>
            Standard Property Page style tabs
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.PropertyPageSelected">
            <summary>
            Property Page style tab for the selected tab and hot tracked tab when hot tracking is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.StateButtons">
            <summary>
            State button style tabs
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.VisualStudio">
            <summary>
            Visual Studio style tabs
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.Flat">
            <summary>
            Flat tabs
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.Wizard">
            <summary>
            Wizard
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.Excel">
            <summary>
            The tabs have straight outwardly sloping sides (in the shape of a rhombus). The right side of each tab overlaps its neighboring tab half way up except for the selected tab which overlaps its neighboring tabs on both sides.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.PropertyPageFlat">
            <summary>
            Rounded property page style tabs with a single pixel border
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.PropertyPage2003">
            <summary>
            Sloped leading edge
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabStyle.VisualStudio2005">
            <summary>
            Tightly rounded corners
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabState">
            <summary>
            Enumeration of possible tab states
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabState.Normal">
            <summary>
            The tab appears in its normal state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabState.Selected">
            <summary>
            The tab is selected.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabState.Hot">
            <summary>
            The mouse is over the tab.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabState.Active">
            <summary>
            The tab is active (displays a focus rectangle).
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrollButtons">
            <summary>
            Enumeration of tab scroll styles
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabScrollButtons.None">
            <summary>
            Scroll buttons are never displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabScrollButtons.Always">
            <summary>
            Scroll buttons are always displayed
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabScrollButtons.Automatic">
            <summary>
            Scroll buttons are only displayed when there is not enough room to display all the tabs
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.CaptionOrientation">
            <summary>
            Enumeration of the possible caption orientations
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.Default">
            <summary>
            Default orientation
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.Horizontal">
            <summary>
            The caption is not rotated
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.HorizontalPlus90">
            <summary>
            The caption is rotated 90 degrees
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.HorizontalPlus180">
            <summary>
            The caption is rotated 180 degrees
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.HorizontalPlus270">
            <summary>
            The caption is rotated 270 degrees
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.DefaultPlus90">
            <summary>
            The default caption orientation is rotated 90 degrees
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.DefaultPlus180">
            <summary>
            The default caption orientation is rotated 180 degrees
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.CaptionOrientation.DefaultPlus270">
            <summary>
            The default caption orientation is rotated 270 degrees
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.SelectTabDirection">
            <summary>
            Enumeration used to indicate which tab should be selected
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.SelectTabDirection.FirstVisibleTab">
            <summary>
            Select first visible, enabled tab
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.SelectTabDirection.NextVisibleTab">
            <summary>
            Select next visible, enabled tab
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.SelectTabDirection.PreviousVisibleTab">
            <summary>
            Select previous visible, enabled tab
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.SelectTabDirection.LastVisibleTab">
            <summary>
            Select last visible, enabled tab
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabLineType">
            <summary>
            Enumeration of types of tab lines
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLineType.BeforeSelectedTab">
            <summary>
            The line displayed before the selected tab
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLineType.AfterSelectedTab">
            <summary>
            The line displayed after the selected tab
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLineType.Complete">
            <summary>
            The selected tab is not visible so the line is displayed across the entire length of the tabs.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TextOrientation">
            <summary>
            Enumeration of the possible text orientations
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.Default">
            <summary>
            Default orientation
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.Horizontal">
            <summary>
            The text is not rotated
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.HorizontalPlus90">
            <summary>
            The text is rotated 90 degrees from horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.HorizontalPlus180">
            <summary>
            The text is rotated 180 degrees from horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.HorizontalPlus270">
            <summary>
            The text is rotated 270 degrees from horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.DefaultPlus90">
            <summary>
            The text is rotated 90 degrees from its default.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.DefaultPlus180">
            <summary>
            The text is rotated 180 degrees from its default.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TextOrientation.DefaultPlus270">
            <summary>
            The text is rotated 270 degrees from its default.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle">
             <summary>
             Enumerator used to specify if tab rows are re-arranged when a tab is selected.
             </summary>
             <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.MultiRowSelectionStyle"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle.DefaultForStyle">
            <summary>
            A <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.Style"/> of 'PropertyPage' defaults to ‘SwapRow’. All other styles default to ‘HighlightTab’.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle.SwapRow">
            <summary>
            The row that contains the selected tab is swapped with the row currently adjacent to the tab page area.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle.HighlightTab">
            <summary>
            The selected tab appears normal while all the other tabs are partially alpha-blended out.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle.ScrollRow">
            <summary>
            The row that contains the selected tab is scrolled so that it is adjacent to the tab page area but the rows always maintain their relative positions. If the selected tab is on one of the last rows then empty space may be displayed after the last tab row.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.MultiRowSelectionStyle.ScrollRowWrap">
            <summary>
            The row that contains the selected tab is scrolled so that it is adjacent to the tab page area but the rows always maintain their relative positions. If the selected tab is on one of the last rows then the rows wrap around to the beginning so that the first row is adjacent to the last row.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ScrollButtonTypes">
             <summary>
             Enumerator used to determine what sets of scroll buttons are displayed.
             </summary>
             <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.ScrollButtonTypes"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.None">
            <summary>
            No scroll buttons are displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.Default">
            <summary>
            Use appropriate defaults.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.NextPrevious">
            <summary>
            A set of scroll buttons is shown to scroll one tab or tab row forward or back.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.NextPagePreviousPage">
            <summary>
            A set of scroll buttons is shown to scroll one page of tabs forward or back.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.FirstLast">
            <summary>
            A set of scroll buttons is shown to scroll to the first/llast tab.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollButtonTypes.Thumb">
            <summary>
            A scroll thumb and track area is shown.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.ScrollType">
             <summary>
             Enumerator used to determine what type of scrolling to do.
             </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.Next">
            <summary>
            Scroll forward.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.Previous">
            <summary>
            Scroll backward.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.NextPage">
            <summary>
            Scroll forward a full page.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.PreviousPage">
            <summary>
            Scroll backward a full page.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.First">
            <summary>
            Scroll so the first tab is visible.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.Last">
            <summary>
            Scroll so the last tab is visible.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.ScrollType.Other">
            <summary>
            The displayed tabs were changed - e.g. using EnsureTabItemInView
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle">
             <summary>
             Enumerator used to specify how tabs are sized and laid out with respect to one another.
             </summary>
             <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabLayoutStyle"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowAutoSize">
            <summary>
            Each tab is sized based on its text and image size. If the items can’t fit scroll buttons will be provided to scroll tabs.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowFixed">
            <summary>
            Each tab is sized based on the TabSize property setting. If the items can’t fit scroll buttons will be provided to scroll tabs.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowSizeToFit">
            <summary>
            Each tab is sized based on its text and image size. If there is not enough space for all tabs then the tabs are shortened enough to fit (longer tabs are shortened first until they are the same size as the smaller tabs). If there is space left over then it is divided evenly among all the tabs so that the entire row is always filled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowJustified">
            <summary>
            The tabs are sized up to the autosize width. If there is not enough room to display all of the tabs then the space is divided evenly amongst the tabs.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowCompressed">
            <summary>
            The text and image are displayed for the active tab only. All other tabs display only the image.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.SingleRowTabsPerRow">
            <summary>
            The size of each tab is a percentage of the available space based on the TabsPerRow property setting.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.MultiRowAutoSize">
            <summary>
            Each tab is sized based on its text and image size. If the items can’t fit on a single row then additional rows will be added. If the number of rows exceeds the ‘MaxVisibleTabRows’ property then scroll buttons will be provided to scroll rows.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.MultiRowFixed">
            <summary>
            Each tab is sized based on the TabSize property setting. If the items can’t fit on a single row then additional rows will be added. If the number of rows exceeds the ‘MaxVisibleTabRows’ property then scroll buttons will be provided to scroll rows.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.MultiRowSizeToFit">
            <summary>
            Each tab is sized based on its text and image size. If the items can’t fit on a single row then additional rows will be added. If the number of rows exceeds the ‘MaxVisibleTabRows’ property then scroll buttons will be provided to scroll rows. If there is space left over on a tab row then it is divided evenly among all the tabs on the row so that each row is always filled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabLayoutStyle.MultiRowTabsPerRow">
            <summary>
            The size of each tab is a percentage of the available space based on the TabsPerRow property setting. If the items can’t fit on a single row then additional rows will be added. If the number of rows exceeds the ‘MaxVisibleTabRows’ property then scroll buttons will be provided to scroll rows. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabOrientation">
             <summary>
             Enumerator used to determine where the tab area is relative to the control's tab page area.
             </summary>
             <seealso cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.TabOrientation"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.TopLeft">
            <summary>
            The tabs appear along the top edge of the control aligned to the left side.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.TopRight">
            <summary>
            The tabs appear along the top edge of the control aligned to the right side.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.BottomLeft">
            <summary>
            The tabs appear along the bottom edge of the control aligned to the left side.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.BottomRight">
            <summary>
            The tabs appear along the bottom edge of the control aligned to the right side.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.LeftTop">
            <summary>
            The tabs appear along the left edge of the control vertically aligned to the top.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.LeftBottom">
            <summary>
            The tabs appear along the left edge of the control vertically aligned to the bottom.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.RightTop">
            <summary>
            The tabs appear along the right edge of the control vertically aligned to the top.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabOrientation.RightBottom">
            <summary>
            The tabs appear along the right edge of the control vertically aligned to the bottom.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabGroupUIElement">
            <summary>
            TabGroupUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabGroupUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
            <param name="tabManager">The controlling TabManager.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is release over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
            <returns>True to prevent further processing.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabGroupUIElement.VerifyChildElements(Infragistics.Win.ControlUIElementBase,System.Boolean)">
            <summary>
            Called during a drawing operation to ensure that all child
            elements are created and positioned properly. If the ChildElementsDirty
            flag is true then the default implementation will call
            PositionChildElements and reset the flag 
            </summary>
            <param name="controlElement">The control's main UIElement</param>
            <param name="recursive">If true will call this method on all descendant elements</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabGroupUIElement.TabManager">
            <summary>
            Read-only property that returns the associated TabManager
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabGroupUIElement.CancelCaptureOnEscape">
            <summary>
            Indicates if capture for this element should be terminated if the escape key is pressed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabInfo">
            <summary>
            Class that manages a collection of tabs
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager">
            <summary>
            Object that manages the display for a set of tabs.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.TabWidthDefault">
            <summary>
            The default value for the TabWidth setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.TabHeightDefault">
            <summary>
            The default value for the TabHeight setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.MaxTabWidthDefault">
            <summary>
            The default value for the MaxTabWidth setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.MinTabWidthDefault">
            <summary>
            The default value for the MinTabWidth setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.ScrollTrackExtentDefault">
            <summary>
            The default value for the ScrollTrackExtent setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabManager.ScrollArrowStyleDefault">
            <summary>
            The default value for the ScrollArrowStyle setting
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.#ctor(Infragistics.Win.UltraWinTabs.ITabProvider)">
            <summary>
            Constructor
            </summary>
            <param name="tabProvider">The tabProvider of the tabs.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.OnDispose">
            <summary>
            called when the object is disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CancelDrag">
            <summary>
            Invoked when the drag operation has been ended so resources may be cleaned up
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CreateTabAreaUIElement(Infragistics.Win.UIElement)">
            <summary>
            Creates a new instance of the UIElement for the tab area. 
            </summary>
            <param name="parentElement">The parent element.</param>
            <returns>The newly created tabe area UIElement</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.Dirty(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Notifies the manager that some state has changed.
            </summary>
            <param name="invalidate">True to invalidate the entire tab area.</param>
            <param name="tabListChanged">Indicates that tabs were added, removed or rearranged.</param>
            <param name="dirtyAllMetrics">True to mark all tab metrics dirty.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DirtyFont">
            <summary>
            Notifies the manager that the base font information has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DirtyTabItem(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Notifies the manager that a tab item's state has changed.
            </summary>
            <param name="tab">The tab whose state has changed.</param>
            <param name="invalidate">True to invalidate the tab (if it is visible).</param>
            <param name="dirtyTextMetrics">True to mark the tab's tezt size metrics in need of recalculation.</param>
            <param name="dirtyImageMetrics">True to mark the tab's image size metrics in need of recalculation.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.EnsureTabItemInView(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Scrolls the tab item into view.
            </summary>
            <param name="tab">The tab item to check.</param>
            <remarks>
            <p>If the tab item is already in view this method does nothing.</p>
            <p>Otherwise the tab is scrolled into view but is not selected.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.IsTabItemInView(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnNextRow(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the next row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tab is found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnNextRow(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the next row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous selectable tab was found.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tabis found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnPreviousRow(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the previous row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tab is found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnPreviousRow(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the previous row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous selectable tab was found.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tabis found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnNextPage(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the next page of tabs whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tab is found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnNextPage(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the next page of tabs whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous selectable tab was found.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tabis found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnPreviousPage(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the previous page of tabs whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tab is found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetCorrespondingTabItemOnPreviousPage(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns a corresponding <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the previous page of tabs whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous selectable tab was found.</param>
            <returns>A tab that is selectable.</returns>
            <remarks>
            If no tab is found then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetFirstVisibleTabOnRow(System.Int32)">
            <summary>
            Returns the first <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="rowNumber">The 1-based row number.</param>
            <returns>The first visible tab on that row.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetLastVisibleTabOnRow(System.Int32)">
            <summary>
            Returns the last <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="rowNumber">The 1-based row number.</param>
            <returns>The last visible tab on that row.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the next <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The next tab that is selectable.</returns>
            <remarks>
            If no next tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the next <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the beginning of the collection if no next selectable tab was found.</param>
            <returns>The next tab that is selectable.</returns>
            <remarks>
            If no next tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the next <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The next tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the next <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the beginning of the collection if no next visible tab was found.</param>
            <returns>The next tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItemInRow(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the next <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the same row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The next tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPositionInRow(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Gets the tab's visible position within its row.
            </summary>
            <param name="tab">The tab in question.</param>
            <returns>The zero-based ordinal position of the tab within its row.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the previous <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The previous tab that is selectable.</returns>
            <remarks>
            If no previous tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the previous <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous selectable tab was found.</param>
            <returns>The previous tab that is selectable.</returns>
            <remarks>
            If no previous tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the previous <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The previous tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the previous <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <param name="wrap">If true will wrap around to the end of the collection if no previous visible tab was found.</param>
            <returns>The previous tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItemInRow(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the previous <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the same row whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <param name="tab">The reference tab.</param>
            <returns>The next tab that is visible.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetRequiredExtent">
            <summary>
            Returns the amount of space needed to show the tabs.
            </summary>
            <returns>The amount of space needed to show the tabs</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetRequiredSize">
            <summary>
            Returns the size that the element would need to be to display all the items.
            </summary>
            <returns>size that the element would need to be to display all the items</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemAtPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a tab at the specified visible position.
            </summary>
            <param name="positionInRow">The zero-based ordinal position  within the row.</param>
            <param name="rowNumber">The 1-based row number.</param>
            <param name="ignoreDisabled">Will only return an enabled tab or null.</param>
            <returns>A tab at that position.</returns>
            <remarks>If there is no visible tab at the specified postion the last visible tab on the row will be returned.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemAtPosition(System.Int32,System.Int32)">
            <summary>
            Returns a tab at the specified visible position.
            </summary>
            <param name="positionInRow">The zero-based ordinal position  within the row.</param>
            <param name="rowNumber">The 1-based row number.</param>
            <returns>A tab at that position.</returns>
            <remarks>If there is no visible tab at the specified postion the last visible tab on the row will be returned.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemRowNumber(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the row number of the tab.
            </summary>
            <returns>The 1-based number of the row that includes this tab.</returns>
            <remarks>For <b>SingleRow...</b> <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/>s this will always return 1.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemSize(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the display size of the tab item.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemState(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the state of the tab item
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetUIElement(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the UIElement associated with the specified tab item
            </summary>
            <remarks>If the tab in not in view this method will return null.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.HitTest(System.Drawing.Point)">
            <summary>
            Checks the specified client location
            </summary>
            <param name="point">Client coordinates to evaluate</param>
            <returns>Returns a <b>TabHitTestInfo</b> including information about that tab at that point and whether a scroll operation should occur.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.InvalidateTabItem(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invalidates a tab item.
            </summary>
            <param name="tab">The tab to invalidate.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.IsTabItemInView(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Determines if a tab item is currently in view.
            </summary>
            <param name="tab">The tab in question.</param>
            <returns>True if the tab in currently in view.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MoveTabItem(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.RelativePosition)">
            <summary>
            Moves a tab's visible position.
            </summary>
            <param name="tab">The tab to move.</param>
            <param name="relativeTab">Relative tab</param>
            <param name="relativePosition">Position that the tab will be moved to relative to the <paramref name="relativeTab"/></param>
            <returns>False if the operation was cancelled or true if it succeeded.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ScrollTabs(Infragistics.Win.UltraWinTabs.ScrollType,System.Int32)">
            <summary>
            Performs a scrolling operation
            </summary>
            <param name="scrollType">The type of scrolling operation.</param>
            <param name="scrollIncrement">The number or tabs (or rows of tabs) to scroll.</param>
            <returns>False if the operation was cancelled or true if it succeeded.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabElementFromPoint(System.Drawing.Point)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UIElement"/> representing a tab at the specified location.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TranslateAlignment(Infragistics.Win.HAlign@,Infragistics.Win.VAlign@,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the specified horizontal and vertical alignments based on how the items is rotated.
            </summary>
            <param name="hAlign">Horizontal alignment to adjust</param>
            <param name="vAlign">Vertical alignment to adjust</param>
            <param name="vertical">True if the item will be displayed vertically</param>
            <param name="rotated">True if the item is rotated 180 degrees</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.AutoSelectTab(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the mouse is over a tab item for the specified <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.AutoSelectDelay"/>
            </summary>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CanSpin(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Indicates if there are tabs to scroll into view.
            </summary>
            <param name="direction">Direction of the scroll button.</param>
            <param name="spinButtonType">The type of spin button to evaluate</param>
            <returns>True if there are more visible tabs to scroll into view</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CloseButtonClick">
            <summary>
            Invoked when the close button is clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CreateNewTabAreaElement(Infragistics.Win.UIElement)">
            <summary>
            Creates a new instance of the UIElement for the tab area. 
            </summary>
            <param name="parentElement">The parent element.</param>
            <returns>The newly created tab area UIElement</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CreateDragManager">
            <summary>
            Invoked when a <see cref="T:Infragistics.Win.UltraWinTabs.TabDragManager"/> must be created to manage a drag operation
            </summary>
            <returns>A <see cref="T:Infragistics.Win.UltraWinTabs.TabDragManager"/> used to manage tab drag operations</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CreateScrollBarInfo">
            <summary>
            Invoked when a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo"/> object is needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DrawTabBorders(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the borders for the element should be rendered.
            </summary>
            <param name="drawParams">Draw params</param>
            <param name="tab"></param>
            <returns>True if the borders were rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DrawPropertyTab(Infragistics.Win.UltraWinTabs.TabOrientation,System.Drawing.Rectangle,Infragistics.Win.UIElementDrawParams@,System.Drawing.Color,Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Renders a property page style tab.
            </summary>
            <param name="side">Side where the tab is located</param>
            <param name="rect">Rectangle encompassing the tab</param>
            <param name="drawParams">Draw parameters</param>
            <param name="baseColor">Base color used to render the borders</param>
            <param name="tab">Tab item for which the border is being rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DrawVisualStudio2005Tab(Infragistics.Win.UltraWinTabs.TabOrientation,System.Drawing.Rectangle,Infragistics.Win.UIElementDrawParams@,System.Drawing.Color,Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Renders a VisualStudio2005 style tab.
            </summary>
            <param name="side">Side where the tab is located</param>
            <param name="rect">Rectangle encompassing the tab</param>
            <param name="drawParams">Draw parameters</param>
            <param name="baseColor">Base color used to render the borders</param>
            <param name="tab">Tab item for which the border is being rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetImageList(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the imagelist used to retreive the image for the specified tab
            </summary>
            <param name="tab">Tab whose associated imagelist should be returned</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetImageColorMapTable(Infragistics.Win.UltraWinTabs.ITabItem,System.Object)">
            <summary>
            Returns the color map used to remap colors in the tab images
            </summary>
            <param name="tab">Tab item for which the image</param>
            <param name="appearanceImage">Image property returned from the resolved Appearance data for the tab</param>
            <returns>A color map array of colors to remap or null</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabListItemImage(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the image for the specified tab
            </summary>
            <param name="tab">Tab whose associated image should be returned</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemUIElement(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElement,Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.TabState)">
            <summary>
            Gets a UIElement that will be used to render the tab.
            </summary>
            <param name="tab">This is the tab to be rendered.</param>
            <param name="parentElement">The parent toolbar element.</param>
            <param name="previousElement">This is used for re-use purposes. It may be null but if not it should be re-used if possible.</param>
            <param name="state">The state of the tab.</param>
            <returns>An instance of a class derived from <see cref="T:Infragistics.Win.UIElement"/>.</returns>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemUIElementType(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemUIElementType(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the type of element that will be used to render the tab.
            </summary>
            <returns>The type of a class derived from <see cref="T:Infragistics.Win.UIElement"/>.</returns>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabItemUIElement(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UIElement,Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.TabState)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.IsScrollButtonNeeded">
            <summary>
            Indicates whether a scroll button is needed based on the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ScrollButtons"/> and the amount of space required to display the items.
            </summary>
            <returns>True if a scroll button should be displayed.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseEnterTab(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the mouse has entered the bounds of a tab item element
            </summary>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseLeaveTab(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the mouse has left the bounds of a tab item element.
            </summary>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseDownTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is pressed on the tab element.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.AfterMouseDownTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is pressed on the tab element.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseHoverTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Invoked when the mouse hovers over a tab item element.
            </summary>
            <param name="element">UIElement that mouse was over</param>
            <param name="tab">Associated tab</param>
            <param name="isAllTextRendered">True if the tab's text was rendered completely</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseMoveTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse moves over the tab element.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseUpTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is released on the tab element.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.DoubleClickTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the tab item element is double clicked.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ClickTab(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the mouse is pressed and released on the tab element.
            </summary>
            <param name="element">Element representing the tab item</param>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseMoveTabGroup(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the group has capture and the mouse has been moved.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.MouseUpTabGroup(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the group element has capture and the mouse is released.
            </summary>
            <param name="e">MouseEventArgs</param>
            <returns>True to prevent further processing.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveCloseButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.UIElementButtonState)">
            <summary>
            Resolves the appearance for the tab close button.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
            <param name="buttonState">Current state of the button element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveScrollButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the tab scroll buttons.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked when the appearance for the scroll track should be resolved.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked when the appearance for the scroll thumb should be resolved.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveScrollBarAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked when the appearance for the scroll bar should be resolved.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.ResolveTabListButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,Infragistics.Win.UIElementButtonState)">
            <summary>
            Resolves the appearance for the tab list button.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
            <param name="buttonState">Current state of the button element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.Spin(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Scrolls a tab into view based on the direction specified.
            </summary>
            <param name="direction">Direction to scroll</param>
            <param name="spinButtonType">Type of spin operation to perform</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabClick(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Invoked when the tab has been clicked
            </summary>
            <param name="tab">Associated tab</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.VerifyAllItemsInView">
            <summary>
            Verifies all currently displayed items.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.VerifyMetrics">
            <summary>
            Recalculates metrics if necessary.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.GetTabArea">
            <summary>
            Returns the amount of visible area available for the tabs.
            </summary>
            <returns>The size of the visible area based on the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.TabAreaSize"/></returns>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanging">
            <summary>
            Occurs before the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItem"/> is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanged">
            <summary>
            Occurs after the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItem"/> has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoving">
            <summary>
            Occurs before a tab is moved.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoved">
            <summary>
            Occurs after a tab has been moved.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.TabScrolling">
            <summary>
            Occurs before tabs are scrolled.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled">
            <summary>
            Occurs after tabs are scrolled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.FirstDisplayedTabItem">
            <summary>
            Returns/sets the first tab the is currently visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem">
            <summary>
            Returns the first <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <remarks>
            If no tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> property set to true then the first tab whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true will be returned. If no tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem">
            <summary>
            Returns the first <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.HotTrackTabItem">
            <summary>
            Returns the current hot tracked tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.IsDragging">
            <summary>
            Indicates if a drag operation is in progress
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem">
            <summary>
            Returns the last <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> and <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> properties are both true. 
            </summary>
            <remarks>
            If no tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Enabled"/> property set to true then the last tab whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true will be returned. If no tab has its <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property set to true then null is returned.
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.LastVisibleTabItem">
            <summary>
            Returns the last <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> object in the collection whose <see cref="P:Infragistics.Win.UltraWinTabs.ITabItem.Visible"/> property is true. 
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstVisibleTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.FirstSelectableTabItem"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabManager.LastSelectableTabItem"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetNextVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousSelectableTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
            <seealso cref="M:Infragistics.Win.UltraWinTabs.TabManager.GetPreviousVisibleTabItem(Infragistics.Win.UltraWinTabs.ITabItem)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.MultiRowSelectionStyleResolved">
            <summary>
            Returns the resolved multi row selection style.
            </summary>
            <remarks>Will never return 'DefaultForStyle'.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ScrollArrowStyleResolved">
            <summary>
            Returns the style of scroll buttons displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ScrollButtonAreaSize">
            <summary>
            Returns the size of the scroll button area.   
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ScrollButtonTypesResolved">
            <summary>
            Returns the resolved value indicating which scroll buttons to display.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ScrollButtonStyleResolved">
            <summary>
            Returns the resolved border style for scroll arrow and close button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItem">
            <summary>
            Returns/sets the currently selected Tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabAreaSize">
            <summary>
            Returns the size of the tab area.   
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabButtonStyleResolved">
            <summary>
            Returns the resolved border style for button style tabs.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabOrientationResolved">
            <summary>
            Returns the resolved orientation for the tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabPageBorderStyle">
            <summary>
            Returns the border style for the tab page area (based on the <see cref="P:Infragistics.Win.UltraWinTabs.ITabProvider.Style"/> setting.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TextOrientationResolved">
            <summary>
            Returns the resolved orientation of the tab text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabRowCount">
            <summary>
            Returns the number of tab rows
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabRowHeight">
            <summary>
            Returns the height of a row of tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.VisibleTabRowCount">
            <summary>
            Returns the number of tab rows that are actually visible
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.InterTabSpacingResolved">
            <summary>
            Returns the resolved amount of space between tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.AllowClose">
            <summary>
            Determines close button element is enabled.
            </summary>
            <remarks>
            <p class="body">Clicking the close button element should hide/close the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItem"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.DefaultSelectedTabItem">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> to select when <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItem"/> is null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.DragManager">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinTabs.TabDragManager"/> instance that manages the drag operations for the TabManager
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ButtonAlignment">
            <summary>
            Returns the alignment of the buttons with respect to the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.TabOrientationResolved"/>
            </summary>
            <remarks>
            <p class="body">By default, the buttons are aligned adjacent to the client area. e.g. If the TabOrientation is 
            set to TopLeft, the scroll and close buttons are aligned at the bottom edge of the tabs.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ScrollTrackExtentResolved">
            <summary>
            Returns the resolved extent for the scroll track.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ShowPartialTabs">
            <summary>
            Specifies whether partial tabs should be displayed. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ShowTabListButton">
            <summary>
            Specifies whether the Visual Studio 2005 style Tab List Button
            should be displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabBorderSides">
            <summary>
            Returns the border sides that need to be rendered for tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabBorderWidths">
            <summary>
            Returns the border widths for a tab
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabProvider">
            <summary>
            The tabProvider of the tabs.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ToolTipProvider">
            <summary>
            Returns the class providing the tool tip information.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.IsVerticalText">
            <summary>
            Indicates if the tab caption is rendered vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.IsRotatedText">
            <summary>
            Indicates if the tab caption is rotated 180 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.ButtonSize">
            <summary>
            Returns the size of the scroll and close buttons
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.DisplayTabClientEdge">
            <summary>
            Indicates if the line between the tabs and the tab client area should be rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SelectTabHeightIncrease">
            <summary>
            Returns the extra height given to the selected tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabOverlapBefore">
            <summary>
            The amount before the tab that the selected tab extends
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabOverlapAfter">
            <summary>
            The amount after the tab that the selected tab extends
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SpaceBeforeTabs">
            <summary>
            Returns the amount of space in the visible area before the tabs.
            </summary>
            <returns>Returns the amount of pixels on the left to leave before the tabs start</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SpaceAfterTabs">
            <summary>
            Returns the amount of space in the visible area after the tabs.
            </summary>
            <returns>Returns the amount of pixels after the tabs</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabAreaMargins">
            <summary>
            Returns a <see cref="T:Infragistics.Win.Margins"/> instance that indicates the amount of space between the edge of the tab area and the elements within it.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabLineHeight">
            <summary>
            Returns the height of the line rendered on the side of the tab opening.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabListContextMenuStyle">
            <summary>
            Returns the Menu Style tab list context menu.  Should be overriden in derived class.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangingEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanging"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanged"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoving"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoved"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.CancelableTabItemEventArgs">
            <summary>
            Event parameters used for cancelable events that pass in an <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> as an argument.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.CancelableTabItemEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.CancelableTabItemEventArgs.TabItem">
            <summary>
            The toolbar.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemEventArgs">
            <summary>
            Event parameters used for non-cancelable events that pass in an <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> as an argument.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemEventArgs.TabItem">
            <summary>
            The tab.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanged"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanged"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanging"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventArgs.PreviousSelectedTabItem">
            <summary>
            The tab that was selected previously.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangingEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanging"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanged"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChanging"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangedEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.SelectedTabItemChangingEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoved"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoved"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoving"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.RelativePosition)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs"/>
            </summary>
            <param name="tab">Tab that was repositioned</param>
            <param name="relativeTab">Tab that the <paramref name="tab"/> was repositioned relative to.</param>
            <param name="relativePosition">Position relative to the <paramref name="relativeTab"/> that the <paramref name="tab"/> was repositioned</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs.RelativeTab">
            <summary>
            The tab that the tab being moved is adjacent to.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs.RelativePosition">
            <summary>
            The position relative to the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovedEventArgs.RelativeTab"/> that the repositioned tab was placed at.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoving"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoved"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabItemMoving"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.RelativePosition)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs"/>
            </summary>
            <param name="tab">Tab being repositioned</param>
            <param name="relativeTab">Tab that the <paramref name="tab"/> will be repositioned relative to.</param>
            <param name="relativePosition">Position relative to the <paramref name="relativeTab"/> that the <paramref name="tab"/> will be repositioned</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs.RelativeTab">
            <summary>
            The tab that the tab being moved will be adjacent to.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs.RelativePosition">
            <summary>
            The position relative to the <see cref="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemMovingEventArgs.RelativeTab"/> that the tab will be moved to.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject">
            <summary>
            The Accessible object for a tab.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.#ctor(Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.GetFocused">
            <summary>
            Retrieves the object that has the keyboard focus.
            </summary>
            <returns>An AccessibleObject that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (Nothing in Visual Basic) if no object has focus.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
            <returns>A control to be used to synchronize accessibility calls.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.GetSelected">
            <summary>
            Retrieves the currently selected child.
            </summary>
            <returns>An AccessibleObject that represents the currently selected child. This method returns the calling object if the object itself is selected. Returns a null reference (Nothing in Visual Basic) if is no child is currently selected and the object itself does not have focus.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An AccessibleObject that represents the child object at the given screen coordinates. This method returns the calling object if the object itself is at the location specified. Returns a null reference (Nothing in Visual Basic) if no object is at the tested location.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation"/> values.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the <see cref="T:System.Windows.Forms.AccessibleSelection"/> values.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Name">
            <summary>
            The accessible name for the data area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.Value">
            <summary>
            Returns the tab's description
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.TabItem">
            <summary>
            Returns the associated tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabManager.TabItemAccessibleObject.TabManager">
            <summary>
            Returns the associated tab.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabInfo"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.Infragistics#Win#UltraWinTabs#ITabProvider#GetTabItemState(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Returns the state of the tab item
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.Infragistics#Win#UltraWinTabs#ITabProvider#GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
            <returns>A control to be used to synchronize accessibility calls.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.Infragistics#Win#UltraWinTabs#ITabProvider#GetTabParentAccessibleObject">
            <summary>
            Gets the Accessible Object of that parent of the tabs.
            </summary>
            <returns>Returns the Accessible Object of that parent of the tabs. </returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ShouldSerializeSettings">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings"/> property needs to be serialized.
            </summary>
            <returns>True if the <see cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings"/> needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ResetSettings">
            <summary>
            Resets the contents of the <see cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings"/> object to their default values.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ShouldSerializeTabs">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Tabs"/> property needs to be serialized.
            </summary>
            <returns>True if the <see cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Tabs"/> property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabInfo.Tabs"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ResetTabs">
            <summary>
            Resets the contents of the tabs collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.GetFirstVisibleTab(System.Boolean)">
            <summary>
            Returns the first visible tab in the collection.
            </summary>
            <param name="ensureTabIsEnabled">True if disabled tabs should be skipped</param>
            <returns>The first visible tab or null if there are no visible tabs</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.GetLastVisibleTab(System.Boolean)">
            <summary>
            Returns the last visible tab in the collection.
            </summary>
            <param name="ensureTabIsEnabled">True if disabled tabs should be skipped</param>
            <returns>The last visible tab or null if there are no visible tabs</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.GetNextVisibleTab(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the visible tab immediately following the specified tab.
            </summary>
            <param name="tab">Tab to begin the search</param>
            <param name="ensureTabIsEnabled">True if disabled tabs should be skipped</param>
            <returns>The next visible tab or null if there are no visible tabs after the specified tab</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.GetPreviousVisibleTab(Infragistics.Win.UltraWinTabs.ITabItem,System.Boolean)">
            <summary>
            Returns the visible tab immediately preceeding the specified tab.
            </summary>
            <param name="tab">Tab to begin the search</param>
            <param name="ensureTabIsEnabled">True if disabled tabs should be skipped</param>
            <returns>The previous visible tab or null if there are no visible tabs before the specified tab</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ResolveTabItemAreaAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the tab item area.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.Reset">
            <summary>
            Resets the object to its default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.ShouldSerialize">
            <summary>
            Indicates if the object needs to be serialized.
            </summary>
            <returns>True if any of the properties differ from their default values.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.SelectTab(Infragistics.Win.UltraWinTabs.SelectTabDirection)">
            <summary>
            Selects a tab based on the specified direction.
            </summary>
            <param name="direction">Identifies which pane should be selected</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the items in the list using the specified comparer
            </summary>
            <param name="comparer"><see cref="T:System.Collections.IComparer"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabInfo.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a subobject.
            </summary>
            <param name="propChange">Object containing information about the change.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabInfo.Settings">
            <summary>
            Gets/sets the settings for the tab items collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabInfo.Tabs">
            <summary>
            Returns the collection of tab items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabInfo.AvailableSize">
            <summary>
            Stores the size available for the tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabInfo.AssociatedControl">
            <summary>
            This member supports the <see cref="T:Infragistics.Win.UltraWinTabs.TabInfo"/> and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabInfo.BaseFont">
            <summary>
            This member supports the <see cref="T:Infragistics.Win.UltraWinTabs.TabInfo"/> and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement">
            <summary>
            UIElement for a button style tab item.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
            <param name="tab">Associated tab</param>
            <param name="tabManager">The associated manager.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.GetBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Returns the widths of all four borders
            </summary>
            <param name="style"><see cref="T:Infragistics.Win.UIElementBorderStyle"/></param>
            <param name="sides"><see cref="T:System.Windows.Forms.Border3DSide"/></param>
            <returns><see cref="T:Infragistics.Win.UIElementBorderWidths"/></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseEnter">
            <summary>
            Invoked when the mouse is moved over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseLeave">
            <summary>
            Invoked when the mouse is moved out of the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnDispose">
            <summary>
            Invoked when element is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseHover">
            <summary>
            Invoked when the mouse has hovered over the element for a specified period of time.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnCheckStateChange">
            <summary>
            Invoked when the checked state of the button has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the borders for the element should be rendered.
            </summary>
            <param name="drawParams">Draw params</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Invoked when the user double clicks on an element.
            </summary>
            <param name="adjustableArea">True if the area of the element that was double clicked was an adjustable area.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is release over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
            <returns>True to prevent further processing.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnClick">
            <summary>
            Invoked when the mouse is released over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Invoked when the mouse is pressed on the element.
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the area pressed is an adjustable area</param>
            <param name="captureMouseForElement">By ref argument used to set the element that will capture the mouse</param>
            <returns>True if further processing should be prevented</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.OnButtonStateChange">
            <summary>
            Invoked when the state of the button changes.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.TabItem">
            <summary>
            Gets/sets the tab item associated with the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.TabManager">
            <summary>
            Returns the owning <see cref="T:Infragistics.Win.UltraWinTabs.TabManager"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.ButtonStyle">
            <summary>
            Returns the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.CancelCaptureOnEscape">
            <summary>
            Indicates if capture is cancelled when the escape key is pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.WantsMouseHoverNotification">
            <summary>
            Indicates if the element wants to receive mouse hover notifications.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.Enabled">
            <summary>
            Gets/sets the enabled state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.CanClickButton">
            <summary>
            Indicates if the button's state may be changed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.BorderSides">
            <summary>
            Returns flags indicating which borders will be drawn
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemButtonUIElement.DrawsFocusRect">
            <summary>
            Returns true if a focus rect should be drawn.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabItemsCollection">
            <summary>
            Interface implemented by an object managing a group of tab items.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.#ctor(Infragistics.Win.UltraWinTabs.TabInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabItemsCollection"/>
            </summary>
            <param name="tabInfo">Owning tab info object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.#ctor(Infragistics.Win.UltraWinTabs.TabInfo,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabItemsCollection"/> with the specified initial capacity
            </summary>
            <param name="initialCapacity">Initial capacity for the collection</param>
            <param name="tabInfo">Owning tab info object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.IndexOf(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Gets the index of the item in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>The index in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.Contains(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Sees if the item is in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.CopyTo(Infragistics.Win.UltraWinTabs.ITabItem[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="itemArray">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.Add(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Adds the specified tab item to the collection.
            </summary>
            <param name="tab">Tab item to add to the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.AddRange(Infragistics.Win.UltraWinTabs.ITabItem[])">
            <summary>
            Adds the specified tabs to the collection.
            </summary>
            <param name="tabs">Array of tabs to add to the collection</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.Remove(Infragistics.Win.UltraWinTabs.ITabItem)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.Insert(Infragistics.Win.UltraWinTabs.ITabItem,System.Int32)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="tab">Item to insert into the collection</param>
            <param name="index">Index at which the item should be inserted.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a subobject.
            </summary>
            <param name="propChange">Object containing information about the change.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemsCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Interface implemented by an object managing a group of tab items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.TabInfo">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.TabInfo"/> object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.IsReadOnly">
            <summary>
            Indicates if the collection is readonly.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.InitialCapacity">
            <summary>
            Returns the initial capacity for the colleciton.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> at the specified index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemsCollection.VisibleItemsCount">
            <summary>
            Returns the count of visible items in the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabItemUIElement">
            <summary>
            UIElement for displaying a single tab item.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.ITabItem,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabItemUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
            <param name="tab">Tab item to be rendered.</param>
            <param name="tabManager">The associated manager.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.DrawFocus(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Default drawfocus method draws a focus rect inside the
            element's borders
            </summary>
            <param name="drawParams"><see cref="T:Infragistics.Win.UIElementDrawParams"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.GetBorderWidths(Infragistics.Win.UIElementBorderStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Returns the widths of all four borders
            </summary>
            <param name="style"><see cref="T:Infragistics.Win.UIElementBorderStyle"/></param>
            <param name="sides"><see cref="T:System.Windows.Forms.Border3DSide"/></param>
            <returns><see cref="T:Infragistics.Win.UIElementBorderWidths"/></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseEnter">
            <summary>
            Invoked when the mouse is moved over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseLeave">
            <summary>
            Invoked when the mouse is moved out of the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Invoked when the mouse is pressed on the element.
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if the area pressed is an adjustable area</param>
            <param name="captureMouseForElement">By ref argument used to set the element that will capture the mouse</param>
            <returns>True if further processing should be prevented</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the borders for the element should be rendered.
            </summary>
            <param name="drawParams">Draw params</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnDispose">
            <summary>
            Invoked when element is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseHover">
            <summary>
            Invoked when the mouse has hovered over the element for a specified period of time.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnClick">
            <summary>
            Invoked when the mouse is released over the element.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnDoubleClick(System.Boolean)">
            <summary>
            Invoked when the user double clicks on an element.
            </summary>
            <param name="adjustableArea">True if the area of the element that was double clicked was an adjustable area.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is release over the element.
            </summary>
            <param name="e">Mouse event arguments</param>
            <returns>True to prevent further processing.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Draws the themed background for a progress bar.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element could be rendered using the system themes.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.Contains(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if the point is over the element. This may be 
            overridden in derived classes for specialized hit test logic.
            </summary>
            <param name="point">In client coordinates</param>
            <param name="ignoreClipping">Specifieds if we should ignore clipping or not</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.Invalidate(System.Boolean)">
            <summary>
            Invalidates this element
            </summary>
            <param name="update">True to force an immediate update</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabItemUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.TabItem">
            <summary>
            Gets/sets the tab item associated with the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.TabManager">
            <summary>
            Returns the owning <see cref="T:Infragistics.Win.UltraWinTabs.TabManager"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.BorderStyle">
            <summary>
            Gets/sets the border style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.CancelCaptureOnEscape">
            <summary>
            Indicates if capture is cancelled when the escape key is pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.WantsMouseHoverNotification">
            <summary>
            Indicates if the element wants to receive mouse hover notifications.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.Enabled">
            <summary>
            Gets/sets the enabled state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.BorderSides">
            <summary>
            Returns flags indicating which borders will be drawn
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.DrawsFocusRect">
            <summary>
            Returns true if a focus rect should be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.ClipSelf">
            <summary>
            Returning true causes all drawing of this element to be expicitly clipped
            to its region
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.Region">
            <summary>
            Returns the region of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabItemUIElement.ChildElementRect">
            <summary>
            Returns the rectangle to use when positioning the child elements
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabLineUIElement">
            <summary>
            UIElement used to display the line rendered between the tab items and the client area.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes	a new <b>TabLineUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
            <param name="tabManager">TabManager object associated with the line being rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.Reset(Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Reinitializes the values of the tab info and line type
            </summary>
            <param name="tabManager">TabManager object associated with the line being rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Used to render the lines for the edge of the tab client area.
            </summary>
            <param name="drawParams">Draw parameters</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.DrawLine(Infragistics.Win.UIElementDrawParams@,System.Drawing.Pen,Infragistics.Win.UltraWinTabs.TabOrientation,System.Drawing.Rectangle)">
            <summary>
            Draws the tab line using the specified color and location.
            </summary>
            <param name="drawParams">Draw parameters</param>
            <param name="pen">Pen used to draw the line</param>
            <param name="tabOrientation">Location of the line</param>
            <param name="rect">Rectangle within which the line will be rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Used to prevent the backcolor from rendering for the tab line
            </summary>
            <param name="drawParams">Draw parameters</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.DrawImageBackground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Used to prevent the background image from rendering for the tab line
            </summary>
            <param name="drawParams">Draw parameters</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabLineUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overriden. Draws the themed background for a progress bar.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element could be rendered using the system themes.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabClientAreaEdgeUIElement">
            <summary>
            UIElement used to display the area between the tab line and the tab contents.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabClientAreaEdgeUIElement.#ctor(Infragistics.Win.UltraWinTabs.TabGroupUIElement,Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Initializes	a new <b>TabClientAreaEdgeUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
            <param name="tabManager">TabManager object associated with the line being rendered</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabClientAreaEdgeUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">Structure to update with the appearance information</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabClientAreaEdgeUIElement.Reset(Infragistics.Win.UltraWinTabs.TabManager)">
            <summary>
            Reinitializes the associated tab manager.
            </summary>
            <param name="tabManager">TabManager object associated with the client area being rendered</param>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabListButtonUIElement">
            <summary>
            TabListButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabListButtonUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the tab list button element.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.ButtonClick">
            <summary>
            Invoked when the button has been clicked.
            </summary>
            <returns>True will prevent the base implementation from being invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Overrides the rendering of the tab list button.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the UIElement.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the UIElement.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.TabManager">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.TabManager"/> object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the tab list button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.Enabled">
            <summary>
            Gets/sets the enabled state of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object that represents the element or its associated object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabListButtonUIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrollingEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolling"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrolledEventHandler">
            <summary>
            Delegate for handling the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrolledEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabScrolledEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrolledEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ScrollType,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrolledEventArgs.ScrollType">
            <summary>
            Returns the type of scroll (next, previous, first, last etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrolledEventArgs.ScrollIncrement">
            <summary>
            Returns the how much was scrolled. For single row <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/>s this is the number of tabs that were scrolled. For multi-row <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/>s this is the number of tab rows that were scrolled.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrollingEventArgs">
            <summary>
            Event parameters used for the <see cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolling"/> event.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolled"/>
            <seealso cref="F:Infragistics.Win.UltraWinTabs.TabManager.TabScrolling"/>
            <seealso cref="T:Infragistics.Win.UltraWinTabs.TabScrolledEventHandler"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollingEventArgs.#ctor(Infragistics.Win.UltraWinTabs.ScrollType,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollingEventArgs.ScrollType">
            <summary>
            Returns the type of scroll operation that is being performed (e.g. next, previous, first, last etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollingEventArgs.ScrollIncrement">
            <summary>
            Returns the number of increments that are being scrolled. For single row <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/>s this determines the number of tabs to scroll. For multi-row <see cref="T:Infragistics.Win.UltraWinTabs.TabLayoutStyle"/>s this determines the number of tab rows to scroll.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabPropertyIds">
            <summary>
            Enumeration of property ids for the tab related classes
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabItem">
            <summary>
            TabItem
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Text">
            <summary>
            Text property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ToolTip">
            <summary>
            ToolTip property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Appearance">
            <summary>
            Appearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.HotTrackAppearance">
            <summary>
            HotTrackAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.SelectedAppearance">
            <summary>
            SelectedAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabWidth">
            <summary>
            TabWidth property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Appearances">
            <summary>
            Appearances property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.HotTracking">
            <summary>
            HotTracking property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabAreaAppearance">
            <summary>
            TabAreaAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabSizing">
            <summary>
            TabSizing property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.SelectedTabIndex">
            <summary>
            SelectedTabIndex property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.FirstDisplayedTabIndex">
            <summary>
            FirstDisplayedTabIndex property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.FirstDisplayedTab">
            <summary>
            FirstDisplayedTab property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.SelectedTab">
            <summary>
            SelectedTab property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Visible">
            <summary>
            Visible property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Settings">
            <summary>
            Settings property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Tabs">
            <summary>
            Tabs property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabInfo">
            <summary>
            TabInfo property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabButtonStyle">
            <summary>
            TabButtonStyle property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabStyle">
            <summary>
            TabStyle property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ShowToolTips">
            <summary>
            ShowToolTips property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.AutoSelect">
            <summary>
            AutoSelect property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.AutoSelectDelay">
            <summary>
            AutoSelectDelay property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.SelectedTabAppearance">
            <summary>
            SelectedTabAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.HotTrackTabAppearance">
            <summary>
            HotTrackTabAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabAppearance">
            <summary>
            TabAppearance property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabLocation">
            <summary>
            TabLocation property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ShowCloseButton">
            <summary>
            ShowCloseButton property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ScrollButtons">
            <summary>
            ScrollButtons property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ShowButtonSeparators">
            <summary>
            ShowButtonSeparators property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.InterTabSpacing">
            <summary>
            InterTabSpacing property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.CaptionOrientation">
            <summary>
            CaptionOrientation property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ButtonStyle">
            <summary>
            ButtonStyle property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabItemSize">
            <summary>
            TabItemSize
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabHeight">
            <summary>
            TabHeight property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ImageSize">
            <summary>
            ImageSize property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ScaleImages">
            <summary>
            ScaleImages property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.HotkeyPrefix">
            <summary>
            HotkeyPrefix property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ImageList">
            <summary>
            ImageList property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.ScrollArrowStyle">
            <summary>
            ScrollArrowStyle property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.Padding">
            <summary>
            Padding property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.TabsPerRow">
            <summary>
            TabsPerRow property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabPropertyIds.MaxTabWidth">
            <summary>
            <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.MaxTabWidth"/> property
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabRowUIElement">
            <summary>
            UIElement representing a row of tab items
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabRowUIElement.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabRowUIElement"/>
            </summary>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabRowUIElement.Contains(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if the point is over the element. This may be 
            overridden in derived classes for specialized hit test logic.
            </summary>
            <param name="point">In client coordinates</param>
            <param name="ignoreClipping">Specifieds if we should ignore clipping or not</param>
            <returns>Returns true if the point is over the element.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabRowUIElement.ContinueDescendantSearch(System.Type,System.Object[])">
            <summary>
            This method is called from <see cref="M:Infragistics.Win.UIElement.GetDescendant(System.Type,System.Object[])"/> as an optimization to
            prevent searching down element paths that can't possibly contain the
            element that is being searched for. 
            </summary>
            <seealso cref="M:Infragistics.Win.UIElement.ContinueDescendantSearch(System.Type,System.Object[])"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabRowUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabRowUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Renders the backcolor for the element.
            </summary>
            <param name="drawParams">UIElementDrawParams struct providing information regarding the drawing operation.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabRowUIElement.TabManager">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabRowUIElement.TabManager"/> object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabRowUIElement.ClipChildren">
            <summary>
            Indicates if the child elements should be clipped to the parent element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabRowUIElement.FirstDisplayedTabItem">
            <summary>
            Returns the first <see cref="T:Infragistics.Win.UltraWinTabs.ITabItem"/> displayed in the row.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement">
            <summary>
            TabScrollButtonUIElement
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.#ctor(System.Windows.Forms.Orientation,Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement"/>
            </summary>
            <param name="orientation">Orientation of the spin buttons</param>
            <param name="parent">Parent element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.#ctor(System.Windows.Forms.Orientation,Infragistics.Win.UIElement,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement"/>
            </summary>
            <param name="orientation">Orientation of the spin buttons</param>
            <param name="parent">Parent element</param>
            <param name="autoRepeatDelay">Interval between click event when holding down the mouse button over the element.</param>
            <param name="initialDelay">Interval before initiating the first autorepeat click.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.SpinButtonClick(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to notify that the spin button's click has fired.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="spinButtonType">The type of spin button clicked</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.CanSpin(System.Windows.Forms.ScrollButton,Infragistics.Win.SpinButtonTypes)">
            <summary>
            Used to determine whether a spin button should be disabled during a spin operation and
            when the elements are positioned.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="spinButtonType">The type of spin button to evaluate</param>
            <returns>A boolean indicating whether the button should be enabled or disabled.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance for the scroll button elements.
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to initialize</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.DrawThemedSpinButton(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the <see cref="M:Infragistics.Win.SpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)"/> method is invoked to allow the spin button owner to render the individual buttons
            </summary>
            <param name="drawParams">UIElementDrawParams structure</param>
            <returns>True if the draw operation was handled</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.DrawSpinButtonForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Invoked when the <see cref="M:Infragistics.Win.SpinScrollButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)"/> method is invoked to allow the spin button owner to render the individual buttons
            </summary>
            <param name="drawParams">UIElementDrawParams structure</param>
            <returns>True if the draw operation was handled</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.PositionChildElements">
            <summary>
            Handles the creation and positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.GetContainedElementExtent(System.Int32,System.Int32)">
            <summary>
            Returns the extent of the element to contain within the spin buttons
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the UIElement.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject"/> for the UIElement.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.TabManager">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.TabManager"/> object
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.ButtonStyle">
            <summary>
            Determines the button style of the spin buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.ContainedElement">
            <summary>
            Returns the element to contain within the spin buttons
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object that represents the element or its associated object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabScrollButtonUIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinTabs.TabSettings">
            <summary>
            Class representing the settings for a <see cref="T:Infragistics.Win.UltraWinTabs.TabItemsCollection"/>
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSettings.TabWidthDefault">
            <summary>
            Default value for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabWidth"/>
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabWidth"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinTabs.TabSettings.TabHeightDefault">
            <summary>
            Default value for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabHeight"/>
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabHeight"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinTabs.TabSettings"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializeTabAreaAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetTabAreaAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializeTabAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetTabAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializeSelectedTabAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetSelectedTabAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializeHotTrackTabAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetHotTrackTabAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializedInterTabSpacing">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing"/> property needs to be serialized.
            </summary>
            <returns>True if the value of the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing"/> property differs from the default value</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetInterTabSpacing">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializedImageSize">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize"/> property needs to be serialized.
            </summary>
            <returns>True if the value of the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize"/> property differs from the default value</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetImageSize">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerializedPadding">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding"/> property needs to be serialized.
            </summary>
            <returns>True if the value of the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding"/> property differs from the default value</returns>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ResetPadding">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property has changed on a subobject.
            </summary>
            <param name="propChange">Object containing information about the change.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.Reset">
            <summary>
            Resets the object to its default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinTabs.TabSettings.ShouldSerialize">
            <summary>
            Indicates if the object needs to be serialized.
            </summary>
            <returns>True if any of the properties differ from their default values.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.Appearances">
            <summary>
            Gets/sets the appearances collection used by the collection and items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTracking">
            <summary>
            Gets/sets whether hot tracking is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance">
            <summary>
            Gets/sets the appearance for the area behind the tabs.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HasTabAreaAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the Appearance object for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAreaAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabSizing">
            <summary>
            Gets/sets the sizing used for the tab items.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabSizingResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabSizingResolved">
            <summary>
            Returns the resolve sizing mode for the tabs
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabSizing"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabButtonStyle">
            <summary>
            Gets/sets the style of button to render for a Buttons style tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabStyle">
            <summary>
            Gets/sets the style of tab to render.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabStyleResolved">
            <summary>
            Returns the resolved TabStyle
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ShowToolTips">
            <summary>
            Gets/sets if tooltips should be displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelect">
            <summary>
            Gets/sets if the tab should be selected automatically when the mouse is over an item.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelectDelay"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelectResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelectResolved">
            <summary>
            Returns the resolved <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelect"/> value
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelect"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelectDelay">
            <summary>
            Gets/sets the delay before a tab is automatically selected when the mouse is over the item.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelect"/>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.AutoSelectResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance">
            <summary>
            Gets/sets the default appearance for the selected tab
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HasTabAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the Appearance object for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance">
            <summary>
            Gets/sets the default appearance for the selected tab
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HasSelectedTabAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the Appearance object for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.SelectedTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance">
            <summary>
            Gets/sets the default appearance for the tab item under the mouse.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HasHotTrackTabAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the Appearance object for the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinTabs.TabSettings.HotTrackTabAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabLocation">
            <summary>
            Gets/sets the location of the tabs
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ShowCloseButton">
            <summary>
            Gets/sets whether a close button is displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ScrollButtons">
            <summary>
            Gets/sets when scroll buttons are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ShowButtonSeparators">
            <summary>
            Gets/sets whether separators are rendered between button style tabs.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.InterTabSpacing">
            <summary>
            Gets/sets the amount of spacing between tab items.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabWidth">
            <summary>
            Gets/sets the default fixed width size for the tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.CaptionOrientation">
            <summary>
            Gets/sets the orientation of the tab caption.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.CaptionOrientationResolved">
            <summary>
            Returns the resolved orientation of the tab caption.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.IsVerticalTab">
            <summary>
            Indicates if the tab is displayed vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.IsVerticalCaption">
            <summary>
            Indicates if the tab caption is rendered vertically.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.IsRotatedCaption">
            <summary>
            Indicates if the tab caption is rotated 180 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ButtonStyle">
            <summary>
            Gets/sets the style of button to render for the scroll arrows and close button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabHeight">
            <summary>
            Gets/sets the height of the tabs.
            </summary>
            <remarks>When set to -1, the value is based on the size of the tab items.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ScaleImages">
            <summary>
            Gets/sets when images should be scaled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageSize">
            <summary>
            Gets/sets the size of the images for the tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.HotkeyPrefix">
            <summary>
            Determines how mnemonics in the caption are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ImageList">
            <summary>
            Gets/sets the imagelist used to obtain images for the appearances.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.ScrollArrowStyle">
            <summary>
            Gets/sets the style of scroll buttons displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.Padding">
            <summary>
            Gets/sets the amount of padding around the image and text of the tab.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.TabsPerRow">
            <summary>
            Gets/sets the number of tabs to be displayed in the visible area.
            </summary>
            <remarks>
            <p class="note">Note: This property is only used when the <see cref="P:Infragistics.Win.UltraWinTabs.TabSettings.TabSizing"/> is set to <b>TabsPerRow</b></p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinTabs.TabSettings.MaxTabWidth">
            <summary>
            Returns or sets the maximum width for a tab item.
            </summary>
            <remarks>
            <p class="body">The <b>MaxTabWidth</b> determines the maximum width for a single tab item. When set to 0, the default value, the tab has no maximum size.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.IUIElementTextProvider">
            <summary>
            This is used by the DependentTextUIElement class to 
            get necessary information for rendering text
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.GetText(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Gets the text to display
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.IsMultiLine(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns true for multiline text
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.GetTextPadding(Infragistics.Win.DependentTextUIElement,System.Drawing.Size@)">
            <summary>
            Returns the padding around the text
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.AdjustTextDisplayRect(Infragistics.Win.DependentTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the text's rect for special cases (e.g. a button down shift)
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.IsVertical(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns true if the text is to be displayed vertically
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.HotkeyPrefix(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Determines how mnemonics in the text are rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IUIElementTextProvider.WrapText(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns true if the text is to be wrapped
            </summary>
        </member>
        <member name="T:Infragistics.Win.TextProviderBase">
            <summary>
            Abstract base class for text providers. Implements most methods
            with default implementations
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.#ctor(Infragistics.Win.UIElement)">
            <summary>
            Contsructor, initializes a new instance of the <b>TextProviderBase</b> class.
            </summary>
            <param name="element">Parent UIElement</param>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.GetBorderStyle(Infragistics.Win.UIElement)">
            <summary>
            Returns the border style none
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.GetBorderSides(Infragistics.Win.UIElement)">
            <summary>
            Returns 0
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.GetCursor(Infragistics.Win.UIElement)">
            <summary>
            Returns the parent element's cursor
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.InitElementAppearance(Infragistics.Win.UIElement,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.IsMultiLine(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.GetTextPadding(Infragistics.Win.DependentTextUIElement,System.Drawing.Size@)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.AdjustTextDisplayRect(Infragistics.Win.DependentTextUIElement,System.Drawing.Rectangle@)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.IsVertical(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.WrapText(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Returns true if the text is to be wrapped.
            </summary>
            <remarks>
            The default implementation returns true for multi-line text and false for single-line text.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.GetText(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Abstract method
            </summary>
        </member>
        <member name="M:Infragistics.Win.TextProviderBase.HotkeyPrefix(Infragistics.Win.DependentTextUIElement)">
            <summary>
            Determines whether mnemonics in the text are rendered.
            </summary>
            <param name="element">Dependent uielement</param>
            <returns>HotkeyPrefix.None by default to indicate that the text should be rendered as is.</returns>
        </member>
        <member name="T:Infragistics.Win.DependentTextUIElement">
            <summary>
            A text UIElement that gets the text related information
            from an object that implements the IUIElementTextProvider
            interface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DependentTextUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.IUIElementTextProvider)">
            <summary>
            Constructor, initializes a new instance of the <b>DependentTextUIElement</b> class.
            </summary>
            <param name="parent">The parent element</param>
            <param name="provider">The text provider</param>
        </member>
        <member name="M:Infragistics.Win.DependentTextUIElement.InitProvider(Infragistics.Win.IUIElementTextProvider)">
            <summary>
            Initialize the provider
            </summary>
        </member>
        <member name="M:Infragistics.Win.DependentTextUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initialize the appearance structure for this element
            </summary>
            <param name="appearance">The apperance structure to initialize</param>
            <param name="requestedProps">The properties that are needed</param>
        </member>
        <member name="M:Infragistics.Win.DependentTextUIElement.AdjustTextDisplayRect(System.Drawing.Rectangle@)">
            <summary>
            Calls the provider's implementation
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.Provider">
            <summary>
            The provider of the text element
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.Text">
            <summary>
            The text string. The get calls the provider's 
            GetText method. The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.MultiLine">
            <summary>
            The get calls the provider's IsMultiLine method.
            The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.WrapText">
            <summary>
            The get calls the provider's WrapText method.
            The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.Vertical">
            <summary>
            The get calls the provider's IsVertical method.
            The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.Padding">
            <summary>
            Number of pixels in the X dimension (left/right) and
            the Y dimension (above/below) of extra space to leave
            around the text
            The set is not supported
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.BorderStyle">
            <summary>
            The border style of the element (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.BorderSides">
            <summary>
            Bits flags that specify which borders to draw (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DependentTextUIElement.HotkeyPrefix">
            <summary>
            Indicates how mnemonics are rendered in the text.
            </summary>
            <remarks>
            The get checks the provider's HotkeyPrefix method.
            The set is not supported
            </remarks>
        </member>
        <member name="T:Infragistics.Win.TimeZoneEditor">
            <summary>
            TimeZoneEditor class implementation
            </summary>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.#ctor">
            <summary>
            Creates a new instance of the TimeZoneEditor class
            </summary>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.#ctor(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Win.TimeZoneEditor"/> class
            </summary>
            <param name="defaultOwner">The EmbeddableEditorOwnerBase-derived associated with this editor</param>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.OnDispose">
            <summary>
            Called when the TimeZoneEditor is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.DoDropDown">
            <summary>
            Drops down the dropdown.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.InternalResolveValueListAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags)">
            <summary>
            InternalResolveValueListAppearance
            </summary>
            <param name="appData"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.FindByStandardName(System.String)">
            <summary>
            Finds the <see cref="T:Infragistics.Win.TimeZoneInfo"/> object whose <see cref="P:Infragistics.Win.TimeZoneInfo.StandardName"/> is equal to the specified standardName, or null if no <see cref="T:Infragistics.Win.TimeZoneInfo"/> object is found.
            </summary>
            <param name="standardName">The value to match</param>
            <returns>The <see cref="T:Infragistics.Win.TimeZoneInfo"/> object whose <see cref="P:Infragistics.Win.TimeZoneInfo.StandardName"/>  matches, or null if no match was found.</returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.RefreshList">
            <summary>
            Causes the list to be repopulated with the names of available time zones.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.GetValueList(Infragistics.Win.EmbeddableUIElementBase)">
            <summary>
            Returns an IValueList from the specified embeddable element, or null if none is provided.
            </summary>
            <param name="element">The EmbeddableUIElementBase-derived element from which to obtain the owner info. Note that this parameter is ignored for the FontNameEditor.</param>
            <returns>An IValueList interface implementor, or null if the owner does not provide one.</returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.CanEditType(System.Type)">
            <summary>
            Determines if the type can be edited.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.CanRenderType(System.Type)">
            <summary>
            Determines if the type can be rendered.
            </summary>
            <param name="type">The data type to test</param>
            <returns>Returns true if the type can be edited.</returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.System#ICloneable#Clone">
            <summary>
            Clones the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.InitializeFrom(Infragistics.Win.EmbeddableEditorBase)">
            <summary>
            Used to initialize the state of the object based on another editor instance.
            </summary>
            <param name="source">Editor whose property values are to be copied</param>
        </member>
        <member name="M:Infragistics.Win.TimeZoneEditor.Clone(Infragistics.Win.EmbeddableEditorOwnerBase)">
            <summary>
            Creates a copy of the embeddable editor with the specified default owner.
            </summary>
            <param name="defaultOwner">An instance of the default EmbeddableEditorOwnerBase-derived class from which to obtain owner-specific information</param>
            <returns>A copy of the editor</returns>
        </member>
        <member name="P:Infragistics.Win.TimeZoneEditor.InternalValueList">
            <summary>
            Returns the internal ValueList object used by the editor
            </summary>
        </member>
        <member name="P:Infragistics.Win.TimeZoneEditor.ValueList">
            <summary>
            Returns the IValueList to be used by this instance of the editor
            </summary>
        </member>
        <member name="T:Infragistics.Win.TimeZoneInfo">
            <summary>
            Contains information about the associated time zone.
            </summary>
        </member>
        <member name="M:Infragistics.Win.TimeZoneInfo.ToString">
            <summary>
            Returns the string representation (<see cref="P:Infragistics.Win.TimeZoneInfo.DisplayName"/>) of this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.TimeZoneInfo.ToLocalTime(System.DateTime)">
            <summary>
            Returns the date/time of the specified time for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            The translation is made using this computer's time zone information.
            </summary>
            <param name="time">The date/time to be translated.</param>
            <returns>The translated date/time for this time zone.</returns>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.Now"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.Today"/>
        </member>
        <member name="M:Infragistics.Win.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns whether the specified date and time is within a daylight saving time period for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> If no daylight saving information is available in the registry, this property returns <b>false</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightDate"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardDate"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.UtcOffset">
            <summary>
            Returns the offset from UTC (Coordinated Universal Time) for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <remarks>
            <p class="body">UtcOffset specifies the number of hours and minutes the current time differs from Coordinated Universal Time (UTC). This value should be added to the current time in order to obtain (GMT) Greenwich mean time.</p>
            <p class="note">Note that since the display name of a TimeZone is relative to GMT, the UtcOffset will appear with the opposite sign. For example, "(GMT-05:00) Eastern Time (US and Canada)" indicates that the Eastern Time zone is 5 hours prior to GMT. So the UtcOffset of Eastern Time is +5:00.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightUtcOffset"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardUtcOffset"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.StandardUtcOffset">
            <summary>
            Returns the additional offset from UTC (Coordinated Universal Time) for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object for standard time.
            </summary>
            <remarks>
            <p class="body">This value is added to the value of the <see cref="P:Infragistics.Win.TimeZoneInfo.UtcOffset"/> property to form the offset used during standard time. In most time zones, the value is <b>TimeSpan.Zero</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.UtcOffset"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightUtcOffset"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.DaylightUtcOffset">
            <summary>
            Returns the additional offset from UTC (Coordinated Universal Time) for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object for daylight time.
            </summary>
            <remarks>
            <p class="body">This value is added to the value of the <see cref="P:Infragistics.Win.TimeZoneInfo.UtcOffset"/> property to form the offset used during daylight time. In most time zones, the Hour component of the value is <b>-1</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.UtcOffset"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardUtcOffset"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.DisplayName">
            <summary>
            The display name for this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.Index">
            <summary>
            The visible index of this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object; i.e., where it should appear in a list of time zones.
            </summary>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.StandardDate">
            <summary>
            Returns the date and time of transisition to standard time for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> If no information is available in the registry, this property returns the minimum value for the DateTime data type. When this is the case, the value returned from this property should be considered undefined.</p>
            <p class="body">
            The registry supports two date formats. Absolute format specifies an exact
            date and time when standard time begins. In this form, the year, month,
            day, hour, minute, second, and milliseconds parameters are used to specify
            an exact date.<br></br>
            "Day-in-month format" is specified by setting the year member to zero,
            setting the dayOfWeek member to an appropriate weekday, and using a
            day value in the range 1 through 5 to select the occurrence of that
            day of the week in the month. Using this notation, the first Sunday
            in April can be specified, as can the last Thursday in October
            (5 is equal to the last).<br></br>
            When the information contained in the registry is in "day-in-month" format,
            that information is used to calculate the date of transition for the current year.
            </p>
            </remarks>remarks&gt;
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightDate"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardUtcOffset"/>
            <seealso cref="M:Infragistics.Win.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightUtcOffset"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.DaylightDate">
            <summary>
            Returns the date and time of transisition to daylight time for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> If no information is available in the registry, this property returns the minimum value for the DateTime data type. When this is the case, the value returned from this property should be considered undefined.</p>
            <p class="body">
            The registry supports two date formats. Absolute format specifies an exact
            date and time when daylight time begins. In this form, the year, month,
            day, hour, minute, second, and milliseconds parameters are used to specify
            an exact date.<br></br>
            "Day-in-month format" is specified by setting the year member to zero,
            setting the dayOfWeek member to an appropriate weekday, and using a
            day value in the range 1 through 5 to select the occurrence of that
            day of the week in the month. Using this notation, the first Sunday
            in April can be specified, as can the last Thursday in October
            (5 is equal to the last).<br></br>
            When the information contained in the registry is in "day-in-month" format,
            that information is used to calculate the date of transition for the current year.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardDate"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightUtcOffset"/>
            <seealso cref="M:Infragistics.Win.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardUtcOffset"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.Now">
            <summary>
            Returns the current time, as obtained for the current time zone for this computer, translated to local time for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.Today"/>
            <seealso cref="M:Infragistics.Win.TimeZoneInfo.ToLocalTime(System.DateTime)"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.Today">
            <summary>
            Returns the current date, as obtained for the current time zone for this computer, translated to local time for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object.
            </summary>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.Now"/>
            <seealso cref="M:Infragistics.Win.TimeZoneInfo.ToLocalTime(System.DateTime)"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.StandardName">
            <summary>
            Returns the standard name for for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object
            </summary>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DaylightName"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DisplayName"/>
        </member>
        <member name="P:Infragistics.Win.TimeZoneInfo.DaylightName">
            <summary>
            Returns the daylight saving time name for for the time zone represented by this <see cref="T:Infragistics.Win.TimeZoneInfo"/> object
            </summary>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.StandardName"/>
            <seealso cref="P:Infragistics.Win.TimeZoneInfo.DisplayName"/>
        </member>
        <member name="M:Infragistics.Win.ToolTipForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            since background painting is done in OnPaint(), we should do nothing here
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.ToolTipForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Process the mousedown action and hide the tooltip.
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.ToolTipForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            draws border and the background and call the tooltip's OnPaint 
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Win.ToolTipForm.OnHandleCreated(System.EventArgs)">
            <summary>
            Invoked when the <b>Handle</b> for the form is created.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:Infragistics.Win.ToolTipForm.OwningControl">
            <summary>
            Returns the owning control for this tooltip or null if there is no specific control associated.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipForm.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipForm.DisplayShadow">
            <summary>
            Determines if a drop shadow is displayed beneath the tooltip.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> The shadow is displayed by default when available. The shadow is 
            only available on operating systems that support shadows and when unmanaged code rights have 
            been assigned to the assembly.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.ToolTipFormEx.OnHandleCreated(System.EventArgs)">
            <summary>
            Invoked when the <b>Handle</b> for the form is created.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.ToolTipFormEx.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overriden. Receives message notifications for the tooltip form.
            </summary>
            <param name="m">By reference message</param>
        </member>
        <member name="P:Infragistics.Win.ToolTipFormEx.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipFormEx.CreateParams">
            <summary>
            Overridden method. Applies solid border to the month calendar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTipFormEx.DisplayShadow">
            <summary>
            Determines if a drop shadow is displayed beneath the tooltip.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> The shadow is displayed by default when available. The shadow is 
            only available on operating systems that support shadows and when unmanaged code rights have 
            been assigned to the assembly.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.ToolTipBorderStyle">
            <summary>
            An enumerator for specifying the border style of a tooltip
            </summary>
        </member>
        <member name="F:Infragistics.Win.ToolTipBorderStyle.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:Infragistics.Win.ToolTipBorderStyle.Solid">
            <summary>
            Solid border
            </summary>
        </member>
        <member name="F:Infragistics.Win.ToolTipBorderStyle.Raised">
            <summary>
            Raised
            </summary>
        </member>
        <member name="T:Infragistics.Win.ToolTip">
            <summary>
            A class used to display tool tips at a desired location 
            and with a specified delay
            </summary>
        </member>
        <member name="M:Infragistics.Win.ToolTip.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor, initializes a new instance of the <b>ToolTip</b> class.
            </summary>
            <param name="owningControl">Control which owns the tooltip.</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.SetMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets margins around the tool tip text in the tool tip window
            </summary>
            <param name="leftMargin">indentation from left of tip window</param>
            <param name="rightMargin">indentation from right of tip window</param>
            <param name="topMargin">indentation from top of tip window</param>
            <param name="bottomMargin">indentation from bottom of tip window</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.CalcRequiredSize">
            <summary>
            calculates the size of the tool tip window required to display text
            assigned to ToolTipText property
            </summary>
            <returns> A size structure specifying the dimensions necessary to display the tooltip text
            </returns>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show">
            <summary>
            Adjusts the tool tip window's location and size according to
            the tool tip text set and displays the tool tip window.
            It will not decrease the size of the tool tip window if already set
            but increase it if necessary to display the full tool tip text.
            It displays the tool tip window at cursor postion
            </summary>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Boolean)">
            <summary>
            Adjusts the tool tip window's location and size according to
            the tool tip text set and displays the tool tip window.
            It will not decrease the size of the tool tip window if already set
            but increase it if necessary to display the full tool tip text.
            It displays the tool tip window at cursor postion
            </summary>
            <param name="rightAlign">Determines if the tooltip will be right aligned with respect to the point.</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object)">
            <summary>
            Displays the tooltip rendered with editor. If calculateEmbeddableEditorSize is true
            then it will calcualte the size and use that size if it's smaller than displayRect's
            size. adjustX, adjustY dictate whether to adjust the x and y coordinates to fit the
            desktop. excludeX and excludeY indicate whether to use excluseionRect.
            NOTE: This is the only method that shows embeddable editors. Calling any other Show
            overloads subsequently will display the tooltip text, and not the embeddable editos.
            </summary>
            <param name="displayRect">preferred rectangle to display the tool tip in</param>
            <param name="calculateEmbeddableEditorSize"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicate whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate whether to use excluseionRect</param>
            <param name="editor">owning editor</param>
            <param name="owner">owner</param>
            <param name="ownerContext">owner context</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean)">
            <summary>
            Displays the tooltip rendered with editor. If calculateEmbeddableEditorSize is true
            then it will calcualte the size and use that size if it's smaller than displayRect's
            size. adjustX, adjustY dictate whether to adjust the x and y coordinates to fit the
            desktop. excludeX and excludeY indicate whether to use excluseionRect.
            NOTE: This is the only method that shows embeddable editors. Calling any other Show
            overloads subsequently will display the tooltip text, and not the embeddable editos.
            </summary>
            <param name="displayRect">preferred rectangle to display the tool tip in</param>
            <param name="calculateEmbeddableEditorSize"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicate whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate whether to use excluseionRect</param>
            <param name="editor">owning editor</param>
            <param name="owner">owner</param>
            <param name="ownerContext">owner context</param>
            <param name="rightAlign">Determines if the tooltip will be right aligned with respect to the point.</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean,Infragistics.Win.EmbeddableEditorBase,Infragistics.Win.EmbeddableEditorOwnerBase,System.Object,System.Boolean,System.Int32)">
            <summary>
            Displays the tooltip rendered with editor. If calculateEmbeddableEditorSize is true
            then it will calcualte the size and use that size if it's smaller than displayRect's
            size. adjustX, adjustY dictate whether to adjust the x and y coordinates to fit the
            desktop. excludeX and excludeY indicate whether to use excluseionRect.
            NOTE: This is the only method that shows embeddable editors. Calling any other Show
            overloads subsequently will display the tooltip text, and not the embeddable editos.
            </summary>
            <param name="displayRect">preferred rectangle to display the tool tip in</param>
            <param name="calculateEmbeddableEditorSize"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicate whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate whether to use excluseionRect</param>
            <param name="editor">owning editor</param>
            <param name="owner">owner</param>
            <param name="ownerContext">owner context</param>
            <param name="rightAlign">Determines if the tooltip will be right aligned with respect to the point.</param>
            <param name="maxWidth">Restrict's the width for editor's that support multi-line text.</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the tool tip window's location and size according to
            the tool tip text set and displays the tool tip window.
            It will not decrease the size of the tool tip window if already set
            but increase it if necessary to display the full tool tip text.
            It display the tool tip window at specified point.
            </summary>
            <param name="displayRect">preferred rectangle to display the tool tip in</param>
            <param name="maxWidth"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustWidth"></param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicate whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate whether to use excluseionRect</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Drawing.Point,System.Boolean)">
            <summary>
            Adjusts the tool tip window's location and size according to
            the tool tip text set and displays the tool tip window.
            It will not decrease the size of the tool tip window if already set
            but increase it if necessary to display the full tool tip text.
            It display the tool tip window at specified point.
            </summary>
            <param name="displayRect">preferred rectangle to display the tool tip in</param>
            <param name="maxWidth"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustWidth"></param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicates whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate swhether to use excluseionRect</param>
            <param name="targetPoint">point in screen coordinates</param>
            <param name="rightAlign">indicates whether to right align the toolip</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Point,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the tool tip window's location and size according to
            the tool tip text set and displays the tool tip window.
            It will not decrease the size of the tool tip window if already set
            but increase it if necessary to display the full tool tip text.
            It display the tool tip window at specified point.
            </summary>
            <param name="displayLocation">preferred location to display the tool tip in</param>
            <param name="maxWidth"></param>
            <param name="adjustX">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustY">dictate whether to adjust the x  coordinates to fit the desktop</param>
            <param name="adjustWidth"></param>
            <param name="exclusionRect"></param>
            <param name="excludeX">excludeX indicate whether to use excluseionRect</param>
            <param name="excludeY">excludeY indicate whether to use excluseionRect</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Rectangle)">
            <summary>
            Displays the tool tip in the desired rectangle.
            Note: it may move and resize the tool tip window to fit the 
            tool tip text and to fit within the desktop
            </summary>
            <param name="displayRect">The rectangle within which to display the tooltip</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Point)">
            <summary>
            displays the tool tip at desired location.
            Note: it may move and resize the tool tip window to fit the 
            tool tip text and to fit within the desktop.
            </summary>
            <param name="displayLocation">The point at which to display the tooltip</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Show(System.Drawing.Point,System.Boolean)">
            <summary>
            displays the tool tip at desired location.
            Note: it may move and resize the tool tip window to fit the 
            tool tip text and to fit within the desktop.
            </summary>
            <param name="displayLocation">The point at which to display the tooltip</param>
            <param name="rightAlign">Determines if the tooltip will be right aligned with respect to the point.</param>
        </member>
        <member name="M:Infragistics.Win.ToolTip.RemoveEmbeddableEditorRendererControl">
            <summary>
            Ensures that embeddable editor control used for rendering an embeddable editor is
            removed from the form's controls collection so that regular text tooltips can be
            displayed with it.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ToolTip.Hide">
            <summary>
            hides the tool tip window
            </summary>
        </member>
        <member name="M:Infragistics.Win.ToolTip.OnDispose">
            <summary>
            disposes the allocated resources 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.DisplayShadow">
            <summary>
            Determines if a drop shadow is displayed beneath the tooltip when available.
            </summary>
            <remarks>
            <p class="body"><b>Note</b> The drop shadow is only displayed on systems that support 
            a drop shadow (e.g. Windows XP) and when unmanaged code rights are assigned to the 
            assembly.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ToolTip.Control">
            <summary>
            returns the control that this tool tip is implemented with
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.ToolTipText">
            <summary>
            gets or sets the tool tip text that is displayed in the tool tip
            You can use '\n' characters to display multiline tool tips and 
            ' ' (space) characters to insert spaces (for indentations for example)
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.Owner">
            <summary>
            Gets/sets the form that owns the tooltip form
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.OwningControl">
            <summary>
            Gets the owning control that was passed into the constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.BackColor">
            <summary>
            Gets/sets the BackColor of the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.ForeColor">
            <summary>
            Gets/sets the ForeColor of the tooltip
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.TopMost">
            <summary>
            Gets/sets whether the tooltip is a topmost window
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.LeftMargin">
            <summary>
            left margin between tool tip windows' border and the tool tip text
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.RightMargin">
            <summary>
            right margin between tool tip windows' border and the tool tip text
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.TopMargin">
            <summary>
            top margin between tool tip windows' border and the tool tip text
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.BottomMargin">
            <summary>
            bottom margin between tool tip windows' border and the tool tip text
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.InitialDelay">
            <summary>
            Returns/sets the time interval (in milliseconds) before the tooltip initially appears.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.BorderStyle">
            <summary>
            Returns/sets the border style used to draw the tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.Font">
            <summary>
            Returns/sets the font used to draw the tooltip text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ToolTip.AutoPopDelay">
            <summary>
            amount of time in milliseconds that the tool tip window stays visible before
            disappearing. Set it to 0 to disable auto pop. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControl.OnResize(System.EventArgs)">
            <summary>
            Overridden. Fires Resize event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Overridden. Fires SizeChanged event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorRendererControl.ControlUIElement">
            <summary>
            Abstract property for getting the control's main UI element 
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControl.MainUIElement.#ctor(Infragistics.Win.EmbeddableEditorRendererControl)">
            <summary>
            Constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControl.MainUIElement.PositionChildElements">
            <summary>
            Makes sure that the child elements for this element are in the
            ChildElements array and that they are positioned properly.
            This needs to be overridden if the element has any child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControl.MainUIElement.OnPreMouseDown(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Called when a mouse down message is received. Returning true will
            cause normal mouse down processing to be skipped
            </summary>
            <param name="msgInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.EmbeddableEditorRendererControl.MainUIElement.Rect">
            <summary>
            The element's bounding rectangle in client coordinates
            </summary>
        </member>
        <member name="M:Infragistics.Win.EmbeddableEditorRendererControlEx.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overriden. Receives message notifications for the control used for embedding embeddable ui elements.
            </summary>
            <param name="m">By reference message</param>
        </member>
        <member name="T:Infragistics.Win.Design.DataTypeUITypeEditor">
            <summary>
            UITypeEditor for selecting the data type of unbound columns.
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.DataTypeUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.Design.DataTypeUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="P:Infragistics.Win.Design.DataTypeUITypeEditor.Types">
            <summary>
            A list of types to display on the DropDown
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraComponentPropIds">
            <summary>
            Enumeration of UltraComponent property ids.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraComponentPropIds.Visible">
            <summary>
            Visible property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraComponentPropIds.Enabled">
            <summary>
            Enabled property
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraComponentBase">
            <summary>
            Base class for component classes.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentBase.NotifyDesignEnvironmentOfChange">
            <summary>
            <p class="body">In design mode notifies the <see cref="T:System.ComponentModel.Design.IComponentChangeService"/> that the component has changed so that it can mark the component dirty.</p>
            <p class="body">At runtime this method does nothing.</p>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentBase.OnPropertyChanged(Infragistics.Win.PropertyChangedEventArgs)">
            <summary>
            Invokes the PropertyChanged event. This event is fired to notify listeners of a property changes on the component or a subobject.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentBase.NotifyPropChange(System.Enum)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentBase.NotifyPropChange(System.Enum,Infragistics.Shared.PropChangeInfo)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
            <param name="propId">An ID that denotes the property.</param>
            <param name="trigger">Optional. Used during a prop change notification to create a complete context chain of what triggered the change. </param>
        </member>
        <member name="E:Infragistics.Win.UltraComponentBase.PropertyChanged">
            <summary>
            Fired after a property has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentBase.Infragistics#Shared#IUltraComponent#DesignerChangeNotificationsEnabled">
            <summary>
            Setting the property to false will cause the component to not fire any designer change
            notifications. If a designer change notification was suppressed after setting this 
            property to false, then it will be fired when this property is set back to true again.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentBase.Events">
            <summary>
            Returns the list of event handlers that are attached to this component.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraComponentControlManagerBase">
            <summary>
            Abstract base component class for managing multiple controls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.InvalidateControls">
            <summary>
            This method is invoked when the controls should be invalidated. A control
            should only be invalidated if its IsHandleCreated property returns true.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.DirtyChildElements">
            <summary>
            This method is invoked when the uielements for the managed controls should
            be dirtied. A control should only be dirtied if its IsHandleCreated 
            property returns true.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.ChangeControlsVisibleState">
            <summary>
            This method is invoked when the visible property of the managed controls
            should be changed. A control should only be shown/hidden if its IsHandleCreated 
            property returns true.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.ChangeControlsEnabledState">
            <summary>
            This method is invoked when the enabled property of the managed controls
            should be changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.GetSelectionManager">
            <summary>
            Returns the ISelectionManager. The default implementation tries to cast this object to an ISelectionManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.OnMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.OnMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is left (the mouse is moved
            off the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate">
            <summary>
            Sets the IsUpdating flag to true which prevents painting.
            </summary>
            <remarks>This is used to optimize performanance while setting a number of properties or adding a number of items (e.g. nodes in a tree control) so that all paint messages are ignored until EndUpdate is called.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.EndUpdate">
            <summary>
            Resets the IsUpdating flag to false and invalidates the control
            </summary>
            <remarks>
            <p class="body">This method must be called after <see cref="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate"/>. If <b>BeginUpdate</b> was called without a subsequent call to <b>EndUpdate</b> the control will not draw itself.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraComponentControlManagerBase.IsUpdating"/>
            <seealso cref="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate"/>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.EndUpdate(System.Boolean)">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraComponentControlManagerBase.IsUpdating"/> flag to false and optionally invalidates the control.
            </summary>
            <param name="invalidate">True to invalidate the control and dirty the child elements; otherwise false.</param>
            <remarks>
            <p class="body">This method must be called after <see cref="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate"/>. If <b>BeginUpdate</b> was called without a subsequent call to <b>EndUpdate</b> the control will not draw itself.</p>
            <p class="note"><b>Note:</b> Calling this method passing in false should only be done when it is known that the changes made between 
            the <see cref="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate"/> and <b>EndUpdate</b> calls did not require invalidation or dirtying of the elements or when the invalidation 
            is being handled by the programmer.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraComponentControlManagerBase.IsUpdating"/>
            <seealso cref="M:Infragistics.Win.UltraComponentControlManagerBase.BeginUpdate"/>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.ManagedControlInitialized(System.Windows.Forms.Control)">
            <summary>
            Invoked by a ManagedControlBase when its owning component has been set.
            </summary>
            <param name="control">Control whose owner was set.</param>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.ShouldSerializeCursor">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraComponentControlManagerBase.Cursor"/> property needs to be serialized.
            </summary>
            <returns>True if the <see cref="P:Infragistics.Win.UltraComponentControlManagerBase.Cursor"/> needs to be serialized.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.ResetCursor">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraComponentControlManagerBase.Cursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#FireMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#FireMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Called when an element is entered (the mouse is moved
            over the element)
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraComponentControlManagerBase.MouseEnterElement">
            <summary>
            Fired when the mouse enters a UIElement
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraComponentControlManagerBase.MouseLeaveElement">
            <summary>
            Fired when the mouse leaves a UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.IsUpdating">
            <summary>
            Returns true between BeginUpdate and EndUpdate method calls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.FlatMode">
            <summary>
            Indicates whether the control has a flat appearance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.SupportThemes">
            <summary>
            Indicates whether the elements of a control may be rendered using system themes.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Cursor">
            <summary>
            Gets/sets the default cursor for the component.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.AlphaBlendEnabled">
            <summary>
            Determines whether alpha blending is enabled
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.AlphaBlendMode">
            <summary>
            Returns or sets how alpha blending is performed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Visible">
            <summary>
            Gets/sets whether the component is displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Enabled">
            <summary>
            Gets/set whether the component is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.DrawFilter">
            <summary>
            Gets/sets the draw filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.CreationFilter">
            <summary>
            Gets/sets the creation filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.CursorFilter">
            <summary>
            Gets/sets the cursor filter property
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#SelectionManager">
            <summary>
            Gets the selection manager (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#IsFlatMode">
            <summary>
            Returns true if borders should be displayed as flat.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#SupportThemes">
            <summary>
            Returns true if the system themes should be used to render elements when possible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraComponentControlManagerBase.Infragistics#Win#IUltraControl#DefaultCursor">
            <summary>
            Returns the cursor that should be used when the mouse 
            is over the element and that element (and all of the 
            elements in its parent chain) don't supply their own.
            Note: this is normally supplied by returning the 
            Control's cursor property.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ManagedControlBase">
            <summary>
            Abstract base control class for controls managed by an <see cref="T:Infragistics.Win.UltraComponentControlManagerBase"/> component.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.OwnerChanged">
            <summary>
            Invoked when the <see cref="P:Infragistics.Win.ManagedControlBase.Owner"/> property has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Calls the ControlUIElement's draw method
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used to invoke the KeyDown event.
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a subobject's property has been changed.
            </summary>
            <param name="propChange">Information regarding the chain of property change notification</param>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.OnCreateControl">
            <summary>
            Invoked when the control is created.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedControlBase.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed and unmanaged resources should be released.</param>
        </member>
        <member name="P:Infragistics.Win.ManagedControlBase.ControlUIElement">
            <summary>
            Abstract property for getting the control's main UI element 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedControlBase.Cursor">
            <summary>
            Overrides the Cursor to return the cursor from the UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedControlBase.Owner">
            <summary>
            Gets/sets the owning component.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedControlBase.SubObjectPropChangeHandler">
            <summary>
            Handler for a SubObjectPropChange event
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedControlBase.Infragistics#Win#IUltraControlElement#MainUIElement">
            <summary>
            Returns the main uielement representing the control
            </summary>
        </member>
        <member name="T:Infragistics.Win.ManagedContainerControlBase">
            <summary>
            Abstract base control class for container controls managed by an <see cref="T:Infragistics.Win.UltraComponentControlManagerBase"/> component.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.#ctor">
            <summary>
            Initializes a new <b>ManagedContainerControlBase</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.OwnerChanged">
            <summary>
            Invoked when the <see cref="P:Infragistics.Win.ManagedContainerControlBase.Owner"/> property has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Calls the ControlUIElement's draw method
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Used to invoke the KeyDown event.
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a subobject's property has been changed.
            </summary>
            <param name="propChange">Information regarding the chain of property change notification</param>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.OnCreateControl">
            <summary>
            Invoked when the control is created.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ManagedContainerControlBase.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed and unmanaged resources should be released.</param>
        </member>
        <member name="P:Infragistics.Win.ManagedContainerControlBase.ControlUIElement">
            <summary>
            Abstract property for getting the control's main UI element 
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedContainerControlBase.Cursor">
            <summary>
            Overrides the Cursor to return the cursor from the UIElement
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedContainerControlBase.Owner">
            <summary>
            Gets/sets the owning component.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedContainerControlBase.SubObjectPropChangeHandler">
            <summary>
            Handler for a SubObjectPropChange event
            </summary>
        </member>
        <member name="P:Infragistics.Win.ManagedContainerControlBase.Infragistics#Win#IUltraControlElement#MainUIElement">
            <summary>
            Returns the main uielement representing the control
            </summary>
        </member>
        <member name="T:Infragistics.Win.Design.UltraComponentManagerDesigner">
            <summary>
            Base designer for <see cref="T:Infragistics.Win.UltraComponentControlManagerBase"/> derived components
            </summary>
        </member>
        <member name="M:Infragistics.Win.Design.UltraComponentManagerDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Used to filter and/or shadow properties that appear for the component at design time.
            </summary>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="T:Infragistics.Win.UltraControlDesigner">
            <summary>
            The base designer used for Infragistics controls
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.ShowAboutBox(System.Object,System.EventArgs)">
            <summary>
            Shows the about box
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Determines if the point clicked upon should be handled by the control
            or the designer.
            </summary>
            <param name="point">Screen coordinates</param>
            <returns>True if the control should handle the mousedown. Otherwise false to let the designer process the message.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
            <summary>
            Handles the beginning a design time drag.
            </summary>
            <param name="x">X coordinate in screen coordinates.</param>
            <param name="y">Y coordinate in screen coordinates.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.OnMouseDragEnd(System.Boolean)">
            <summary>
            Handles the end of a design time drag.
            </summary>
            <param name="cancel">Boolean indicating if the drag was cancelled.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
            <summary>
            Handles the design time dragging notification. i.e. The mouse was pressed and moved
            on part of the control at design time.
            </summary>
            <param name="x">X coordinate in screen coordinates.</param>
            <param name="y">Y coordinate in screen coordinates.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.OnControlDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Protected method that is called when the user double clicks on a 
            point that is design time active. 
            </summary>
            <remarks>
            <p>The default implementation calls DoDefaultAction which will normally bring up the code window.</p>
            <p>However, this method can be overridden to prevent this behavior. For example, button type elements would want a double click to generate 2 clicks instead of bringing up the code window.</p>
            <p>Note: If the point is over a button or scrollbar element the default implementation does nothing.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">Component the designer is working with.</param>
        </member>
        <member name="M:Infragistics.Win.UltraControlDesigner.Dispose(System.Boolean)">
            <summary>
            Cleans up the designer when it is being disposed.
            </summary>
            <param name="disposing">Boolean indicating whether managed and unmanaged clean up should occur.</param>
        </member>
        <member name="P:Infragistics.Win.UltraControlDesigner.Verbs">
            <summary>
            Adds the about verb to the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlDesigner.AllowContextMenu">
            <summary>
            Return true to allow the designer's default context menu to be displayed, false to suppress it.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraControlDesigner.DesignerChangeNotificationsDisabled">
            <summary>
            Setting the property to true will cause the control to not fire any designer change
            notifications. If a designer change notification was suppressed after setting this 
            property to true, then it will be fired when this property is set back to false again.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.UltraImageEditor">
            <summary>
            UltraImageEditor class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.#ctor">
            <summary>
            Creates an UltraImageEditor instance
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            IsInputKey
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            OnKeyPress
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnMouseLeave(System.EventArgs)">
            <summary>
            OnMouseLeave
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseMove
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OnResize(System.EventArgs)">
            <summary>
            OnResize
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.RepaintMagView">
            <summary>
            Redraws the magnified view of the image
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetEditImage">
            <summary>
            Resets the edit image to the real image (used when a drawing operation is cancelled)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.CombineColors(System.Int32,System.Int32)">
            <summary>
            Combines the new color to be drawn with the existing color
            </summary>
            <param name="newColor">The new color to draw</param>
            <param name="existingColor">The existing color in the position to draw the new color</param>
            <returns>The combination of the colors</returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.GetCurrentEditInfo">
            <summary>
            Gets the current state of the editor in an edit info object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.SetDrawingColors(Infragistics.Win.UltraImageEditor.ImageEditColorType,System.Int32@,System.Int32@)">
            <summary>
            Sets the approriate primary and secondary colors for a drawing operation
            </summary>
            <param name="type">The type of color to use as the primary color</param>
            <param name="color1">The primary color</param>
            <param name="color2">The secondary color</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ChangeColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Changes all pixels in the current selection with the existing color to the new color.
            If no selection is made, this acts on the entire image
            </summary>
            <param name="existingColor">The existing color to search the image for</param>
            <param name="newColor">The new color to changes those pixels to</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ClearImage(System.Drawing.Color)">
            <summary>
            Clears the entire image with the speicified color
            </summary>
            <param name="color">The color to clear the image with</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ClearSelection">
            <summary>
            If an area is currently selected on the image, it will be deselected
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ClearUndoStack">
            <summary>
            Clears the undo stack so all operations done before this point cannot be undone
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.CopyToClipboard">
            <summary>
            Copies the current selection to the clipboard.  If no selection is made,
            the entire image is copied to the clipboard
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.CutToClipboard">
            <summary>
            Cuts the current selection to the clipboard.  If no selection is made,
            the entire image is cut to the clipboard
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.FlipHorizontally">
            <summary>
            Flips the current selection horizontally.  If no selection is made, the entire image
            is flipped
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.FlipVertically">
            <summary>
            Flips the current selection vertically.  If no selection is made, the entire image
            is flipped
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.GetImage">
            <summary>
            Gets the current image being edited (must be disposed after use)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.GetPixel(System.Drawing.Point)">
            <summary>
            Gets the color of the pixel at the specified point in the image
            </summary>
            <param name="p">The pixel position where to get the color</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified point in the image
            </summary>
            <param name="x">The x position of the pixel</param>
            <param name="y">The y position of the pixel</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.InvertColors">
            <summary>
            Inverts the colors of the current selection vertically.  If no selection is made, the
            entire image's colors are inverted
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OffsetImage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            OffsetImage
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="waitForKeyUp"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.OffsetImage(System.Drawing.Point,System.Boolean)">
            <summary>
            OffsetImage
            </summary>
            <param name="offset"></param>
            <param name="waitForKeyUp"></param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.PasteFromClipboard">
            <summary>
            If the data on the clipboard is a bitmap, it is pasted to the image.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.Redo">
            <summary>
            Does a redo operation if one is available
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.RotateLeft">
            <summary>
            Rotates the current selection left 90 degrees.  If there is no selection, the entire
            image is roated left 90 degrees.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.RotateRight">
            <summary>
            Rotates the current selection right 90 degrees.  If there is no selection, the entire
            image is roated right 90 degrees.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.SetImageDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the diensions of the image
            </summary>
            <param name="width">The new width of the image</param>
            <param name="height">The new height of the image</param>
            <returns>True if the image was resized successfully, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.SetImageDimensions(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the diensions of the image
            </summary>
            <param name="width">The new width of the image</param>
            <param name="height">The new height of the image</param>
            <param name="warnOnLossOfData">
            	True if this function should present a message box warning the user when data will be lost
            </param>
            <returns>True if the image was resized successfully, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.SetImage(System.Drawing.Icon)">
            <summary>
            Sets the current image being editted to an icon instance
            </summary>
            <param name="icon">The icon to allow the user to edit with this control</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.SetImage(System.Drawing.Image)">
            <summary>
            Sets the current image being editted to an image instance
            </summary>
            <param name="image">The image to allow the user to edit with this control</param>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.Undo">
            <summary>
            Does an undo operation if one is avaialable
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetModified">
            <summary>
            Resets the modified flag, effectively marking the control as not dirty.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetDrawingBackColor">
            <summary>
            ResetDrawingBackColor
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ShouldSerializeTransparentHatchColor">
            <summary>
            Returns whether the <see cref="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.TransparentHatchColor"/> property requires serialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetTransparentHatchColor">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.TransparentHatchColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetDrawingFont">
            <summary>
            ResetDrawingFont
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.UltraImageEditor.ResetDrawingForeColor">
            <summary>
            ResetDrawingForeColor
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.AfterImageEdited">
            <summary>
            Occurs after the changes made by the user are commited to the Bitmap
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.BeforeImageEdited">
            <summary>
            Occurs before the changes made by the user are commited to the Bitmap
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.ColorSelectColorChanged">
            <summary>
            Occurs when a color has been selected from the magified view of the image
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingFontChanged">
            <summary>
            Occurs when the drawing font has changed internally as a result of an undo or redo operation
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.DuringImageEdit">
            <summary>
            Occurs when the image is being editted
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.EditModeChanged">
            <summary>
            Occurs when the edit mode changes internally as a result of an undo, redo, or paste operation
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.HotSpotChanged">
            <summary>
            Occurs when the hot spot position for the cursor has changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.MagnificationLevelChanged">
            <summary>
            Occurs when the magnification level of the magnified image view has changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraImageEditor.UltraImageEditor.MouseVirtualPositionChanged">
            <summary>
            Occurs when the mouse's virtual pixel position in the magnified image view changes
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.AutoFitMagnifiedView">
            <summary>
            Gets or sets the boolean value indicating if the magnified view of the image is fit to the
            control's size
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.AutoScroll">
            <summary>
            Gets or sets the value idicating whether the control will allow the user to scroll to
            any controls placed outside of its boudaries
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.BrushSize">
            <summary>
            Gets or sets the width of the brush to be used in the DrawBrush edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.BrushType">
            <summary>
            Gets or sets the type of brush to use in the DrawBrush edit mode
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.CanRedo">
            <summary>
            Gets the boolean value indicating if this control can do a redo operation
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.CanUndo">
            <summary>
            Gets the boolean value indicating if this control can do an undo operation
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DarkGridLineSpacing">
            <summary>
            Gets or sets the number of virtual pixels between darker grid lines (0 for no dark grid lines)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingBackColor">
            <summary>
            Gets or sets the back color used by the current drawing state (also the right click color)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.TransparentHatchColor">
            <summary>
            Gets/sets the color used to create the hatch brush
            that is drawn to represent the transparent color.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingFont">
            <summary>
            DrawingFont
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingForeColor">
            <summary>
            Gets or sets the fore color used by the current drawing state (also the left click color)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingGradientStyle">
            <summary>
            Gets or sets the type of gradient to use when drawing
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawPixelGrid">
            <summary>
            Gets or set the boolean value indicating if the magnified view draws grid lines to seperate
            virtual pixels
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.EditMode">
            <summary>
            Gets or sets the edit mode this editor is currently in (some type of select or drawing operation)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.EraseColorThreshold">
            <summary>
            Gets or sets the threshold value for the erase color edit mode.  A value of 0 will require
            existing colors to be identical to the primary color to be erased, while a value of 255 will
            erase any color, regardless of the primary color
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.EraseSize">
            <summary>
            Gets or sets the virtual size to draw the erase area
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.HotSpot">
            <summary>
            Gets the current hot spot choosen by the user
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.MagnificationLevel">
            <summary>
            Gets or sets the number of times to magnify the image (a value of 10 will cause each virtual pixel in the
            magnified view to be 10 pixels wide)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.MaxHistoryLength">
            <summary>
            Gets or sets the maximum number of changes to save in the undo stack (-1 for infinite)
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.ImageSize">
            <summary>
            Returns the size of the current image.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.Modified">
            <summary>
            Returns whether the control's image has been modified.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.UltraImageEditor.SelectionRectangle">
            <summary>
            Returns the rectangle representing the current selection or <see cref="F:System.Drawing.Rectangle.Empty"/> if nothing is selected.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelectState.Dispose">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.SelectRectangleState.InvertColors">
            <summary>
            Inverts the colors of the selection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.DrawTextState.InvertColors">
            <summary>
            Inverts the colors of the selection
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.BrushType">
            <summary>
            BrushType
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.BrushType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.BrushType.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ImageEditColorType">
            <summary>
            ImageEditColorType
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditColorType.BackColor">
            <summary>
            BackColor
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditColorType.ForeColor">
            <summary>
            ForeColor
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ImageEditMode">
            <summary>
            Enumeration used to specify the editing mode of an image editor
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.ChooseHotSpot">
            <summary>
            ChooseHotSpot
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.ColorSelect">
            <summary>
            ColorSelect
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawAirbrush">
            <summary>
            DrawAirbrush
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawArc">
            <summary>
            DrawArc
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawBrush">
            <summary>
            DrawBrush
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawEllipseOutline">
            <summary>
            DrawEllipseOutline
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawFilledEllipse">
            <summary>
            DrawFilledEllipse
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawFilledEllipseWithOutline">
            <summary>
            DrawFilledEllipseWithOutline
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawFilledRectangle">
            <summary>
            DrawFilledRectangle
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawFilledRectangleWithOutline">
            <summary>
            DrawFilledRectangleWithOutline
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawLine">
            <summary>
            DrawLine
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawPoint">
            <summary>
            DrawPoint
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawRectangleOutline">
            <summary>
            DrawRectangleOutline
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.DrawText">
            <summary>
            DrawText
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.Erase">
            <summary>
            Erase
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.EraseColor">
            <summary>
            EraseColor
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.Fill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageEditMode.SelectRectangle">
            <summary>
            SelectRectangle
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ImageChangeType">
            <summary>
            Enumerator used to specify the type of operation that caused a change in an image
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageChangeType.Undo">
            <summary>
            Undo
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageChangeType.Redo">
            <summary>
            Redo
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraImageEditor.ImageChangeType.NewChange">
            <summary>
            NewChange
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.AfterImageEditedEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.AfterImageEdited"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.BeforeImageEdited"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ColorSelectedEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.ColorSelectColorChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.DrawingFontChangedEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.DrawingFontChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.DuringImageEditEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.DuringImageEdit"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventHandler">
            <summary>
            Event handler for the <see cref="F:Infragistics.Win.UltraImageEditor.UltraImageEditor.MouseVirtualPositionChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.AfterImageEditedEventArgs">
            <summary>
            Event parameters for the UltraWinImageEditor.AfterImageEdited event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.AfterImageEditedEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new AfterImageEditedEventArgs instance
            </summary>
            <param name="image">The new image after being edited</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.AfterImageEditedEventArgs.Image">
            <summary>
            Gets the new image after being edited
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs">
            <summary>
            Event parameters for the UltraWinImageEditor.BeforeImageEdited event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs.#ctor(System.Drawing.Bitmap,System.Drawing.Bitmap,Infragistics.Win.UltraImageEditor.ImageChangeType)">
            <summary>
            Creates a new BeforeImageEditedEventArgs instance
            </summary>
            <param name="newImage">The new image after being edited</param>
            <param name="oldImage">The old image</param>
            <param name="type">The type of change that caused this event</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs.Cancel">
            <summary>
            Gets or sets the boolean value indicating if the old image should not be updated to the new image
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs.NewImage">
            <summary>
            Gets the new image after being edited
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs.OldImage">
            <summary>
            Gets the old image
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.BeforeImageEditedEventArgs.Type">
            <summary>
            Gets the type of change that caused this event
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.ColorSelectedEventArgs">
            <summary>
            Event parameters for the ColorSelected event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.ColorSelectedEventArgs.#ctor(System.Drawing.Color,Infragistics.Win.UltraImageEditor.ImageEditColorType)">
            <summary>
            Constructor
            </summary>
            <param name="color"></param>
            <param name="type"></param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelectedEventArgs.Color">
            <summary>
            Returns the color that was selected.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.ColorSelectedEventArgs.Type">
            <summary>
            Returns the type of the color that was selected.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.DrawingFontChangedEventArgs">
            <summary>
            Event parameters for the DrawingFontChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.DrawingFontChangedEventArgs.#ctor(System.Drawing.Font)">
            <summary>
            Constructor
            </summary>
            <param name="font"></param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.DrawingFontChangedEventArgs.Font">
            <summary>
            Returns the font that was changed
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.DuringImageEditEventArgs">
            <summary>
            Event parameters for the UltraWinImageEditor.DuringImageEdit event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.DuringImageEditEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new DuringImageEditEventArgs instance
            </summary>
            <param name="image">The image being edited</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.DuringImageEditEventArgs.Image">
            <summary>
            Gets the image after edited
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventArgs">
            <summary>
            Event parameters for the MouseVirtualPositionChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new MouseVirtualPositionChangedEventArgs instance
            </summary>
            <param name="x">The virtual x position of the mouse over the magnified view of the image</param>
            <param name="y">The virtual y position of the mouse over the magnified view of the image</param>
            <param name="isInBitmap">The boolean value indicating if the mouse is currently over the visible part of the image</param>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventArgs.IsInBitmap">
            <summary>
            Gets the boolean value indicating if the mouse is currently over the visible part of the image
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventArgs.X">
            <summary>
            Gets the virtual x position of the mouse over the magnified view of the image
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraImageEditor.MouseVirtualPositionChangedEventArgs.Y">
            <summary>
            Gets the virtual y position of the mouse over the magnified view of the image
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraLicenseAttribute.GetLicensedWithProducts">
            <summary>
            Return the list of products that this control can be licensed with
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraParentControlDesigner">
            <summary>
            The designer for Infragistics parent controls (i.e., controls that contain other controls but are not necessarily containers).
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.OnControlDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Protected method that is called when the user double clicks on a 
            point that is design time active. 
            </summary>
            <remarks>
            <p>The default implementation calls DoDefaultAction which will normally bring up the code window.</p>
            <p>However, this method can be overridden to prevent this behavior. For example, button type elements would want a double click to generate 2 clicks instead of bringing up the code window.</p>
            <p>Note: If the point is over a button or scrollbar element the default implementation does nothing.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">Component the designer is working with.</param>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.Dispose(System.Boolean)">
            <summary>
            Cleans up the designer when it is being disposed.
            </summary>
            <param name="disposing">Boolean indicating whether managed and unmanaged clean up should occur.</param>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Determines if the point clicked upon should be handled by the control
            or the designer.
            </summary>
            <param name="point">Screen coordinates</param>
            <returns>True if the control should handle the mousedown. Otherwise false to let the designer process the message.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
            <summary>
            Handles the beginning a design time drag.
            </summary>
            <param name="x">X coordinate in screen coordinates.</param>
            <param name="y">Y coordinate in screen coordinates.</param>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.OnMouseDragEnd(System.Boolean)">
            <summary>
            Handles the end of a design time drag.
            </summary>
            <param name="cancel">Boolean indicating if the drag was cancelled.</param>
        </member>
        <member name="M:Infragistics.Win.UltraParentControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
            <summary>
            Handles the design time dragging notification. i.e. The mouse was pressed and moved
            on part of the control at design time.
            </summary>
            <param name="x">X coordinate in screen coordinates.</param>
            <param name="y">Y coordinate in screen coordinates.</param>
        </member>
        <member name="P:Infragistics.Win.UltraParentControlDesigner.Verbs">
            <summary>
            Overridden to add verbs to the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraParentControlDesigner.AllowContextMenu">
            <summary>
            Return true to allow the designer's default context menu to be displayed, false to suppress it.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraParentControlDesigner.TargetControl">
            <summary>
            Returns the control that should be used by the About Dialog and CustomPropertyDialog.
            If not overridden, it returns the control being designed.  
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar">
            <summary>
            Control for displaying the status of an activity.
            </summary>
            <remarks>
            <p class="body">The <b>UltraProgressBar</b> can be used to indicate the percent that a process has completed and also provides an indication during a long process that the process is progressing.</p>
            <p class="body">The type of flood fill that is rendered can be determined via the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Style"/> property. When rendering the filled area, the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> is used to resolve the appearance for the filled area of the progress bar. The fill may be a solid color, gradient or even a background image that is uncovered as the percentange increases and depending upon the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Style"/> will either be a solid or segmented area.</p>
            <p class="body">The <b>UltraProgressBar</b> can also displayed a label (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/>) within the control. The <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/> can include special escape tags that will be replaced by the current values of the control to provide dynamic labels.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.DEFAULT_PERCENT_FORMAT">
            <summary>
            Default percent format. "P0" is used to render a rounded percent.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_PERCENT_COMPLETED">
            <summary>
            The percent is displayed as a value rounded to zero decimal places.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_PERCENT_REMAINING">
            <summary>
            The percent remaining is displayed as a value rounded to zero decimal places.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_FORMATTED">
            <summary>
            The percent is displayed as a formatted value using the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_FORMATTED_REMAINING">
            <summary>
            The percent remaining is displayed as a formatted value using the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_AMOUNT_REMAINING">
            <summary>
            The remaining value is displayed.
            </summary>
            <remarks>The amount displayed is equal to the Maximum minus the Value.</remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_AMOUNT_COMPLETED">
            <summary>
            The amount completed is displayed.
            </summary>
            <remarks>The amount displayed is equal to the Value minus the Minimum.</remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_MINIMUM">
            <summary>
            The <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> value is displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_MAXIMUM">
            <summary>
            The <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> value is displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_VALUE">
            <summary>
            The current <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> is displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.LABEL_RANGE">
            <summary>
            The total range value is displayed.
            </summary>
            <remarks>The total range value is the result of the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> minus the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>.</remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.DefaultSegmentWidth">
            <summary>
            Default segment width for the progress bar.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.#ctor">
            <summary>
            Initializes a new <b>UltraProgressBar</b> control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ShouldSerializeAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ShouldSerializeFillAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResetFillAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property was set to an Appearance from the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearances"/> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ShouldSerializeAppearances">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearances"/> collection needs to be serialized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResetAppearances">
            <summary>
            Clears the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearances"/> collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ShouldSerializePercentSettings">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentSettings"/> property needs to be serialized
            </summary>
            <returns>True if the <b>PercentSettings</b> collection contains any items</returns>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentSettings"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResetPercentSettings">
            <summary>
            Clears the contents of the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentSettings"/> property
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentSettings"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PerformStep">
            <summary>
            Increments the value of the control by the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Step"/> amount.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.IncrementValue(System.Int32)">
            <summary>
            Increments the value of the control by the specified amount.
            </summary>
            <param name="amount">Amount to change the value.</param>
            <remarks>
            <p class="body">The <b>IncrementStep</b> is analogous to adding a particular amount to the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> property. However, the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> property must be set to a value within the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> values or an exception will be generated. The <b>IncrementValue</b> method takes the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> values into account as it adjusts the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> and therefore may be more convenient to use.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FormatText(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,System.String)">
            <summary>
            Returns the formatted text label for the specified object that implements <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/>.
            </summary>
            <param name="ctrl">Class used to obtain the information.</param>
            <param name="label">Label to use when formatting. If null, uses the label from the specified IProgressBarInfo.</param>
            <returns>Formatted string based on the values of the specified IProgressBarInfo.</returns>
            <remarks>
            <p class="body">The <b>FormatText</b> method provides a way to determine the text that is or would be displayed based on the label and data from the class implementing the <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/> interface.</p>
            <p class="note">The <b>UltraProgressBar</b> control implements the <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/> interface.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Static method for resolving the appearance for the filled area of the element.
            </summary>
            <param name="progressInfo">Object implementing the IProgressBarInfo.</param>
            <param name="appearance">AppearanceData to update with the Appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <remarks>
            <p class="body">The main source for the resolved values of the filled appearance is the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance"/>. However, since the text from the filled and unfilled area must be sized and positioned exactly the same, the <see cref="P:Infragistics.Win.AppearanceBase.FontData"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextTrimming"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextHAlign"/>, and <see cref="P:Infragistics.Win.AppearanceBase.TextVAlign"/> are resolved using the corresponding values of the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Static method for resolving the appearance for the unfilled area of the element.
            </summary>
            <param name="progressInfo">Object implementing the IProgressBarInfo.</param>
            <param name="appearance">AppearanceData to update with the Appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <remarks>
            <p class="body">The main source for the resolved values of the unfilled appearance is the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>. Values that are not explicitly set are resolved to default values determined by the class.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the filled area of the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarFillUIElement"/> element.
            </summary>
            <param name="appearance">AppearanceData to update with the Appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <remarks>
            <p class="body">The main source for the resolved values of the filled appearance is the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.FillAppearance"/>. However, since the text from the filled and unfilled area must be sized and positioned exactly the same, the <see cref="P:Infragistics.Win.AppearanceBase.FontData"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextTrimming"/>, <see cref="P:Infragistics.Win.AppearanceBase.TextHAlign"/>, and <see cref="P:Infragistics.Win.AppearanceBase.TextVAlign"/> are resolved using the corresponding values of the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the unfilled area of the <see cref="T:Infragistics.Win.UltraWinProgressBar.ProgressBarUIElement"/> element.
            </summary>
            <param name="appearance">AppearanceData to update with the Appearance information.</param>
            <param name="requestedProps">Appearance properties to resolve.</param>
            <remarks>
            <p class="body">The main source for the resolved values of the unfilled appearance is the <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Appearance"/>. Values that are not explicitly set are resolved to default values determined by the class.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.UltraWinProgressBar.IProgressBarInfo,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new accessibility object for the control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ValueChanged"/> event when the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnValueChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnValueChanged</b> in a derived class, be sure to call the base class's <b>OnValueChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ValueChanged"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed resources should be released.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.OnPropertyChanged(Infragistics.Win.PropertyChangedEventArgs)">
            <summary>
            Handles passing along notifications when a property has changed.
            </summary>
            <param name="e">Event arguments providing information about the property change.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the progress bar background
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the appearance for the filled area of the progress bar
            </summary>
            <param name="appearance">Appearance structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.About">
            <summary>
            Display the about dialog
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Shared#IUltraLicensedComponent#License">
            <summary>
            Returns the cached license for the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BorderStyle">
            <summary>
            Border style for the control.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.BorderStyle"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BorderStyleResolved">
            <summary>
            Returns the resolved <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BorderStyle"/> for the control.
            </summary>
            <remarks>
            <p class="body">When the control is not rendering themes, the default value is Inset. When themes are supported, the default <B>BorderStyle</B> is none.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.TextVisible">
            <summary>
            Indicates whether to display the label.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Orientation">
            <summary>
            Determines the orientation of the <b>UltraProgressBar</b>.
            </summary>
            <remarks>
            <p class="body">The <b>UltraProgressBar</b> can be oriented vertically or horizontally. When rendering horizontally, the fill increases from left to right as the percent increases. When oriented vertically, the fill increases from bottom to top as the percent increases. The default value for the <b>Orientation</b> is horizontal.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>Minimum</b> and <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> values determine the range used to calculate the percentage of the flood fill. The <b>Minimum</b> value must be less than or equal to the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> and <b>Maximum</b> values determine the range used to calculate the percentage of the flood fill. The <b>Maximum</b> value must be greater than or equal to the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value">
            <summary>
            Current value.
            </summary>
            <remarks>
            <p class="body">The <b>Value</b> must be a value within the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> range. If the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> or <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/> value is changed so that the <b>Value</b> is no longer in the range, the <b>Value</b> will return the closest value within the range to its previous value and will not result in an exception. However, when the property is set, the new <b>Value</b> must be within the range or an <see cref="T:System.ArgumentOutOfRangeException"/> will be generated. When the <b>Value</b> is changed, the <see cref="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ValueChanged"/> property is fired.</p>
            </remarks>
            <seealso cref="F:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ValueChanged"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance">
            <summary>
            Default appearance for the control.
            </summary>
            <remarks>
            <p class="body">The <b>Appearance</b> property is used to determine appearance of the non-filled area of the <b>ProgressBar</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.HasAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance">
            <summary>
            Default appearance for the filled area of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>FillAppearance</b> property is used to determine appearance of the filled area of the <b>ProgressBar</b>.</p>
            <p class="note">Note: </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ResolveFillAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.HasFillAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearances">
            <summary>
            Returns the a collection of user created <see cref="T:Infragistics.Win.Appearance"/> objects.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UIElement">
            <summary>
            Returns the main UIElement which occupies the client area of the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat">
            <summary>
            String used to format the percent.
            </summary>
            <remarks>
            <p class="body">This string is used to format the percent when replacing a [Formatted] or [FormattedRemaining] value in the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/>.</p></remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text">
            <summary>
            Determines the label displayed for the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>Text</b> is used to provide a <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/> for the progress bar. The string can include special escape tags that will be replaced by values from the control. The string will only be displayed if the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.TextVisible"/> propert is set to true.</p>
            <list type="table">
            <listheader><term>Replaceable Escape Tags:</term></listheader>
            <item><term>[Percent]</term><description>Unformatted percent completed</description></item>
            <item><term>[RemainingPercent]</term><description>Unformatted percent remaining</description></item>
            <item><term>[Formatted]</term><description>Formatted percent completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat"/>)</description></item>
            <item><term>[RemainingFormatted]</term><description>Formatted percent remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat"/>)</description></item>
            <item><term>[Remaining]</term><description>Amount remaining (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/>)</description></item>
            <item><term>[Completed]</term><description>Amount completed (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>)</description></item>
            <item><term>[Minimum]</term><description>Minimum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>)</description></item>
            <item><term>[Maximum]</term><description>Maximum value (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/>)</description></item>
            <item><term>[Value]</term><description>Current value (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/>)</description></item>
            <item><term>[Range]</term><description>Value Range (<see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/> - <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>)</description></item>
            </list>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Label"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.TextVisible"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Step">
            <summary>
            Amount to increment the value when invoking the <see cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PerformStep"/> method.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Style">
            <summary>
            Determines the style of the progress bar.
            </summary>
            <remarks>
            <p class="body">The <b>Style</b> property determines the type of fill that is rendered. The fill may be a continuous block or be rendered in segments.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FormatInfo">
            <summary>
            Gets or sets the culture specific information used to determine how values are formatted.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.SegmentWidth">
            <summary>
            Gets/sets the width of the segments in a Segmented style progress bar.
            </summary>
            <remarks>
            When set to UltraProgressBar.DefaultSegmentWidth (-1), the default segment width is used. The default
            segment width is equal to 2/3 the size relative to the orientation. e.g. The width of a progress bar segment
            in a horizontal progress bar is approximately 2/3 the height of the control.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentSettings">
            <summary>
            Returns a collection of value based appearances
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ValueChanged">
            <summary>
            Event that occurs when the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/> property changes.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.OnValueChanged(System.EventArgs)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BackColor">
            <summary>
            Overriden. The <b>BackColor</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BackgroundImage">
            <summary>
            Overriden. The <b>BackgroundImage</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Font">
            <summary>
            Overriden. The <b>Font</b> property should be used to initialize a default font for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ForeColor">
            <summary>
            Overiden. The <b>ForeColor</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Cursor">
            <summary>
            Overriden. The <b>Cursor</b> property should be used to initialize a default cursor for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.TabStop">
            <summary>
            Overriden. Determines whether the control will receive focus when tabbing through the controls.
            </summary>
            <remarks>
            <p class="body">The <b>UltraProgressBar</b> control does not receive focus so changing this property will not affect the control.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.DefaultImeMode">
            <summary>
            Overriden. Determines the default ImeMode for the control.
            </summary>
            <remarks>
            <p class="body">Since the <b>UltraProgressBar</b> control does not receive focus and does not use the key messages, the default ImeMode is disabled.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.ControlUIElement">
            <summary>
            Returns the control's main uielement.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Appearance">
            <summary>
            Appearance for the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Appearance"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FillAppearance">
            <summary>
            Appearance for the filled area of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.FillAppearance"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Minimum">
            <summary>
            Minimum value of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Minimum"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Maximum">
            <summary>
            Maximum value of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Maximum"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Value">
            <summary>
            Current value of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Label">
            <summary>
            Display label for the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Text"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#ShowLabel">
            <summary>
            Indicates if the label should be displayed.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.TextVisible"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Orientation">
            <summary>
            Orientation of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Orientation"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#BorderStyle">
            <summary>
            BorderStyle of the progress bar.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BorderStyle"/>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.BorderStyleResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#PercentFormat">
            <summary>
            Format used when formatting the percent for the label.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.PercentFormat"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#Style">
            <summary>
            Determines the style of the progress bar's filled backcolor.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Style"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#FormatInfo">
            <summary>
            Returns the culture specific information used to determine how values are formatted.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.Infragistics#Win#UltraWinProgressBar#IProgressBarInfo#SegmentWidth">
            <summary>
            Returns the width of the segments in a segmented progress bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.DataFilter">
            <summary>
            If different than null, specifies custom data filter used by the editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject">
            <summary>
            Accessible object representing an <see cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject.#ctor(Infragistics.Win.UltraWinProgressBar.UltraProgressBar)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject"/>
            </summary>
            <param name="ownerControl">Control which is represented by the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.UltraProgressBar.UltraProgressBarAccessibleObject.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBarDesigner">
            <summary>
            Control Designer for the <see cref="T:Infragistics.Win.UltraWinProgressBar.UltraProgressBar"/> control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.UltraProgressBarDesigner.OnSetComponentDefaults">
            <summary>
            Initialize the default values for the control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinProgressBar.ProgressBarValueTypeEditor">
            <summary>
            UIType editor for an <see cref="T:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo"/> <see cref="P:Infragistics.Win.UltraWinProgressBar.IProgressBarInfo.Value"/> property
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinProgressBar.ProgressBarValueTypeEditor.InitializeTrackBar(System.Windows.Forms.TrackBar)">
            <summary>
            Invoked when the trackbar is created so that minimum and maximum values can be initialized.
            </summary>
            <param name="trackBar">TrackBar control to be displayed</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinProgressBar.ProgressBarValueTypeEditor.PaintPreviewSupported">
            <summary>
            Used to indicate if a preview window should be displayed
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraScrollableControlDesigner">
            <summary>
            The designer for Infragistics scrollable controls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraScrollableControlDesigner.Dispose(System.Boolean)">
            <summary>
            Cleans up the designer when it is being disposed.
            </summary>
            <param name="disposing">Boolean indicating whether managed and unmanaged clean up should occur.</param>
        </member>
        <member name="M:Infragistics.Win.UltraScrollableControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">Component the designer is working with.</param>
        </member>
        <member name="P:Infragistics.Win.UltraScrollableControlDesigner.Verbs">
            <summary>
            Overridden to add verbs to the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraScrollableControlDesigner.TargetControl">
            <summary>
            Returns the control that should be used by the About Dialog and CustomPropertyDialog.
            If not overridden, it returns the control being designed.  
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar">
            <summary>
            UltraScrollBar control.
            </summary>
            <remarks>
            <p class="body">The <b>UltraScrollBar</b> control provides all the functionality of the intrinsic ScrollBar plus several other features. In addition to the benefits of the Presentation Layer Framework (including the ability to owner draw an aspect of the control, one property <see cref="P:Infragistics.Win.UltraControlBase.FlatMode"/> settings, alphablending support, and keyboard mappings), the control exposes additional properties to customize the look and feel of the <b>UltraScrollBar</b>. There are 4 Appearance properties for controlling the appearance of the entire scrollbar, scroll thumb, scroll buttons and scroll track. The <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible"/> allows the ability to provide buttons to move to the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> values. The number and placement of the scroll buttons can be controlled using the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle"/>.</p>
            <p class="body">The <b>UltraScrollBar</b> also provides some additional properties and methods to make the control easier to use. The <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/> property can be used to have the control maintain the same size as the system scroll bar settings. The <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable"/> property can be used to have the control render disabled when the scroll thumb cannot be moved. The <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/> can be used to provide a context menu for the scroll bar similar to that of the Windows system ScrollBar.</p>
            <p class="body">To make setup of the control easier, the <see cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Initialize(System.Int32,System.Int32,System.Int32,System.Int32)"/> and <see cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.GetMaximumDragValue(System.Int32,System.Int32,System.Int32)"/> methods, as well as the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MaximumDragValue"/> property have been added.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.#ctor">
            <summary>
            Initializes a new <b>UltraScrollBar</b> control.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.#ctor(Infragistics.Win.UltraControlBase,System.Windows.Forms.Orientation)">
            <summary>
            Initializes a new <b>UltraScrollBar</b> control with the specified <paramref name="orientation"/> and owning control.
            </summary>
            <param name="owner">Owning UltraControlBase derived control</param>
            <param name="orientation">Initial orientation of the control</param>
            <remarks>
            <p class="body">This constructor was designed to be used when the control was a child control of an <see cref="T:Infragistics.Win.UltraControlBase"/> derived control. It hooks into the <see cref="E:Infragistics.Win.UltraControlBase.PropertyChanged"/> notifications and initializes the properties (FlatMode, filters, etc.) to the values of that control.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.IsPointDesignTimeActive(System.Drawing.Point)">
            <summary>
            Determines if the control should receive mouse notifications at design time for the specified point.
            </summary>
            <param name="pt">Point in client coordinates.</param>
            <returns>True if the control should receive any mouse notifications for the specified point.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeScrollBarInfo">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarInfo"/> needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarInfo"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeMinMaxButtonsVisible">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetMinMaxButtonsVisible">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeOrientation">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Orientation"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Orientation"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetOrientation">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Orientation"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Orientation"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeScrollBarArrowStyle">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetScrollBarArrowStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeMinimum">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetMinimum">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeMaximum">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetMaximum">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeValue">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetValue">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeSmallChange">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetSmallChange">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeLargeChange">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetLargeChange">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/> property to its default value.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeAutoDisable">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable"/> property needs to be serialized.
            </summary>
            <returns>True if the property value differs from the default value.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetAutoDisable">
            <summary>
            Resets the value of the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeButtonAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetButtonAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeThumbAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetThumbAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeTrackAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetTrackAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeAppearances">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearances"/> collection needs to be serialized.
            </summary>
            <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearances"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetAppearances">
            <summary>
            Clears the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearances"/> collection
            </summary>
            <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearances"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeAutoSize">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetAutoSize">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeNonAutoSize">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.NonAutoSize"/> property needs to be serialized.
            </summary>
            <returns>Boolean indicating if the property needs to be serialized</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.NonAutoSize"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeButtonStyle">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetButtonStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerializeUseDefaultContextMenu">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResetUseDefaultContextMenu">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the button appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the scroll thumb appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the scroll track appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the control appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ShouldSerialize">
            <summary>
            Indicates if the control needs to be serialized.
            </summary>
            <returns>A boolean indicating if the control needs to be serialized.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Reset">
            <summary>
            Resets the control's properties to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.PerformAction(Infragistics.Win.UltraWinScrollBar.ScrollBarAction)">
            <summary>
            Performs the action specified.
            </summary>
            <param name="actionCode">Action to perform.</param>
            <returns>A boolean indicating if the action was performed.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.PerformAction(Infragistics.Win.UltraWinScrollBar.ScrollBarAction,System.Boolean,System.Boolean)">
            <summary>
            Performs the action specified based on the key state provided.
            </summary>
            <param name="actionCode">Enumeration indicating the action to take.</param>
            <param name="control">Indicates if the control key is depressed</param>
            <param name="shift">Indicates if the shift key is depressed</param>
            <returns>A boolean indicating if the action was performed.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Initialize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the properties of the <b>ScrollBarInfo</b> with the specified values.
            </summary>
            <param name="minimum">Minimum value the user can drag to.</param>
            <param name="maximumDragValue">Maximum value the user can drag to.</param>
            <param name="smallChange">How much the control scrolls when using the scroll arrows.</param>
            <param name="largeChange">How much the control scrolls when clicking in the scroll track.</param>
            <remarks>
            <p class="body">Since the actual maximum value that can be achieved by using the interface may be less than the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> property, this method provides a way to specify the actual maximum value that the user should be able to get to.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MaximumDragValue"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.GetMaximumDragValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the maximum drag value for the specified values of the control.
            </summary>
            <param name="minimum">Minimum value</param>
            <param name="maximum">Maximum value</param>
            <param name="largeChange">Large change</param>
            <returns>The maximum value that the user can achieve when using the <b>UltraScrollBar</b> interface.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MaximumDragValue"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for the control.
            </summary>
            <returns>A new accessibility object for the control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnPropertyChanged(Infragistics.Win.PropertyChangedEventArgs)">
            <summary>
            Fired after a property has changed
            </summary>
            <param name="e">Event arguments containing information about the property change</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Scroll"/> event when the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnScroll</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnScroll</b> in a derived class, be sure to call the base class's <b>OnScroll</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Scroll"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ValueChanged"/> event when the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnValueChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnValueChanged</b> in a derived class, be sure to call the base class's <b>OnValueChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ValueChanged"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnMouseEnterElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.UltraControlBase.MouseEnterElement"/> event when an element is entered (the mouse is moved over the element).
            </summary>
            <param name="e">An <see cref="T:Infragistics.Win.UIElementEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnMouseEnterElement</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnMouseEnterElement</b> in a derived class, be sure to call the base class's <b>OnMouseEnterElement</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UIElementEventArgs"/>
            <seealso cref="E:Infragistics.Win.UltraControlBase.MouseEnterElement"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnMouseLeaveElement(Infragistics.Win.UIElementEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Win.UltraControlBase.MouseEnterElement"/> event when an element is left (the mouse is moved out of an element).
            </summary>
            <param name="e">An <see cref="T:Infragistics.Win.UIElementEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnMouseLeaveElement</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnMouseLeaveElement</b> in a derived class, be sure to call the base class's <b>OnMouseLeaveElement</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.UIElementEventArgs"/>
            <seealso cref="E:Infragistics.Win.UltraControlBase.MouseEnterElement"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overrides the control's determination of what is considered an input key.
            </summary>
            <param name="keyData">Key</param>
            <returns>A boolean indicating if this key is an input key for the control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnCreateControl">
            <summary>
            Initializes the control upon creation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Override the sizing of the control when autosized.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Dispose(System.Boolean)">
            <summary>
            Handles disposing the control's resources.
            </summary>
            <param name="disposing">Boolean indicating if managed and unmanaged resources should be released.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnResize(System.EventArgs)">
            <summary>
            Handles the resize of the control.
            </summary>
            <param name="e">System.EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnTabStopChanged(System.EventArgs)">
            <summary>
            Handles the changing of the tabstop property.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the message notification when releasing a key.
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnGotFocus(System.EventArgs)">
            <summary>
            Handles the notification when the control receives focus.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnLostFocus(System.EventArgs)">
            <summary>
            Handles the notification when the control loses focus.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes the <b>MouseUp</b> event when the mouse button is released.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.About">
            <summary>
            Display the about dialog
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Infragistics#Shared#IUltraLicensedComponent#License">
            <summary>
            Returns the cached license for the control
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ControlUIElement">
            <summary>
            Returns the main control uielement.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarInfo">
            <summary>
            ScrollBarInfo
            </summary>
            <remarks>
            <p class="body">The ScrollBarInfo object is used to maintain the state information for the ScrollBar. The control delegates many of its properties to the <b>ScrollBarInfo</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MinMaxButtonsVisible">
            <summary>
            Determines if the Min and Max buttons are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Orientation">
            <summary>
            Determines the orientation of the ScrollBar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollBarArrowStyle">
            <summary>
            Determines the number and positioning of the scroll bar arrow buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum">
            <summary>
            Minimum position of the scroll thumb.
            </summary>
            <remarks>
            <p class="note">If the <b>Minimum</b> is set to a value greater than the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> will be updated to the same value. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> is less than the new <b>Minimum</b>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> will be set to the new <b>Minimum</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum">
            <summary>
            Maximum position of the scroll thumb.
            </summary>
            <remarks>
            <p class="note">If the new <b>Maximum</b> is less than the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> will be set to the new <b>Maximum</b>. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> is greater than the new <b>Maximum</b>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> will be set to the new <b>Maximum</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MaximumDragValue"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value">
            <summary>
            Current position of the scroll thumb.
            </summary>
            <remarks>
            <p class="body">When set, the new <b>Value</b> must be within the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ValueChanged"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange">
            <summary>
            Amount that the scroll thumb will reposition when clicking the scroll arrow buttons.
            </summary>
            <value><p class="note">The value returned is the minimum of the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/> and the stored <b>SmallChange</b>.</p></value>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange">
            <summary>
            Amount that the scroll thumb will reposition when clicking in the scroll track.
            </summary>
            <value><p class="note">The value returned is the minimum of the <b>LargeChange</b> and the current range. The current range is determined by subtracting the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> from the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> and adding 1 to the result.</p></value>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.SmallChange"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoDisable">
            <summary>
            Returns or sets whether the ScrollBar will appear disabled when the scroll thumb cannot be moved.
            </summary>
            <remarks>
            <p class="body">The intrinsic ScrollBar displays a scroll thumb that encompasses the entire scroll track when the scroll thumb cannot be moved. When <b>AutoDisable</b> is set to true, the ScrollBar will appear disabled when the thumb cannot be scrolled. This occurs when the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Maximum"/> minus the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Minimum"/> plus 1 is greater than the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.LargeChange"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance">
            <summary>
            Default appearance for the <b>ScrollBar</b>.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonAppearance">
            <summary>
            Default appearance for the ScrollBar buttons.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ThumbAppearance">
            <summary>
            Default appearance for the scroll thumb.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TrackAppearance">
            <summary>
            Default appearance for the scroll track.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearances">
            <summary>
            Returns the a collection of user created Appearance objects.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize">
            <summary>
            Determines whether the control automatically sizes based on the orientation and system ScrollBar size settings.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.NonAutoSize"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.NonAutoSize">
            <summary>
            Determines the height/width of the control when autosize is false.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.AutoSize"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UIElement">
            <summary>
            Returns the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement"/> which occupies the client area of the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle">
            <summary>
            Determines the style of buttons used in the control.
            </summary>
            <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyleResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyleResolved">
            <summary>
            Returns the resolved <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/>.
            </summary>
            <remarks>
            <p class="body">When the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ButtonStyle"/> is set to <b>Default</b>, the resolved button style used when rendering the buttons and scroll thumb is <b>Button3D</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu">
            <summary>
            Determines if the default scroll context menu is displayed when the context menu is to be displayed.
            </summary>
            <remarks>
            <p class="body">The default <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollContextMenu"/> will not be displayed if the control's ContextMenu has been set.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollContextMenu"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ScrollContextMenu">
            <summary>
            Returns the default scroll context menu.
            </summary>
            <remarks>
            <p class="body">The <b>ScrollContextMenu</b> is only used if the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/> has been set to true. This context menu is similar to the context menu displayed when clicking on a windows system scrollbar.</p>
            <list type="bullet">
            <listheader><term>Menu Structure:</term></listheader>
            <item><description>Scroll Here    (requires point in scroll track)</description></item>
            <item><description> -sep-</description></item>
            <item><description>Top (or Left Edge)</description></item>
            <item><description>Bottom (or Right Edge)</description></item>
            <item><description> -sep-</description></item>
            <item><description>Page Up (or Page Left)</description></item>
            <item><description>Page Down (or Page Right)</description></item>
            <item><description> -sep-</description></item>
            <item><description>Scroll Up (or Scroll Left)</description></item>
            <item><description>Scroll Down (or Scroll Right)</description></item>
            </list>
            <p class="note">This property is read-only</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UseDefaultContextMenu"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Owner">
            <summary>
            Returns or sets the owning UltraControlBase.
            </summary>
            <remarks>When set, the scroll bar will use the owner's FlatMode, AlphaBlendEnabled and filter properties as it's own values.</remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.EventManager">
            <summary>
            The object that enables, disables and controls firing of <b>UltraScrollBar</b> specific events.
            </summary>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Scroll"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ValueChanged"/>
            <seealso cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.CurrentState">
            <summary>
            Returns bit flags that signify the state of the control
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.KeyActionMappings"/>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.PerformAction(Infragistics.Win.UltraWinScrollBar.ScrollBarAction)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.KeyActionMappings">
            <summary>
            The mappings collection that relates key strokes with actions.
            </summary>
            <remarks>
            <p class="body">The following table lists the default key mappings for the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/> control: <br></br>
            <table border="1" cellpadding="3" width="100%" class="FilteredItemListTable">
            <thead>
            <tr>
            <th>KeyCode</th>
            <th>ActionCode</th>
            <th>StateRequired</th>
            <th>StateDisallowed</th>
            <th>SpecialKeysRequired</th>
            <th>SpecialKeysDisallowed</th>
            </tr>
            </thead>
            <tbody>
            <tr><td class="body">Left</td><td class="body">SmallDecrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Right</td><td class="body">SmallIncrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Up</td><td class="body">SmallDecrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Down</td><td class="body">SmallIncrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Prior</td><td class="body">LargeDecrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Next</td><td class="body">LargeIncrement</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">Home</td><td class="body">First</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            <tr><td class="body">End</td><td class="body">Last</td><td class="body"></td><td class="body">ThumbDrag</td><td class="body"></td><td class="body">Alt</td></tr>
            </tbody>
            </table>
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.CurrentState"/>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.PerformAction(Infragistics.Win.UltraWinScrollBar.ScrollBarAction)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.MaximumDragValue">
            <summary>
            Maximum value that can be reached when using the interface to change the value.
            </summary>
            <remarks>
            <p class="body">The Infragistics ScrollBar was designed to duplicate the functionality and
            behavior of the intrinsic ScrollBar but utilize the Presentation Layer Framework. In
            the intrinsic ScrollBar, the large change value is taken into consideration when 
            determining the maximum value that you can drag the scroll thumb, use the scroll arrows
            or click in the scroll track. Specifically, the maximum value is a result of Maximum
            minus the LargeChange plus 1. The MaximumDragValue property has been exposed to make it
            easier to determine this value.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Scroll">
            <summary>
            Event that occurs when the scroll thumb is repositioned.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ValueChanged">
            <summary>
            Event that occurs when the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/> property changes.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.BackColor">
            <summary>
            Overriden. The <b>BackColor</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.BackgroundImage">
            <summary>
            Overriden. The <b>BackgroundImage</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Font">
            <summary>
            Overriden. The <b>Font</b> property should be used to initialize a default font for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ForeColor">
            <summary>
            Overiden. The <b>ForeColor</b> for the control should be set via the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Appearance"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Cursor">
            <summary>
            Overriden. The <b>Cursor</b> property should be used to initialize a default cursor for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.DefaultSize">
            <summary>
            Returns the default size for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.TabStop">
            <summary>
            Determines whether the control will receive focus when tabbing through the controls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.DefaultImeMode">
            <summary>
            Determines the default ImeMode for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.ImeMode">
            <summary>
            Determines the ImeMode for the control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.Text">
            <summary>
            Text property - Not supported.
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.DoubleClick">
            <summary>
            DoubleClick event is not used for a scroll bar control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject">
            <summary>
            Accessible object representing an <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject.#ctor(Infragistics.Win.UltraWinScrollBar.UltraScrollBar)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject"/>
            </summary>
            <param name="ownerControl">Control which is represented by the accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject.GetFocused">
            <summary>
            Returns the object that has the keyboard focus.
            </summary>
            <returns>
            An <b>AccessibleObject</b> that specifies the currently focused child. This method returns the calling object if the object itself is focused. Returns a null reference (<b>Nothing</b> in Visual Basic) if no object has focus.
            </returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBar.UltraScrollBarAccessibleObject.Role">
            <summary>
            Returns the role of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarDesigner">
            <summary>
            Designer for UltraScrollBar control.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarDesigner.SelectionRules">
            <summary>
            Returns the allowable design time selection rules.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle">
            <summary>
            Enumeration of scroll arrow orientations.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle.OneAtEachEnd">
            <summary>
            One scroll button at each end of the scroll track.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle.BothAtLeftTop">
            <summary>
            Both scroll arrow buttons are at the left or top end of the scroll track depending on orientation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle.BothAtRightBottom">
            <summary>
            Both scroll arrow buttons are at the right or bottom end of the scroll track depending on orientation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle.BothAtEachEnd">
            <summary>
            Each end of the scroll track has both scroll arrow buttons.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarArrowStyle.None">
            <summary>
            The scroll arrow buttons are not displayed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarDisplayStyle">
            <summary>
            Determines if a scrollbar will be shown.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarDisplayStyle.Automatic">
            <summary>
            The scrollbar is displayed when needed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarDisplayStyle.Always">
            <summary>
            The scrollbar is always visible
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarDisplayStyle.Never">
            <summary>
            The scrollbar is never displayed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollMode">
            <summary>
            Enumeration indicating how the display is updated while the scroll bar thumb is being dragged.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollMode.Default">
            <summary>
            Default scroll mode
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollMode.Immediate">
            <summary>
            The page area will scroll as the scroll thumb is dragged.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollMode.Deferred">
            <summary>
            Scrolling does not occur until the scroll thumb is released.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollTipStyle">
            <summary>
            Used to determine when scroll tips should be displayed as the thumb is dragged.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollTipStyle.Default">
            <summary>
            Default tip style
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollTipStyle.Show">
            <summary>
            Show tool tips
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollTipStyle.Hide">
            <summary>
            Do not show tool tips
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarAction">
            <summary>
            Enumerates the possible actions for the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/> control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.First">
            <summary>
            Set the value to the minimum value.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.Last">
            <summary>
            Set the value to the maximum value.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.SmallIncrement">
            <summary>
            Increment the value by the SmallChange.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.SmallDecrement">
            <summary>
            Decrement the value by the SmallChange.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.LargeIncrement">
            <summary>
            Increment the value by the LargeChange
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarAction.LargeDecrement">
            <summary>
            Decrement the value by the LargeChange
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarState">
            <summary>
            Bit flags that describe the state of the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/> control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarState.ThumbDrag">
            <summary>
            The scroll thumb is being dragged.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarState.Vertical">
            <summary>
            The ScrollBar is oriented vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarState.Horizontal">
            <summary>
            The ScrollBar is oriented horizontally.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping">
            <summary>
            ScrollBarKeyActionMapping
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping.#ctor(System.Windows.Forms.Keys,Infragistics.Win.UltraWinScrollBar.ScrollBarAction,Infragistics.Win.UltraWinScrollBar.ScrollBarState,Infragistics.Win.UltraWinScrollBar.ScrollBarState,Infragistics.Win.SpecialKeys,Infragistics.Win.SpecialKeys)">
            <summary>
            Constructor, initializes a new instance of <b>ScrollBarKeyActionMapping</b>
            </summary>
            <param name="keyCode">Keys</param>
            <param name="actionCode">Action to take</param>
            <param name="stateDisallowed">State that the control cannot be in.</param>
            <param name="stateRequired">State that the control must be in.</param>
            <param name="specialKeysDisallowed">Special keys (ctrl, etc.) not allowed to be pressed.</param>
            <param name="specialKeysRequired">Special keys (ctrl, etc.) required to be held down.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping.ActionCode">
            <summary>
            Determines the action to take.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping.StateDisallowed">
            <summary>
            State that the control cannot be in for the action to be allowed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping.StateRequired">
            <summary>
            State that the control must be in for the action to be allowed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings">
            <summary>
            ScrollBarKeyActionMappings
            </summary> 
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>ScrollBarKeyActionMappings</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.LoadDefaultMappings">
            <summary>
            Called the first time GetActionMapping
            is called (enables lazy loading of mappings)
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.CopyTo(Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMapping[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="array">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.CreateActionStateMappingsCollection">
            <summary>
            Creates an instance of an ActionStateMappingsCollection derived class
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.Item(System.Int32)">
            <summary>
            indexer 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.ScrollBarKeyActionMappingEnumerator">
            <summary>
             Summary description for KeyActionMappingEnumerator
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.ScrollBarKeyActionMappingEnumerator.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings)">
            <summary>
            Constructor
            </summary>
            <param name="mappings"></param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarKeyActionMappings.ScrollBarKeyActionMappingEnumerator.Current">
            <summary>
            non-IEnumerator version: type-safe
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement">
            <summary>
            UIElement class for Min/Max (First/Last) scroll buttons.
            </summary>
            <remarks>
            <p class="body">The <b>MinMaxButtonUIElement</b> contain no child elements and are contained within a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement,System.Windows.Forms.ScrollButton)">
            <summary>
            Constructor, initializes a new instance of <b>MinMaxButtonUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
            <param name="direction">Direction of the min max indicator.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.Reset(System.Windows.Forms.ScrollButton)">
            <summary>
            Resets the direction of the min max arrow.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the min/max arrow indicator.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the button appearance.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedProps">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering a themed min/max button.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>True if the themed element could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Called to give control focus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.Direction">
            <summary>
            Returns the direction of the scroll arrow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement.ButtonStyle">
            <summary>
            Returns the button style for the element.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement">
            <summary>
            UIElement class for scroll arrows for a ScrollBar.
            </summary>
            <remarks>
            <p class="body">The <b>ScrollArrowUIElement</b> contain no child elements and are contained within a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement,System.Windows.Forms.ScrollButton)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollArrowUIElement</b>
            </summary>
            <param name="parent">Parent element</param>
            <param name="scrollButtonType">ScrollButton direction</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedProps">AppearancePropFlags</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the button is released
            </summary>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Called to give control focus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.Direction">
            <summary>
            Returns the direction of the scroll button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.ButtonStyle">
            <summary>
            Returns the button style for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement.DrawsImageBackground">
            <summary>
            Determines whether the element can render an image background.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo">
            <summary>
            Object used to maintain the state information for a ScrollBar.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.MinimumThumbSize">
            <summary>
            Minimum size for the scroll thumb in pixels.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Orientation,Infragistics.Win.AppearancesCollection)">
            <summary>
            Initializes a new <b>ScrollBarInfo</b> object with the specified <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation"/>, owning control and appearances collection.
            </summary>
            <param name="orientation">Orientation of the ScrollBar.</param>
            <param name="owningControl">Control which owns/contains the ScrollBar.</param>
            <param name="appearances">Appearances collection of the owning control.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeOrientation">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetOrientation">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeMinimum">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetMinimum">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeMaximum">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetMaximum">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeValue">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetValue">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeSmallChange">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetSmallChange">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeLargeChange">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetLargeChange">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/> property to its default value.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeScrollBarLook">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarLook"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarLook"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetScrollBarLook">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarLook"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarLook"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeButtonStyle">
            <summary>
            Determines if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetButtonStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerializeAutoDisable">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable"/> property needs to be serialized.
            </summary>
            <returns>True if the property value differs from the default value.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ResetAutoDisable">
            <summary>
            Resets the value of the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Activate(System.Windows.Forms.Control)">
            <summary>
            Initialize the <b>ScrollBarInfo</b>
            </summary>
            <param name="owningControl">The owning control</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Catches subobject property changes.
            </summary>
            <param name="propChangeInfo">Notification information.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Initialize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the properties of the <b>ScrollBarInfo</b> with the specified values.
            </summary>
            <param name="minimum">Minimum value the user can drag to.</param>
            <param name="maximumDragValue">Maximum value the user can drag to.</param>
            <param name="smallChange">How much the control scrolls when using the scroll arrows.</param>
            <param name="largeChange">How much the control scrolls when clicking in the scroll track.</param>
            <remarks>
            <p class="body">Since the actual maximum value that can be achieved by using the interface may be less than the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> property, this method provides a way to specify the actual maximum value that the user should be able to get to.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.MaximumDragValue"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.GetMaximumDragValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the maximum drag value for the specified values of the control.
            </summary>
            <param name="minimum">Minimum value</param>
            <param name="maximum">Maximum value</param>
            <param name="largeChange">Large change</param>
            <returns>The maximum value that the user can achieve when using the UltraScrollBar interface.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.MaximumDragValue"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShouldSerialize">
            <summary>
            Indicates if the <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo"/> needs to be serialized.
            </summary>
            <returns>A boolean indicating if the control needs to be serialized.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Reset">
            <summary>
            Resets the <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo"/> properties to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.OnDispose">
            <summary>
            Handles the disposing of the object's resources.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Show">
            <summary>
            Notify the listening scrollbar elements that the scrollbar should be visible.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Hide">
            <summary>
            Notify the listening scrollbar elements that the scrollbar should be hidden.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.CancelScroll">
            <summary>
            Cancels the current scroll operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.CancelScroll(System.Boolean)">
            <summary>
            Cancels the current scroll operation.
            </summary>
            <param name="preventScrollNotifications">True if any further notifications up to the next EndScroll should be prevented.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject,Infragistics.Win.UIElement)">
            <summary>
            Creates an accessible object representing the scrollbar.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <param name="scrollBarElement">UIElement associated with the accessibility object. The element will provide location and other information about the scrollbar.</param>
            <returns>An accessible object that represents the scrollbar.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.CreateAccessibilityInstance(System.Windows.Forms.AccessibleObject)">
            <summary>
            Creates an accessible object representing the scrollbar.
            </summary>
            <param name="parent">Parent accessible object for the accessible object to create</param>
            <returns>An accessible object that represents the scrollbar.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.CreateAccessibilityInstance">
            <summary>
            Creates an accessible object representing the scrollbar.
            </summary>
            <returns>An accessible object that represents the scrollbar.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.PerformAction(Infragistics.Win.UltraWinScrollBar.ScrollBarAction)">
            <summary>
            Used to programatically invoke a scroll action.
            </summary>
            <param name="actionCode">Enumeration indicating the action to take.</param>
            <returns>A boolean indicating if the action was performed.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Scroll"/> event when the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnScroll</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnScroll</b> in a derived class, be sure to call the base class's <b>OnScroll</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Scroll"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ValueChanged"/> event when the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnValueChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnValueChanged</b> in a derived class, be sure to call the base class's <b>OnValueChanged</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ValueChanged"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.OwningControl">
            <summary>
            Returns the control that owns the <b>ScrollBarInfo</b>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Orientation">
            <summary>
            Determines the orientation of the ScrollBar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum">
            <summary>
            Minimum position of the scroll thumb.
            </summary>
            <remarks>
            <p class="note">If the <b>Minimum</b> is set to a value greater than the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> will be updated to the same value. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> is less than the new <b>Minimum</b>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> will be set to the new <b>Minimum</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum">
            <summary>
            Maximum position of the scroll thumb.
            </summary>
            <remarks>
            <p class="note">If the new <b>Maximum</b> is less than the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> will be set to the new <b>Maximum</b>. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> is greater than the new <b>Maximum</b>, the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> will be set to the new <b>Maximum</b>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.MaximumDragValue"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value">
            <summary>
            Current position of the scroll thumb.
            </summary>
            <remarks>
            <p class="body">When set, the new <b>Value</b> must be within the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> and <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ValueChanged"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange">
            <summary>
            Amount that the scroll thumb will reposition when clicking the scroll arrow buttons.
            </summary>
            <value><p class="note">The value returned is the minimum of the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/> and the stored <b>SmallChange</b>.</p></value>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange">
            <summary>
            Amount that the scroll thumb will reposition when clicking in the scroll track.
            </summary>
            <value><p class="note">The value returned is the minimum of the <b>LargeChange</b> and the current range. The current range is determined by subtracting the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> from the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> and adding 1 to the result.</p></value>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarLook">
            <summary>
            Determines the appearance of the ScrollBar
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle">
            <summary>
            Determines the style of buttons used in the control.
            </summary>
            <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyleResolved"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyleResolved">
            <summary>
            Returns the resolved <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/>.
            </summary>
            <remarks>
            <p class="body">When the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ButtonStyle"/> is set to <b>Default</b>, the resolved button style used when rendering the buttons and scroll thumb is <b>Button3D</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.IsThumbInDrag">
            <summary>
            Indicates if the scroll thumb is currently being dragged.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ShowsFocus">
            <summary>
            Indicates if the scroll thumb should toggle its state to indicate focus.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement"/> is used to indicate that the scroll bar has focus. Normally, scrollbar controls do not take focus but when it is indicated that the control should display a focus indication, the backcolor of the scroll thumb is changed from solid to hatched intermittently.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Visible">
            <summary>
            Indicates the visibility of the elements listening to the <b>ScrollBarInfo</b>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.MaximumDragValue">
            <summary>
            Maximum value that can be reached when using the interface to change the value.
            </summary>
            <remarks>
            <p class="body">The Infragistics ScrollBar was designed to duplicate the functionality and
            behavior of the intrinsic ScrollBar but utilize the Presentation Layer Framework. In
            the intrinsic ScrollBar, the large change value is taken into consideration when 
            determining the maximum value that you can drag the scroll thumb, use the scroll arrows
            or click in the scroll track. Specifically, the maximum value is a result of Maximum
            minus the LargeChange plus 1. The MaximumDragValue property has been exposed to make it
            easier to determine this value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Enabled">
            <summary>
            Determines the enabled state of the scroll bar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.EnabledResolved">
            <summary>
            Indicates if the ScrollBar appears disabled based on the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Enabled"/> and <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable"/> properties.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoDisable">
            <summary>
            Returns or sets whether the ScrollBar will appear disabled when the scroll thumb cannot be moved.
            </summary>
            <remarks>
            <p class="body">The intrinsic ScrollBar displays a scroll thumb that encompasses the entire scroll track when the scroll thumb cannot be moved. When <b>AutoDisable</b> is set to true, the ScrollBar will appear disabled when the thumb cannot be scrolled. This occurs when the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Maximum"/> minus the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Minimum"/> plus 1 is greater than the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.LargeChange"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.IsScrollCancelled">
            <summary>
            Indicates if the scroll operation has been cancelled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.IsScrollInProgress">
            <summary>
            Indicates if a scroll operation is currently in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AutoRepeatDelay">
            <summary>
            Determines the amount of milliseconds between scroll notifications when using the scroll arrows or scroll track.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.PriorityScrolling">
            <summary>
            Gets/sets whether callbacks made during a scroll operation occur synchronously or asynchronously.
            </summary>
            <value>
            When true, scroll notifications as a result of a scroll arrow or scroll track click will occur synchronously.
            </value>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AccessibleName">
            <summary>
            Returns or sets the name of the scrollbar displayed by accessibility clients.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.AccessibleDescription">
            <summary>
            Returns or sets the description of the scrollbar displayed by accessibility clients.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SetFocusOnClick">
            <summary>
            Returns or sets whether clicking on the scrollbar buttons will force focus to the containing control.
            </summary>
            <remarks>
            <p class="body">By default, the <b>Focus</b> method of the containing control is invoked when the scroll buttons are pressed. This property can be used to prevent that behavior if necessary.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Scroll">
            <summary>
            Event that occurs when the scroll thumb is repositioned.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.SmallChange"/>
        </member>
        <member name="E:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ValueChanged">
            <summary>
            Event that occurs when the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/> property changes.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.Value"/>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject">
            <summary>
            An accessible object representing a scrollbar.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarInfo,System.Windows.Forms.AccessibleObject)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject"/>
            </summary>
            <param name="scrollInfo">Owning scrollbar info</param>
            <param name="parent">Parent accessible object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarInfo,System.Windows.Forms.AccessibleObject,Infragistics.Win.UIElement)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject"/>
            </summary>
            <param name="scrollInfo">Owning scrollbar info</param>
            <param name="parent">Parent accessible object</param>
            <param name="scrollBarElement">Scrollbar element</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index
            </summary>
            <param name="index">The zero-based index of the accessible child</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Name">
            <summary>
            The accessible name for the data area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.GetMarshallingControl">
            <summary>
            Returns the control used to synchronize accessibility calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object
            </summary>
            <param name="navdir">One of the <b>AccessibleNavigation</b> values</param>
            <returns>An <b>AccessibleObject</b> that represents one of the <b>AccessibleNavigation</b> values</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Name">
            <summary>
            The accessible name for the data area.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance of the specified object. Not all objects have a description
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarInfo.ScrollBarAccessibleObject.ScrollBarItemAccessibleObject.State">
            <summary>
            Returns the state of the accessible object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarLook">
            <summary>
            Object used to maintain the Appearance information for a ScrollBar.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollBarLook</b> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.#ctor(Infragistics.Win.AppearancesCollection)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollBarLook</b> class
            </summary>
            <param name="appearances"><see cref="T:Infragistics.Win.AppearancesCollection"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor, initializes a new instance of the <b>ScrollBarLook</b> class
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Initializes the object after deserialization.
            </summary>
            <param name="sender">object</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeMinMaxButtonsVisible">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.MinMaxButtonsVisible"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.MinMaxButtonsVisible"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetMinMaxButtonsVisible">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.MinMaxButtonsVisible"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.MinMaxButtonsVisible"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeScrollBarArrowStyle">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ScrollBarArrowStyle"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ScrollBarArrowStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetScrollBarArrowStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ScrollBarArrowStyle"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ScrollBarArrowStyle"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeAppearanceHorizontal">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetAppearanceHorizontal">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeAppearanceVertical">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetAppearanceVertical">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeButtonAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetButtonAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeButtonAppearanceHorizontal">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetButtonAppearanceHorizontal">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeButtonAppearanceVertical">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetButtonAppearanceVertical">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeThumbAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetThumbAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeThumbAppearanceHorizontal">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetThumbAppearanceHorizontal">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeThumbAppearanceVertical">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetThumbAppearanceVertical">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeTrackAppearance">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetTrackAppearance">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeTrackAppearanceHorizontal">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetTrackAppearanceHorizontal">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerializeTrackAppearanceVertical">
            <summary>
            Indicates whether the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if an <b>Appearance</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResetTrackAppearanceVertical">
            <summary>
            Resets the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Use this method to reset the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property. If the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property was set to an Appearance from the <b>Appearances</b> collection, the properties on the <see cref="T:Infragistics.Win.AppearanceBase"/> object in the collection will remain the same but the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property will no longer be attached to that <see cref="T:Infragistics.Win.AppearanceBase"/>. To reset the properties of the associated <b>Appearance</b> object, the <see cref="M:Infragistics.Win.Appearance.Reset"/> method of the <b>Appearance</b> object itself should be invoked instead.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
            <seealso cref="M:Infragistics.Win.AppearanceBase.Reset"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.InitializeAppearances(Infragistics.Win.AppearancesCollection)">
            <summary>
            Initializes the <see cref="T:Infragistics.Win.AppearancesCollection"/> for the ScrollBar appearance objects.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Reset">
            <summary>
            Resets the properties of the <b>ScrollBarLook</b> object to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ShouldSerialize">
            <summary>
            Indicates if the <b>ScrollBarLook</b> object needs to be serialized.
            </summary>
            <returns>A boolean indicating if the object needs to be serialized.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.OnDispose">
            <summary>
            Handles the disposing of the object's resources.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Receives subobject change notifications.
            </summary>
            <param name="propChangeInfo">Notification information</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the button appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)">
            <summary>
            Resolves the button appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="orientation">enumeration indicating the orientation of the UltraScrollbar</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the scroll thumb appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)">
            <summary>
            Resolves the scroll thumb appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="orientation">enumeration indicating the orientation of the UltraScrollbar</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the scroll track appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)">
            <summary>
            Resolves the scroll track appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="orientation">enumeration indicating the orientation of the UltraScrollbar</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves the ScrollBar's appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)">
            <summary>
            Resolves the ScrollBar's appearance.
            </summary>
            <param name="appearance">Structure to receive the updated appearance info.</param>
            <param name="requestedProps">Flag enumeration indicating which properties need to be resolved.</param>
            <param name="orientation">enumeration indicating the orientation of the UltraScrollbar</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Clone">
            <summary>
            Returns a copy of this ScrollBarLook object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.OnDeserialization(System.Object)">
            <summary>
            Invoked after the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for the this parameter is not currently implemented.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Infragistics#Win#ISupportPresets#GetPresetProperties(Infragistics.Win.PresetType)">
            <summary>
            Returns a list of properties which can be used in a Preset
            </summary>
            <param name="presetType">Determines which type(s) of properties are returned</param>
            <returns>An array of strings indicating property names</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Infragistics#Win#ISupportPresets#GetPresetTargetTypeName">
            <summary>
            Returns the TypeName of the Preset target
            </summary>
            <returns>Returns "ScrollBarLook"</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.MinMaxButtonsVisible">
            <summary>
            Determines if the Min and Max buttons are displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ScrollBarArrowStyle">
            <summary>
            Determines the number and positioning of the scroll bar arrow buttons.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance">
            <summary>
            Default appearance for the <b>ScrollBar</b>.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.Appearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal">
            <summary>
            Default horizontal appearance for the <b>ScrollBar</b>.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasAppearanceHorizontal">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical">
            <summary>
            Default vertical appearance for the <b>ScrollBar</b>.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasAppearanceVertical">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance">
            <summary>
            Default appearance for the ScrollBar buttons.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasButtonAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal">
            <summary>
            Default appearance for the horizontal ScrollBar buttons.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasButtonAppearanceHorizontal">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceHorizontal"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical">
            <summary>
            Default appearance for the vertical ScrollBar buttons.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveButtonAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasButtonAppearanceVertical">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance">
            <summary>
            Default appearance for the scroll thumb.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasThumbAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal">
            <summary>
            Default appearance for the horizontal scroll thumb.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasThumbAppearanceHorizontal">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical">
            <summary>
            Default appearance for the vertical scroll thumb.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollThumbAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasThumbAppearanceVertical">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance">
            <summary>
            Default appearance for the scroll track.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasTrackAppearance">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearance"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal">
            <summary>
            Default appearance for the horizontal scroll track.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasTrackAppearanceHorizontal">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceHorizontal"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical">
            <summary>
            Default appearance for the vertical scroll track.
            </summary>
            <seealso cref="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ResolveScrollTrackAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@,System.Windows.Forms.Orientation)"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.HasTrackAppearanceVertical">
            <summary>
            Indicates whether an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.
            </summary>
            <value>Returns true when the <b>Appearance</b> object for the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/> property has been created.</value>
            <remarks>
            <p class="body">Use this property to determine if an <see cref="T:Infragistics.Win.AppearanceBase"/> object has been created.  Appearance objects in general are not created until the properties associated with them are accessed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceVertical"/>
            <seealso cref="T:Infragistics.Win.AppearanceBase"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.AppearanceCallback">
            <summary>
            Returns or sets the delegate used during the appearance resolution process to resolve the default appearance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ButtonAppearanceCallback">
            <summary>
            Returns or sets the delegate used during the appearance resolution process to resolve the button appearance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.ThumbAppearanceCallback">
            <summary>
            Returns or sets the delegate used during the appearance resolution process to resolve the thumb appearance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarLook.TrackAppearanceCallback">
            <summary>
            Returns or sets the delegate used during the appearance resolution process to resolve the track appearance.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarLookTypeConverter">
            <summary>
            TypeConverter for the <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarLook"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLookTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarLookTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement">
            <summary>
            Main UIElement class for a ScrollBar
            </summary>
            <remarks>
            <p class="body">The <b>ScrollBarUIElement</b> can contain 0,2 or 4 <see cref="T:Infragistics.Win.UltraWinScrollBar.MinMaxButtonUIElement"/> and <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollArrowUIElement"/> objects and one <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.#ctor(Infragistics.Win.UIElement,Infragistics.Win.UltraWinScrollBar.ScrollBarInfo)">
            <summary>
            Initializes a new <b>ScrollBarUIElement</b> with the specified parent element and ScrollBarInfo object.
            </summary>
            <param name="parent">Parent element</param>
            <param name="scrollInfo">ScrollBarInfo class containing state information for the ScrollBar.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.OnDispose">
            <summary>
            Called when the element is disposed..
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.PositionChildElements">
            <summary>
            Handles the positioning and creation of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance.
            </summary>
            <param name="appearance">AppearanceData to update with the appearance information</param>
            <param name="requestedProps">Flags indicating the appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.Reset(Infragistics.Win.UltraWinScrollBar.ScrollBarInfo)">
            <summary>
            Provides a mechanism to reset the scroll info object that the uielement listens to.
            </summary>
            <param name="scrollInfo">ScrollBarInfo</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.Orientation">
            <summary>
            Returns the orientation of the scroll bar element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.Enabled">
            <summary>
            Gets/sets whether this element is enabled.
            </summary>
            <remarks>
            <p class="note">Note: this will return false if the element, the associated ScrollBarInfo, or any of its ancestors are disabled.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.IsAccessibleElement">
            <summary>
            Indicates if the element supports accessibility
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement.AccessibilityInstance">
            <summary>
            Returns the accessible object that represents the element or its associated object.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu">
            <summary>
            Context menu control used by the <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.UltraScrollBar"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.OnPopup(System.EventArgs)">
            <summary>
            Handles displaying the popup menu.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.Dispose(System.Boolean)">
            <summary>
            Maintains if the context menu has already been disposed.
            </summary>
            <param name="disposing">Boolean indicating if any unmanaged resources need to be released.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.RightToLeft">
            <summary>
            Determines whether the context menu is aligned right to left.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.IsDisposed">
            <summary>
            Returns a flag indicating if the context menu has been disposed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.UltraScrollBar">
            <summary>
            Returns the owning <see cref="P:Infragistics.Win.UltraWinScrollBar.ScrollContextMenu.UltraScrollBar"/> control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement">
            <summary>
            UIElement used to render a scroll thumb.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement)">
            <summary>
            Initializes a new <b>ScrollThumbUIElement</b> with the specified <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement"/> parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedProps">Appearance properties that need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.InitializeDefaultAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Invoked during the <see cref="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)"/> to resolve any remaining appearance values
            after the style specific appearance information has been initialized.
            </summary>
            <param name="appearanceData">AppearanceData structure to update</param>
            <param name="requestedProps">Appearance properties to resolve</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.DrawBorders(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the borders for the element.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean,Infragistics.Win.UIElement@)">
            <summary>
            Overrides the default mouse down behavior to capture the mouse on a left mouse button down.
            </summary>
            <param name="e">Mouse event arguments</param>
            <param name="adjustableArea">True if left clicked over adjustable area of element.</param>
            <param name="captureMouseForElement">If not null on return will capture the mouse and forward all mouse messages to this element.</param>
            <returns>If true then bypass default processing</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called on a mouse move message
            </summary>
            <param name="e">Mouse event arguments </param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Clear internal flags and invalidate the button
            </summary>
            <returns>Returning true will ignore the next click event</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles drawing the backcolor for the ScrollThumb.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnDispose">
            <summary>
            Called when element is disposed of
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Called to give control focus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement.ButtonStyle">
            <summary>
            Returns the button style for the scroll thumb.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement">
            <summary>
            UIElement class for the area above or below the <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement"/> in a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.#ctor(Infragistics.Win.UIElement,System.Windows.Forms.ScrollButton,System.Boolean)">
            <summary>
            Constructor, initializes new instance of the <b>ScrollTrackSubAreaUIElement</b> class.
            </summary>
            <param name="parent">Parent element</param>
            <param name="direction">Direction traversed when clicked upon.</param>
            <param name="topLeftTrack">Boolean indicating if this element is the upper track in the scrollbar.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance"></param>
            <param name="requestedProps"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the button is released
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.OnCaptureAborted">
            <summary>
            Called when mouse capture has been aborted, for example, when the
            'escape' key is pressed during a drag operation.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.DrawForeground(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the foreground.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles rendering the background.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.OnControlFocus(Infragistics.Win.ControlUIElementBase@)">
            <summary>
            Called to give control focus
            </summary>
            <param name="controlElement">control to give focus to</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.ButtonStyle">
            <summary>
            ButtonStyle for the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.IsButtonStyleMouseActive">
            <summary>
            Indicates if the button style requires invalidation of the element
            on the mouse enter and exit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.Direction">
            <summary>
            Returns the direction traversed when the area is clicked.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.UpperTrack">
            <summary>
            Indicates if this ScrollBar subtrack is the upper (top for vertical, left for
            horizontal) area of the scrollbar.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement.DrawsImageBackground">
            <summary>
            Determines whether the element can render an image background.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement">
            <summary>
            UIElement class for the scroll track area of a ScrollBar.
            </summary>
            <remarks>
            <p class="body">The <b>ScrollTrackUIElement</b> is contained in a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement"/> and can contain one <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollThumbUIElement"/> and 0 - 2 <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollTrackSubAreaUIElement"/> objects depending upon the position of the scroll thumb and the enabled state of the ScrollBar.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement.#ctor(Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement)">
            <summary>
            Constructor, initializes a new instance of <b>ScrollTrackUIElement</b>
            </summary>
            <param name="parent">Parent element.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement.PositionChildElements">
            <summary>
            Handles creation/positioning of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement.InitAppearance(Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Initializes the appearance of the element.
            </summary>
            <param name="appearance">AppearanceData</param>
            <param name="requestedProps">Appearance properties that need to be resolved.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement.DrawBackColor(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles drawing the backcolor for the scroll track area.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.ScrollTrackUIElement.DrawTheme(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Handles the rendering of the element using the system themes.
            </summary>
            <param name="drawParams">UIElementDrawParams</param>
            <returns>A boolean indicating if the element was able to successfully
            render with the system theme. Used to determine whether the remaining
            draw methods are invoked.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement">
            <summary>
            Main UIElement for the <see cref="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.UltraScrollBar"/> control.
            </summary>
            <remarks>
            <p class="body">The <b>UltraScrollBarControlUIElement</b> only contains a <see cref="T:Infragistics.Win.UltraWinScrollBar.ScrollBarUIElement"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.#ctor(Infragistics.Win.UltraWinScrollBar.UltraScrollBar)">
            <summary>
            Constructor, initializes new instance of <b>UltraScrollBarControlUIElement</b>
            </summary>
            <param name="owner">Owning control</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.PositionChildElements">
            <summary>
            Handles positioning and creation of the child elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.PerformKeyAction(System.Enum,System.Boolean,System.Boolean)">
            <summary>
            Performs the action and returns true if message was handled
            </summary>
            <param name="actionCode"></param>
            <param name="shift"> true if shift key down </param>
            <param name="control"> true if control key down </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.OnPreMouseDown(Infragistics.Win.MouseMessageInfo@)">
            <summary>
            Overriden. When the control can receive focus and does not have focus, set focus to the control.
            </summary>
            <param name="msgInfo">Information regarding the mouse message.</param>
            <returns>True if the mouse message should not be handled by the elements.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.KeyActionMappings">
            <summary>
            Returns the UltraScrollBar's mappings collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.CurrentState">
            <summary>
            Returns bit flags indicating the current state of the
            control (used to get appropriate key action on keyDown)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarControlUIElement.UltraScrollBar">
            <summary>
            Returns the owning UltraScrollBar control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager">
            <summary>
            UltraScrollBarEventManager
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.#ctor(Infragistics.Win.UltraWinScrollBar.UltraScrollBar)">
            <summary>
            Constructor, initializes new instance of <b>UltraScrollBarEventManager</b>
            </summary>
            <param name="owningControl">UltraScrollBar control associated witht the event manager</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.InProgress(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds)">
            <summary>
            Returns true if the event is in progress (in progress count &gt; 0
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
            <returns><b>True</b> if in progress, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.IsEnabled(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds)">
            <summary>
            Returns true if the event is enabled
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
            <returns><b>True</b> if in enabled, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.SetEnabled(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds,System.Boolean)">
            <summary>
            Sets a specific event enabled or disabled
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
            <param name="enabled">enabled</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.IsEnabled(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups)">
            <summary>
            Returns true if all events in the group are enabled
            </summary>
            <param name="group"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups"/></param>
            <returns><b>True</b> if in enabled, <b>false</b> otherwise</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.SetEnabled(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups,System.Boolean)">
            <summary>
            Sets all events in the group enabled or disabled
            </summary>
            <param name="group"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups"/></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.IncrementInProgress(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds)">
            <summary>
            Increments the in progress count
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.DecrementInProgress(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds)">
            <summary>
            Decrements the in progress count
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.CanFireEvent(Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds)">
            <summary>
            Returns true if the event can be fired
            </summary>
            <param name="eventid"><see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds"/></param>
            <returns><b>true</b> if event can fire, <b>false</b> otherwise</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.UltraScrollBar">
            <summary>
            The associated UltraScrollBar
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.AfterEventIndexes">
            <summary>
            Returns a lazily loaded array of indexes for 
            all the 'After' events
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventManager.BeforeEventIndexes">
            <summary>
            Returns a lazily loaded array of indexes for 
            all the 'After' events
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds">
            <summary>
            Enumerations that uniquely identify the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/> events.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds.MouseEnterElement">
            <summary>
            Event id that identifies the MouseEnterElement event
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds.MouseLeaveElement">
            <summary>
            Event id that identifies the MouseLeaveElement event
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds.ValueChanged">
            <summary>
            Event id that identifies the ValueChanged event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventIds.Scroll">
            <summary>
            Event id that identifies the Scroll event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups">
            <summary>
            Identifies groups of <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/> events
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups.AllEvents">
            <summary>
            All Events
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups.BeforeEvents">
            <summary>
            All Before Events
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.UltraScrollBarEventGroups.AfterEvents">
            <summary>
            All After Events
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds">
            <summary>
            Enumeration of Property identifiers for the <see cref="T:Infragistics.Win.UltraWinScrollBar.UltraScrollBar"/>, <see cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollBarInfo"/> and <see cref="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollBarLook"/> classes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.MinMaxButtonsVisible">
            <summary>
            MinMaxButtonsVisible
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Orientation">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollBarArrowStyle">
            <summary>
            ScrollBarArrowStyle
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Minimum">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Maximum">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Value">
            <summary>
            Value 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.SmallChange">
            <summary>
            SmallChange
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.LargeChange">
            <summary>
            LargeChange
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Appearance">
            <summary>
            Appearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.NonAutoSize">
            <summary>
            NonAutoSize
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.AutoSize">
            <summary>
            AutoSize
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ThumbAppearance">
            <summary>
            ScrollThumbAppearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ButtonAppearance">
            <summary>
            ScrollButtonAppearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.TrackAppearance">
            <summary>
            ScrollTrackAppearance
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ButtonStyle">
            <summary>
            ButtonStyle
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.UseDefaultContextMenu">
            <summary>
            UseDefaultContextMenu
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollBarLook">
            <summary>
            ScrollBarLook
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollBarInfo">
            <summary>
            ScrollBarInfo
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ScrollButtonSize">
            <summary>
            ScrollButtonSize
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.RightToLeft">
            <summary>
            RightToLeft
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Appearances">
            <summary>
            Appearances
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ShowsFocus">
            <summary>
            ShowsFocus
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ThumbReposition">
            <summary>
            ThumbReposition
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.AutoDisable">
            <summary>
            AutoDisable
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.CancelScroll">
            <summary>
            CancelScroll
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.AutoRepeatDelay">
            <summary>
            AutoRepeatDelay property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.PriorityScrolling">
            <summary>
            PriorityScrolling property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ThumbRect">
            <summary>
            ThumbRect
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.AppearanceHorizontal">
            <summary>
            AppearanceHorizontal property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.AppearanceVertical">
            <summary>
            AppearanceVertical property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ThumbAppearanceHorizontal">
            <summary>
            ThumbAppearanceHorizontal property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ThumbAppearanceVertical">
            <summary>
            ThumbAppearanceVertical property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ButtonAppearanceHorizontal">
            <summary>
            ButtonAppearanceHorizontal property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.ButtonAppearanceVertical">
            <summary>
            ButtonAppearanceVertical property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.TrackAppearanceHorizontal">
            <summary>
            TrackAppearanceHorizontal property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinScrollBar.ScrollBarPropertyIds.TrackAppearanceVertical">
            <summary>
            TrackAppearanceVertical property
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinDataSource.IUltraDataRowsCollection">
            <summary>
            IUltraDataRowsCollection interface.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinDataSource.IUltraDataColumn">
            <summary>
            IUltraDataColumn interface.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinDataSource.IUltraDataColumn.AllowDBNull">
            <summary>
            Specifies whether the column allows empty cell values.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs">
            <summary>
            List changed event args used by the UltraDataSource.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="listChangedType"></param>
            <param name="newIndex"></param>
            <param name="oldIndex"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor.
            </summary>
            <param name="listChangedType"></param>
            <param name="propDesc"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="listChangedType"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor used for creating a cell changed event args.
            </summary>
            <param name="listChangedType"></param>
            <param name="newIndex"></param>
            <param name="propertyDescriptor">This parameter can be null.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinDataSource.UltraDataSourceListChangedEventArgs.PropertyDescriptor">
            <summary>
            Gets the property descriptor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.Utilities">
            <summary>
            Utility class containing static helper functions
            </summary>
        </member>
        <member name="M:Infragistics.Win.Utilities.ParseShortcutString(System.String)">
            <summary>
            Parses a localized string and returns the corresponding <b>Shortcut</b> enumeration.
            </summary>
            <param name="shortcutString">A string containing the localized description of the shortcut based on the currently mapped keyboard layout.</param>
            <returns>The corrsponding Shortcut enumeration value</returns>
            <p class="note">Note: The default separator (+) will be used to segment the string.</p>
        </member>
        <member name="M:Infragistics.Win.Utilities.ParseShortcutString(System.String,System.Char)">
            <summary>
            Parses a localized string and returns the corresponding <b>Shortcut</b> enumeration.
            </summary>
            <param name="shortcutString">A string containing the localized description of the shortcut based on the currently mapped keyboard layout.</param>
            <param name="separator">Character used to separate multiple keys in the shortcut</param>
            <returns>The corrsponding Shortcut enumeration value</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetLocalizedShortcutString(System.Windows.Forms.Shortcut)">
            <summary>
            Returns the localized 
            </summary>
            <param name="shortcut">Shortcut to localize</param>
            <returns>A string containing the localized description of the shortcut based on the currently mapped keyboard layout</returns>
            <remarks>
            <p class="note">Note:If the <paramref name="shortcut"/> contains multiple keys, the keys will be separated using the default character separator (+).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetLocalizedShortcutString(System.Windows.Forms.Shortcut,System.Char)">
            <summary>
            Returns the localized string for the specified <b>Shortcut</b>
            </summary>
            <param name="shortcut">Shortcut to localize</param>
            <param name="separator">Character used to separate multiple keys in the shortcut</param>
            <returns>A string containing the localized description of the shortcut based on the currently mapped keyboard layout</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetLocalizedKeyString(System.Windows.Forms.Keys)">
            <summary>
            Returns the localized string for the specified <b>Keys</b>
            </summary>
            <param name="keys">Keys to localize</param>
            <returns>A string containing the localized description of the keys based on the currently mapped keyboard layout</returns>
            <remarks>
            <p class="note">Note:If the <paramref name="keys"/> is made up of multiple keys, the keys will be separated using the default character separated (+).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetLocalizedKeyString(System.Windows.Forms.Keys,System.Char)">
            <summary>
            Returns the localized string for the specified <b>Keys</b>
            </summary>
            <param name="keys">Keys to localize</param>
            <param name="separator">Character used to separate multiple keys</param>
            <returns>A string containing the localized description of the keys based on the currently mapped keyboard layout</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.CopyGraphics(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Copies the contents of one graphics object to another based on the supplied source rectangle and destination point. 
            </summary>
            <param name="destGraphics">The graphics object to which the contents will be copied</param>
            <param name="destLocation">The location within the destination graphics where the contents will be copied.</param>
            <param name="sourceGraphics">The graphics object whose contents will be copied</param>
            <param name="sourceRect">The rectangle within the source graphics object from which the contents will be copied</param>
            <returns>Returns true if the copy was successfull.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.CaptureScreen(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Captures a snapshot of portion of the screen.
            </summary>
            <param name="pt">Center point at which the snapshot will be taken</param>
            <param name="size">Size of the rect to capture</param>
            <returns>A Bitmap containing the portion of the screen or null.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.CaptureScreen(System.Drawing.Rectangle)">
            <summary>
            Captures a snapshot of portion of the screen.
            </summary>
            <param name="rect">Rectangle in screen coordinates indicating the area to capture</param>
            <returns>A Bitmap containing the portion of the screen or null.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.CreateTimer(System.ComponentModel.IContainer)">
            <summary>
            Creates a <see cref="T:System.Windows.Forms.Timer"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Utilities.CreateTimer">
            <summary>
            Creates a <see cref="T:System.Windows.Forms.Timer"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.Utilities.ScreenFromRectangle(System.Drawing.Rectangle)">
            <summary>
            Returns the screen containing the largest portion or closest to the
            specified <see cref="T:System.Drawing.Rectangle"/>
            </summary>
            <param name="rect">Rectangle in screen coordinates</param>
            <returns>The screen that contains or is closest to the specified rect</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.SortMerge(System.Collections.ArrayList,System.Collections.IComparer)">
            <summary>
            Sorts the passed in array list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="arrayList">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.Win.Utilities.SortMerge(System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="arr"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Win.Utilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.Win.Utilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetInheritanceAttribute(System.ComponentModel.Component)">
            <summary>
            Gets the InheritanceAttribute of an object. 
            </summary>
            <param name="component">The component in question.</param>
            <returns>The object's InheritanceAttribute or null if not found or if insufficient security.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.IsActiveFormRelated(System.Windows.Forms.Control)">
            <summary>
            Determines if the current active form is related to a control.
            </summary>
            <param name="control">The control to check for.</param>
            <returns>True if the current active form is in the ownership chain of the passed in control.</returns>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Infragistics.Win.Utilities.FindContainedControlByName(System.Windows.Forms.Control,System.String)">
            <summary>
            Does a recursive search through the container's descendant controls and returns the control with the specified name.
            </summary>
            <param name="container">The container control.</param>
            <param name="controlName">The name of the control.</param>
            <returns>The first control whose <b>Name</b> property matches or null.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.IsControlOnActiveForm(System.Windows.Forms.Control)">
            <summary>
            Determines if the control is on the active form.
            </summary>
            <param name="control">The control in question.</param>
            <returns>True if the control is on the active form.</returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.AddMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
            Adds a message filter to monitor Windows messages as they are routed to their destinations.
            </summary>
            <param name="value">The implementation of the <b>IMessageFilter</b> interface you want to install.</param>
        </member>
        <member name="M:Infragistics.Win.Utilities.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)">
            <summary>
            Removes a message filter from the message pump of the application.
            </summary>
            <param name="value">The implementation of the <b>IMessageFilter</b> to remove from the application. </param>
        </member>
        <member name="M:Infragistics.Win.Utilities.ForceNativeMessageFilter">
            <summary>
            This method is used to force all Infragistics objects using the <see cref="M:Infragistics.Win.Utilities.AddMessageFilter(System.Windows.Forms.IMessageFilter)"/> 
            methods to receive their notifications from a native windows operating system hook instead of attempting to 
            use the .Net Application messagefilter infrastructure.
            </summary>
            <remarks>
            <p class="body">Once this method has been invoked, all subsequent calls 
            to the <see cref="M:Infragistics.Win.Utilities.AddMessageFilter(System.Windows.Forms.IMessageFilter)"/> will be added a native windows 
            hook that will provide the message information.</p>
            <p class="note">This method cannot be reversed and should only be used when it is known that 
            the .Net Application MessageFilter will not be invoked (e.g. when using Application.AddMessageFilter 
            while in the Visual Studio IDE.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetTimeZones">
            <summary>
            Returns an array list of <see cref="T:Infragistics.Win.TimeZoneInfo"/> objects.
            </summary>
            <returns>An array of <see cref="T:Infragistics.Win.TimeZoneInfo"/> objects.</returns>
            <remarks><p class="note"><b>Note:</b> To ensure that an up-to-date list is returned, the caller must have permission to read the registry keys that contain the time zone information. If the caller does not have such permission, a static list is returned, which cannot be guaranteed to contain current information.</p></remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetFirstMnemonicChar(System.String)">
            <summary>
            Returns the first mnemonic character found in a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <returns>The first mnemonic character found, converted to uppercase based on the current UI culture.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single ampersand preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetFirstMnemonicChar(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the first mnemonic character found in a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <param name="culture">The culture to use to convert the character to uppercase, null will return the character as is.</param>
            <returns>The first mnemonic character found, converted to uppercase based on the passed in culture.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single ampersand preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.StripMnemonics(System.String)">
            <summary>
            Strips mnemonics from a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <returns>A new string with those mnemonics stripped out or the passed in string if it didn't contain any.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single ampersand preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetFirstLineOfString(System.String)">
            <summary>
            Returns the first line of text from the specified string, omitting newline
            characters as well as all text following the first occurrence of the newline character.
            </summary>
            <param name="text">The string whose first line of text is to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.CreateSolidBrush(System.Drawing.Color)">
            <summary>
            Returns a <see cref="T:System.Drawing.SolidBrush"/> representing the color.
            </summary>
            <param name="color">The desired color.</param>
            <returns>A new <see cref="T:System.Drawing.SolidBrush"/>.</returns>
            <remarks>
            If the color's IsSystemColor property returns true will create a brush from the color's ARGB equivalent. This prevents a memory leak in the .NET framework.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.CreatePen(System.Drawing.Color)">
            <summary>
            Returns a <see cref="T:System.Drawing.Pen"/> representing the color.
            </summary>
            <param name="color">The desired color.</param>
            <returns>A new <see cref="T:System.Drawing.Pen"/>.</returns>
            <remarks>
            If the color's IsSystemColor property returns true will create a brush from the color's ARGB equivalent. This prevents a memory leak in the .NET framework.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.CreatePen(System.Drawing.Color,System.Single)">
            <summary>
            Returns a <see cref="T:System.Drawing.Pen"/> representing the color.
            </summary>
            <param name="color">The desired color.</param>
            <param name="width">The width of the new pen.</param>
            <returns>A new <see cref="T:System.Drawing.Pen"/>.</returns>
            <remarks>
            If the color's IsSystemColor property returns true will create a brush from the color's ARGB equivalent. This prevents a memory leak in the .NET framework.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetNonSystemColor(System.Drawing.Color)">
            <summary>
            Returns a color that is not flagged as a system color.
            </summary>
            <param name="color">The source color.</param>
            <returns>A color that is not a system color.</returns>
            <remarks>
            If the color's IsSystemColor property is true returns an ARGB equivalent color. 
            </remarks>
        </member>
        <member name="M:Infragistics.Win.Utilities.GetLocalizedString(System.String)">
            <summary>
            Gets the localized string from the win assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.Utilities.IsNumericType(System.Type)">
            <summary>
            Determines if a given System.Type is a numeric type.
            </summary>
            <param name="type">The System.Type to test.</param>
            <returns>True if the type is a numeric type.</returns>
        </member>
        <member name="T:Infragistics.Win.ValueConstraint">
            <summary>
            Contains various constraints that can be applied to a data value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetEnumeration">
            <summary>
            Sets the <see cref="P:Infragistics.Win.ValueConstraint.Enumeration"/> property to null.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetFixedValue">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.FixedValue"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMaxExclusive">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MaxExclusive"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMaxInclusive">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MaxInclusive"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMaxLength">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MaxLength"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMinExclusive">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MinExclusive"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMinInclusive">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MinInclusive"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetMinLength">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.MinLength"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetNullable">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.Nullable"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ResetRegexPattern">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueConstraint.RegexPattern"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.GetTypeFromValidateAsType(Infragistics.Win.ValidateAsType)">
            <summary>
            Returns the System.Type object which corresponds to the <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/> argument.
            </summary>
            <param name="validateAsType">The psuedo-data type for which the corresponding CLR Type is needed.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.GetValidateAsTypeFromType(System.Type)">
            <summary>
            Returns a <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/> value which represents the <see cref="T:System.Type"/> argument.
            </summary>
            <param name="type">A Type object for which the corresponding ValidateAsType is needed.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.InitializeFrom(Infragistics.Win.ValueConstraint,System.Boolean)">
            <summary>
            Copies the state of the argument into this object.
            </summary>
            <param name="source">The ValueConstraint to copy the state of.</param>
            <param name="copyEnumeration">Pass false if the 'enumeration' field should not be copied.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.InitializeFrom(Infragistics.Win.ValueConstraint)">
            <summary>
            Copies the state of the argument into this object.
            </summary>
            <param name="source">The ValueConstraint to copy the state of.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Merge(Infragistics.Win.ValueConstraint,Infragistics.Win.ValueConstraintFlags)">
            <summary>
            Copies constraint settings from the source ValueConstraint to the target (i.e. the instance on which this method was invoked).
            Only constraint settings which have default values on the target will be assigned values from the source.
            Only constraint settings specified by the 'constraintFlags' flags argument will be copied.
            Note, this method does not copy the ValidateAsType property.
            </summary>
            <param name="source">A ValueConstraint object which contains constraint settings to be copied.</param>
            <param name="constraintFlags">A bit flag which specifies the constraint settings to be copied.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Merge(Infragistics.Win.ValueConstraint)">
            <summary>
            Copies constraint settings from the source ValueConstraint to the target (i.e. the instance on which this method was invoked).
            Only constraint settings which have default values on the target will be assigned values from the source.
            Note, this method does not copy the ValidateAsType property.
            </summary>
            <param name="source">A ValueConstraint object which contains constraint settings to be copied.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Reset(Infragistics.Win.ValueConstraintFlags)">
            <summary>
            Resets all of the constraint settings in this object to their initial (not set) state
            which are specified in the 'constraintFlags' bit flag argument.
            Note, this method does not reset the ValidateAsType property.
            </summary>
            <param name="constraintFlags">A bit flag which specifies which constraint settings to reset.</param>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Reset">
            <summary>
            Resets all of the constraint settings in this object to their initial (not set) state.
            Note, this method does not reset the ValidateAsType property.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as.
            </param>
            <param name="constraintFlags">
            A bit flag which indicates which constraints to apply during validation.
            </param>
            <param name="formatProvider">
            An IFormatProvider used when converting values to and from strings.
            </param>
            <param name="formatString">
            A format string to use when converting values to and from strings.
            </param>
            <param name="errorMessage">
            If the data value is invalid, this out param will reference an error message.
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as. 
            </param>
            <param name="constraintFlags">
            A bit flag which indicates which constraints to apply during validation.
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type)">
            <summary>
            Returns true if the argument is considered valid with regards to the current constraint settings.
            This overload uses <see cref="F:Infragistics.Win.ValueConstraintFlags.All"/>.
            </summary>
            <param name="dataValue">
            The data value to validate.
            </param>
            <param name="targetType">
            A Type object representing the data type which the 'dataValue' should be validated as. 
            </param>
            <returns>Returns true if the input value satisfies all of the applicable constraints set on this object, else false.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueConstraint.ValueToDataValue(System.Object,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.Enumeration">
            <summary>
            Gets/sets an object implementing <see cref="T:Infragistics.Win.IValueList"/> which contains a list of value options.
            Note, this property defaults to a null (Nothing) value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasEnumeration">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.Enumeration"/> list is not null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.FixedValue">
            <summary>
            Gets/sets the value which the constrained value must be equal to.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasFixedValue">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.FixedValue"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MaxExclusive">
            <summary>
            Gets/sets the value which is one greater than the maximum allowed for the constrained value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMaxExclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MaxExclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MaxInclusive">
            <summary>
            Gets/sets the maximum value which the constrained value is allowed to be.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMaxInclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MaxInclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MaxLength">
            <summary>
            Gets/sets the maximum length (inclusive) allowed for the constrained value.
            This constraint applies to values of type 'string'.
            The default value is 0, which means that there is no limit.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMaxLength">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MaxLength"/> property has a value greater than 0.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MinExclusive">
            <summary>
            Gets/sets the value which is one less than the minimum allowed for the constrained value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMinExclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MinExclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MinInclusive">
            <summary>
            Gets/sets the minimum value which the constrained value is allowed to be.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMinInclusive">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MinInclusive"/> property is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.MinLength">
            <summary>
            Gets/sets the minimum length (inclusive) allowed for the constrained value.
            This constraint applies to values of type 'string'.
            The default value is 0.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasMinLength">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.MinLength"/> property has a value greater than 0.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.Nullable">
            <summary>
            Gets/sets a flag which indicates if the constrained value is allowed to be null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasNullable">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.Nullable"/> property returns a non-default value.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.RegexPattern">
            <summary>
            Gets/sets the regular expression to which the constrained value must adhere.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasRegexPattern">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueConstraint.RegexPattern"/> is not null (Nothing).
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.HasAnyConstraints">
            <summary>
            Returns true if any of the constraint properties are set on this object or if the ValidateAsType
            property is set to something other than 'Unknown'.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueConstraint.ValidateAsType">
            <summary>
            Gets/sets the <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/> value which the <see cref="M:Infragistics.Win.ValueConstraint.Validate(System.Object,System.Type,Infragistics.Win.ValueConstraintFlags,System.IFormatProvider,System.String,System.String@)"/> method should
            use to constrain the input value.  By default this value is set to <see cref="P:Infragistics.Win.ValueConstraint.ValidateAsType"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DrawValueListItemEventHandler">
            <summary>
            delegate for handling the DrawValueListItem event
            </summary>
        </member>
        <member name="T:Infragistics.Win.MeasureValueListItemEventHandler">
            <summary>
            delegate for handling the MeasureValueListItem event
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListChangedEventHandler">
            <summary>
            delegate for handling the ValueListChanged event
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueList">
            <summary>
            Contains a list of <see cref="T:Infragistics.Win.ValueListItem"/>s, which can used to populate dropdown lists.
            <remarks>
            <p class="body">
            Each <see cref="T:Infragistics.Win.ValueListItem"/> exposes a <see cref="P:Infragistics.Win.ValueListItem.DataValue"/>
            property, which corresponds to the underlying value, and a <see cref="P:Infragistics.Win.ValueListItem.DisplayText"/>
            property, which corresponds to the string that is displayed to represent the item in the user interface.
            </p>
            <p class="note"><b>Note:</b> The <b>ValueList</b> class handles population of the dropdown list displayed by the <see cref="T:Infragistics.Win.EditorWithCombo"/> embeddable editor. The items in the editor's dropdown are of type <see cref="T:Infragistics.Win.ValueListItem"/>.</p>
            </remarks>
            </summary>
            <seealso cref="T:Infragistics.Win.ValueListItem"/>
            <seealso cref="T:Infragistics.Win.ValueListItemsCollection"/>
            <seealso cref="P:Infragistics.Win.ValueListItem.DisplayText"/>
            <seealso cref="P:Infragistics.Win.ValueListItem.DataValue"/>
            <seealso cref="T:Infragistics.Win.EditorWithCombo"/>
        </member>
        <member name="T:Infragistics.Win.IValueList">
            <summary>
            Interface used to genericize access to a class that supplies list items.
            </summary>
            <seealso cref="T:Infragistics.Win.ValueList"/>
            <seealso cref="T:Infragistics.Win.IValueListOwner"/>
        </member>
        <member name="M:Infragistics.Win.IValueList.CloseUp">
            <summary>
            Closes up the list
            </summary>
        </member>
        <member name="M:Infragistics.Win.IValueList.Activate(Infragistics.Win.IValueListOwner)">
            <summary>
            Attaches a new owner control and hooks up ItemSelected and CloseUp
            event handlers. If the list is dropped down by another owner this will cause
            its closeup event to fire first.  Note: Only one owner can be activated at
            a time.  However, it is safe to call this method multiple times with the
            same owner since it shouldn't do anything in that case
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Infragistics.Win.IValueList.DeActivate(Infragistics.Win.IValueListOwner)">
            <summary>
            Detaches the owner from the value list and also the closeup and 
            ItemSelected even handlers.  Note: if the list is dropped down by this
            owner then this will cause its closeup event to fire.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Infragistics.Win.IValueList.DropDown(System.Drawing.Rectangle,System.Int32,System.String)">
            <summary>
            Drops down the list.  Returns true if successful
            </summary>
            <param name="editAreaInScreenCoords"></param>
            <param name="index"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.GetText(System.Object,System.Int32@)">
            <summary>
            Searches for the value and returns the associcated text.  Note: it also 
            returns the index which should be used on the next call to optimize the 
            search.  The item at that index should be checked first for a match.
            </summary>
            <param name="dataValue"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.GetText(System.Int32)">
            <summary>
            Returns the display text at the given item
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.GetValue(System.String,System.Int32@)">
            <summary>
            Searches the display text and returns the associcated value.  Note: it also 
            returns the index which should be used on the next call to optimize the search
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.GetValue(System.String,System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Same as GetValueFromText but allows for a partial string match and the ability 
            to start the search from a specific index.
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <param name="beginAtIndex"></param>
            <param name="partial"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.GetValue(System.Int32)">
            <summary>
            Returns the value at the given item
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.IValueList.ScrollPageUpPageDown(System.Boolean)">
            <summary>
            Scrolls the list by the number of currently visible items
            </summary>
            <param name="pageUp">If true, behaves as if the PageUp key was pressed</param>
        </member>
        <member name="M:Infragistics.Win.IValueList.ResolveItemAppearance(System.Int32,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves appearance for individual items in the value list.
            </summary>
            <param name="itemIndex">Index of the item to resolve the appearance for.</param>
            <param name="appData">AppearanceData structure where resolved appearance data is stored.</param>
            <param name="flags">Properties to resolve.</param>
        </member>
        <member name="M:Infragistics.Win.IValueList.MoveNextItemPreviousItem(System.Boolean)">
            <summary>
            Moves to the next or previous item in the list
            </summary>
            <param name="previous">If true, moves to the previous item</param>
        </member>
        <member name="M:Infragistics.Win.IValueList.MoveFirstItemLastItem(System.Boolean)">
            <summary>
            Moves to the first or last item in the list
            </summary>
            <param name="last">If true, moves to the last item</param>
        </member>
        <member name="E:Infragistics.Win.IValueList.ListChanged">
            <summary>
            Fired when a ValueListItem is changed
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueList.IsDroppedDown">
            <summary>
            True if the list is dropped down.  This is a readonly property
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.IValueList.SelectedItemIndex">
            <summary>
            Returns the index of the selected value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.IValueList.ItemCount">
            <summary>
            Returns number of items
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueList.ShouldDisplayText">
            <summary>
            Returns whether the text should be displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueList.ShouldDisplayImage">
            <summary>
            Returns whether the image should be displayed
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueList.SortByValue">
            <summary>
            Returns whether the owner should sort by values or display text. If it returns true, the owner should sort by value. Otherwise by display text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.#ctor">
            <summary>
            Constructor used to add a valuelist within the properties
            table
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.#ctor(System.Int32)">
            <summary>
            Constructor used to add a valuelist during de-serialization
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueList.ToString">
            <summary>
            Overridden to return the valuelist's key
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            handles certain property change events
            </summary>
            <param name="propChange"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.ValueList.BumpContentsVersion">
            <summary>
            Bump's the contents version number
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeScaleItemImage">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueList.ScaleItemImage"/> property is not set to its default value
            </summary>
            <seealso cref="P:Infragistics.Win.ValueList.ScaleItemImage"/>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetScaleItemImage">
            <summary>
            Resets <see cref="P:Infragistics.Win.ValueList.ScaleItemImage"/> to its default value (OnlyWhenNeeded).
            <seealso cref="P:Infragistics.Win.ValueList.ScaleItemImage"/>
            </summary>
            <seealso cref="P:Infragistics.Win.ValueList.ScaleItemImage"/>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeAppearance">
            <summary>
            Returns true if the value is not the default
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetAppearance">
            <summary>
            Resets the property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerialize">
            <summary>
            Always returns true for groups
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.OnDispose">
            <summary>
            Called when the object is disposed of
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetDisplayStyle">
            <summary>
            Resets DisplayStyle to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetSortStyle">
            <summary>
            Resets SortStyle to its default value (none).
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeDisplayStyle">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeSortStyle">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetContentsVersion">
            <summary>
            Resets ContentsVersion to its default value(0)
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.Reset">
            <summary>
            Resets all properties
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.InitAppearances(Infragistics.Win.AppearancesCollection)">
            <summary>
            When using the Serialization constructor, appearances is set to null, so set
            it here
            </summary>
            <param name="appearances"></param>
        </member>
        <member name="M:Infragistics.Win.ValueList.Infragistics#Win#IValueList#ResolveItemAppearance(System.Int32,Infragistics.Win.AppearanceData@,Infragistics.Win.AppearancePropFlags@)">
            <summary>
            Resolves appearance for individual items in the value list.
            </summary>
            <param name="itemIndex">Index of the item to resolve the appearance for.</param>
            <param name="appData">AppearanceData structure where resolved appearance data is stored.</param>
            <param name="flags">Properties to resolve.</param>
        </member>
        <member name="M:Infragistics.Win.ValueList.Infragistics#Win#IValueList#MoveNextItemPreviousItem(System.Boolean)">
            <summary>
            Moves to the next or previous item in the list
            </summary>
            <param name="previous">If true, moves to the previous item</param>
        </member>
        <member name="M:Infragistics.Win.ValueList.Infragistics#Win#IValueList#MoveFirstItemLastItem(System.Boolean)">
            <summary>
            Moves to the first or last item in the list
            </summary>
            <param name="last">If true, moves to the last item</param>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeMaxDropDownItems">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueList.MaxDropDownItems"/> property has been changed from its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetMaxDropDownItems">
            <summary>
            Sets the <see cref="P:Infragistics.Win.ValueList.MaxDropDownItems"/> property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetDropDownListWidth">
            <summary>
            Sets the <see cref="P:Infragistics.Win.ValueList.DropDownListWidth"/> property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeDropDownListWidth">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueList.DropDownListWidth"/> property has been changed from its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetDropDownListMinWidth">
            <summary>
            Sets the <see cref="P:Infragistics.Win.ValueList.DropDownListMinWidth"/> property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeDropDownListMinWidth">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueList.DropDownListMinWidth"/> property has been changed from its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeDropDownListAlignment">
            <summary>
            Returns true if the <see cref="P:Infragistics.Win.ValueList.DropDownListAlignment"/> property has been changed from its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetDropDownListAlignment">
            <summary>
            Sets the <see cref="P:Infragistics.Win.ValueList.DropDownListAlignment"/> property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetDrawMode">
            <summary>
            Sets the DrawMode property to its default value
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetFormatString">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueList.FormatString"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetFormatProvider">
            <summary>
            Resets the <see cref="P:Infragistics.Win.ValueList.FormatProvider"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ShouldSerializeValueListItems">
            <summary>
            Returns true if there are any items in the list
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ResetValueListItems">
            <summary>
            Clears the list of ValueListItems
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.FindString(System.String)">
            <summary>
            FindString method
            </summary>
            <param name="s">The string to search for</param>
            <returns>The index of the first item that contains a match for the specified string</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.FindString(System.String,System.Int32)">
            <summary>
            FindString method
            </summary>
            <param name="s">The string to search for</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the collection.</param>
            <returns>The index of the first item that contains a match for the specified string.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.FindByDataValue(System.Object)">
            <summary>
            Returns the the <see cref="T:Infragistics.Win.ValueListItem"/> whose <see cref="P:Infragistics.Win.ValueListItem.DataValue"/> property is equal to the specified <paramref name="dataValue"/>, or null (Nothing in VB) if no item was found.
            </summary>
            <param name="dataValue">The <see cref="P:Infragistics.Win.ValueListItem.DataValue"/> of the item being searched for.</param>
            <returns>The matching <see cref="T:Infragistics.Win.ValueListItem"/> or null (Nothing in VB) if no item was found.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.FindStringExact(System.String)">
            <summary>
            FindStringExact method
            </summary>
            <param name="s">The string to search for</param>
            <returns>The index of the first item that contains an exact match for the specified string</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.FindStringExact(System.String,System.Int32)">
            <summary>
            FindString method
            </summary>
            <param name="s">The string to search for</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the collection.</param>
            <returns>The index of the first item that contains an exact match for the specified string</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.GetItemHeight(System.Int32)">
            <summary>
            Returns the height of the item at the specified index
            </summary>
            <param name="index">The index of the item</param>
            <returns>The height of the item in pixels</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.GetItemText(System.Object)">
            <summary>
            Returns the text of the item at the specified index
            </summary>
            <param name="item">The index of the item</param>
            <returns>A string containing the item's text</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.ReSyncContents">
            <summary>
            Re-synchronizes the contents of the internal valuelist
            with the internal combo
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ProcessOnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use. Sends a WM_MOUSEWHEEL message to the ValueListDropDown.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.Win.ValueList.IsMRUItem(System.Int32)">
            <summary>
            Returns whether the specified index represents an MRU item
            </summary>
            <param name="index">An integer corresponding to the index of the ComboBox item to be evaluated</param>
            <returns>A boolean indicating whether the specified index represents an MRU item</returns>
        </member>
        <member name="M:Infragistics.Win.ValueList.GetValueListItemIndexFromText(System.String)">
            <summary>
            Returns the index of the first ValueListItem that textually matches the specified text, or -1 if no match is made
            </summary>
            <returns>The index of the ValueListItem that corresponds to the specified text, or -1 if no match is made</returns>
            <remarks>
            Note that this method will return the index of the ValueListItem that (textually) matches the specified MRU item.<br></br>
            The search begins at the first ValueListItem, so MRU items are <b>not</b> included in the search.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.ValueList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueList.OnDeserialization(System.Object)">
            <summary>
            Invoked after the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for the this parameter is not currently implemented.</param>
        </member>
        <member name="E:Infragistics.Win.ValueList.DrawValueListItem">
            <summary>
            Fired when a ValueListItem is drawn
            </summary>
        </member>
        <member name="E:Infragistics.Win.ValueList.ListChanged">
            <summary>
            Fired when a ValueListItem is changed
            </summary>
        </member>
        <member name="E:Infragistics.Win.ValueList.MeasureValueListItem">
            <summary>
            Fired when a ValueListItem is measured
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.SortStyle">
            <summary>
            Returns or sets a value that determines how valuelistitems will be sorted in a valuelist.
            </summary>
            <remarks>
            <p class="body">This property is used to alphabetically sort the valuelistitems in a valuelist.</p>
            <p class="body">Valuelistitems are sorted based on their display text, which is set by the <b>DisplayText</b> property, not their data value.</p>
            <p class="body">When valuelistitems are sorted, their order in the ValueListItems collection does not actually change, only the order in which they are displayed to the user.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ValueList.DisplayStyle">
            <summary>
            Determines what information will be displayed in the drop down and
            edit area of a cell in a drop down style column, and how the 
            information will be formatted.
            </summary>
            <remarks>
            <p class="body">If <b>ValueListDisplayStyle</b> is set to any of the settings that make use of a picture, the picture will be resolved using:</p>
            <ul>
            <li class="body">The <b>Picture</b> property of the Appearance object of the ValueListItem object whose value matches the value for that cell.</li>
            <li class="body">The <b>Picture</b> property of the Appearance object of the ValueList object.</li>
            </ul>
            <p class="body">If no ValueListItem object in the ValueList  matches the cell's value, or if a ValueListItem is matched to the cell's value, but its <b>Picture</b> property is not set, then the <b>Picture</b> property of the ValueList's Appearance object will be used. If the <b>Picture</b> property of the ValueList's Appearance object is not set, no picture will be used.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ValueList.ScaleItemImage">
            <summary>
            Specifies how ValueListItem images will be scaled. The important thing that
            this property can be used to control is how the height of a value list item
            is calculated. When this property is set to its default value of
            OnlyWhenNeeded it always uses the font height and scales down (never up)
            the image on the value list item. When set to Never it uses the max of the
            font and the image for the height of the item. When set to always it uses
            the font height (like OnlyWhenNeeded) except that it scales up as well.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.Appearance">
            <summary>  
            Returns or sets the Appearance object that controls the object's formatting.
            </summary>  
            <remarks>
            <p class="body">The <b>Appearance</b> property of an object is used to associate the object with an Appearance object that will determine its appearance. The Appearance object has properties that control settings such as color, borders, font, transparency, etc. For many of the objects in the UltraWinGrid, you do not set formatting properties directly. Instead, you set the properties of an Appearance object, which controls the formatting of the object it is attached to.</p>
            <p class="body">There are two ways of working with the <b>Appearance</b> property and assigning the attributes of an SSAppearance object to other objects. One way is to create a new Appearance object, adding it directly to the Appearances collection. Then you assign the new Appearance object  to the <b>Appearance</b> property of the object you want to format. This method uses a "named" Appearance object that you must explicitly create (and to which you must assign property settings) before it can be used. For instance, you could create an object in the grid's Appearances collection and assign it some values as follows:</p>
            <p class="code">UltraWinGrid1.Appearances.Add "New1"</p>
            <p class="code">UltraWinGrid1.Appearances("New1").BorderColor = vbBlue</p>
            <p class="code">UltraWinGrid1.Appearances("New1").ForeColor = vbRed</p>
            <p class="body">Creating the object in this way does not apply formatting to any visible part of the grid. The object simply exists in the collection with its property values, waiting to be used. To actually use the object, you must assign it to the grid's (or another object's) <b>Appearance</b> property:</p>
            <p class="code">UltraWinGrid1.Appearance = UltraWinGrid1.Appearances("New1")</p>
            <p class="body">In this case, only one Appearance object exists. The grid's appearance is governed by the settings of the "New1" object in the collection. Any changes you make to the object in the collection will immediately be reflected in the grid.</p>
            <p class="body">The second way of working with the <b>Appearance</b> property is to use it to set property values directly, such as:</p>
            <p class="code">UltraWinGrid1.Appearance.ForeColor = vbBlue</p>
            <p class="body">In this case, an Appearance object is automatically created by the control. This Appearance object is not a member of an Appearances collection and it does not have a name. It is specific to the object for which it was created; it is an "intrinsic" Appearance object. Changes to the properties of an intrinsic Appearance object are reflected only in the object to which it is attached.</p>
            <p class="body">Note that you can assign properties from a named Appearance object to an intrinsic Appearance object without creating a dependency relationship. For example, the following code...</p>
            <p class="code">UltraWinGrid1.Appearance.ForeColor = UltraWinGrid1.Appearances("New1").ForeColor</p>
            <p class="body">...does <i>not</i> establish a relationship between the foreground color of the intrinsic object and that of the named object. It is simply a one-time assignment of the named object's value to that of the intrinsic object. In this case, two Appearance objects exist - one in the collection and one attached to the grid - and they operate independently of one another.</p>
            <p class="body">If you wish to assign all the properties of a named object to an intrinsic object at once without creating a dependency relationship, you can use the <b>Clone</b> method of the Appearance object to duplicate its settings and apply them. So if you wanted to apply all the property settings of the named Appearance object "New1" to the grid's intrinsic Appearance object, but you did not want changes made to "New1" automatically reflected in the grid, you would use the following code:</p>
            <p class="code">UltraWinGrid1.Appearance = UltraWinGrid1.Appearances("New1").Clone</p>
            <p class="body">Note that the properties of an Appearance object can also operate in a hierarchical fashion. Certain properties can be set to a "use default" value, which indicates to the control that the property should take its setting from the object's parent. This functionality is enabled by default, so that unless you specify otherwise, child objects resemble their parents, and formatting set at higher levels of the grid hierarchy is inherited by objects lower in the hierarchy.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ValueList.Appearances">
            <summary>
            Appearance's collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.HasAppearance">
            <summary>
            True if an appearance object has been allocated
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.Infragistics#Win#IValueList#SortByValue">
            <summary>
            Returns whether the owner should sort by values or display text. If it returns true, the owner should sort by value. Otherwise by display text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.Owner">
            <summary>
            The Value List's owner
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.Infragistics#Win#IValueList#ShouldDisplayText">
            <summary>
            ShouldDisplayText property
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.Infragistics#Win#IValueList#ShouldDisplayImage">
            <summary>
            ShouldDisplayImage property
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.InternalID">
            <summary>
            returns an internal id used during serialization/de-serialization
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.MaxDropDownItems">
            <summary>
            Gets/sets the maximum number of items that will be displayed in the dropdown.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.DropDownListWidth">
            <summary>
            Gets/sets the width of the dropdownlist
            </summary>
            <remarks>When set to 0, the width will be the same as the edit portion.</remarks>
            <remarks>When set to -1, the width will automatically adjust to accommodate the longest item text.</remarks>
        </member>
        <member name="P:Infragistics.Win.ValueList.DropDownListMinWidth">
            <summary>
            Gets/sets the minimum width of the dropdown list.
            </summary>
            <remarks><p class="body">When set to 0, the dropdown list has no minimum width restriction.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.ValueList.DropDownListAlignment">
            <summary>
            Gets/sets the alignment of the dropdown list. Available only at runtime.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.SelectedItem">
            <summary>
            Gets/sets the currently selected item. Available only at runtime.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.SelectedIndex">
            <summary>
            Gets/sets the index of the currently selected item. Available only at runtime.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.DrawMode">
            <summary>
            Gets/sets DrawMode used by the dropdown list
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.FormatString">
            <summary>
            Gets/sets the format string that is used when converting a ValueListItem's DataValue into a string when no value is specified for the DisplayText property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.FormatProvider">
            <summary>
            Gets/sets the formatting information that is used when converting a ValueListItem's DataValue into a string when no value is specified for the DisplayText property.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.MRUListProvider">
            <summary>
            The Value List's MRUList provider
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueList.ValueListItems">
            <summary>
            Returns a reference to a ValueListItems collection, containing the valustlistitems of a ValueList object. This property is read-only at run-time. This property is not available at design-time.
            </summary>
            <remarks>
            <p class="body">This property returns a reference to a ValueList collection that can be used to retrieve references to the ValueListItem objects that are contained by the valuelist. You can use this reference to access any of the returned collection's properties or methods, as well as the properties or methods of the objects within the collection.</p>
            <p class="body">A reference to a ValueList object for a column can be obtained from the column's <b>ValueList</b> property. Valuelistitems can be added to or removed from a ValueList object by invoking its <b>Add</b> and <b>Remove</b> methods, respectively.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.ValueList.ValueListTypeConverter">
            <summary>
            ValueList type converter.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ValueListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueList.ValueListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueList.ValueListBindableAttribute">
            <summary>
            This attribute is used to identify those classes that should be added to a ValueListEditor's drop down list. 
            </summary>
            <remarks>
            <p>This attribute only has meaning for those System.Windows.Forms.Control derived classes that implement the IValueList interface.</p>
            <p></p>
            <p>Note: If a System.Windows.Forms.Control derived classes implements the IValueList interface but does not has this attribute it will be considered bindable by default and added to a ValueListEditor's drop down list.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.ValueList.ValueListBindableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor, initializes a new instance of <b>ValueListBindableAttribute</b>
            </summary>
            <param name="bindable">True to add the class to a ValueListEditor's drop down list.</param>
        </member>
        <member name="P:Infragistics.Win.ValueList.ValueListBindableAttribute.Bindable">
            <summary>
            Returns true if the class should be added to a ValueListEditor's drop down list (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Win.IValueListTypeConverter">
            <summary>
            A type converter used for value lists.
            </summary>
        </member>
        <member name="M:Infragistics.Win.IValueListTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Used to determine what data types the converter can convert.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type being checked for possible conversion.</param>
            <returns>Boolean indicating if the converter can convert to the destinationType.</returns>
        </member>
        <member name="M:Infragistics.Win.IValueListTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the value to the destination type specified.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">Object to be converted.</param>
            <param name="destinationType">Type that the object should be converted to.</param>
            <returns>New object of the destination type or null if the conversion failed.</returns>
        </member>
        <member name="T:Infragistics.Win.IValueListsCollectionProvider">
            <summary>
            Interface used by ValueListEditor to gain access to the value lists collection associated with the passed in context.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListsCollectionProvider.ValueLists">
            <summary>
            Returns a ValueListsCollection or null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.IValueListsCollectionProvider.Control">
            <summary>
            Returns the control associated.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListEditor">
            <summary>
            UIEditor for properties of type IValueList. Displays a dropdown of objects that implement IValueList and are ValueListBindable.
            </summary>
            <remarks>The <see cref="T:Infragistics.Win.ValueList.ValueListBindableAttribute"/> determines if a class that supports IValuList is added to the dropdown.</remarks>
        </member>
        <member name="M:Infragistics.Win.ValueListEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListDropDown.OnDropDown(System.EventArgs)">
            <summary>
            Called when the list portion is displayed
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Win.ValueListDropDown.OnCloseUpTimerTick(System.Object,System.EventArgs)">
            <summary>
            Notification handler for the Tick event fired 
            by the closeup timer
            </summary>
            <param name="sender">The object that sent the event</param>
            <param name="args">Event arguments</param>
            <remarks>
            The ComboBox control does not fire an event when the dropdown list is closed. 
            Under some circumstances it is possible to know that it closed (i.e., the SelectionChangeCommitted 
            event fires), but if it closes without a committed change, we never get a notification. This makes it 
            exceedingly difficult to synchronized our IsDroppedDown property with the ComboBox control's 
            DroppedDown property. The solution is to set a timer when the list is dropped down, and poll the 
            value of the ComboBox's DroppedDown property with each tick of the timer. When the value is false, 
            we then call our ComboBoxCloseUp method, thus simulating a 'CloseUp' event.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.ValueListDropDown.Dispose(System.Boolean)">
            <summary>
            Called when the component is being disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListDropDown.OnGotFocus(System.EventArgs)">
            <summary>
            Called when the control receives the input focus.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Infragistics.Win.ValueListDropDown.Text">
            <summary>
            Text property - overridden
            </summary>
        </member>
        <member name="T:Infragistics.Win.DrawValueListItemEventArgs">
            <summary>
            DrawValueListItemEventArgs
            </summary>
        </member>
        <member name="M:Infragistics.Win.DrawValueListItemEventArgs.#ctor(System.Windows.Forms.DrawItemEventArgs,Infragistics.Win.ValueListItem,Infragistics.Win.AppearanceData)">
            <summary>
            Creates a new instance of the DrawValueListItemEventArgs class
            </summary>
            <param name="drawItemEventArgs">Draw item event arguments</param>
            <param name="valueListItem">The ValueListItem to be drawn</param>
            <param name="resolvedAppearance">The resolved Appearance to apply to the ValueListItem</param>
        </member>
        <member name="P:Infragistics.Win.DrawValueListItemEventArgs.DoDefaultDrawing">
            <summary>
            Gets/sets whether the ValueListItem is being custom drawn
            </summary>
            <remarks>
            <p class="body">
            When the DrawValueListItem event fires, the DoDefaultDrawing parameter of the event arguments is true. If it is set to false, default drawing will not occur, and the listener will be able to draw the item.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DrawValueListItemEventArgs.ResolvedAppearance">
            <summary>
            Gets/sets the resolved Appearance that will be applied to the ValueListItem when it is custom drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DrawValueListItemEventArgs.DrawItemEventArgs">
            <summary>
            The DrawItemEventArgs associated with this draw operation
            </summary>
        </member>
        <member name="P:Infragistics.Win.DrawValueListItemEventArgs.ValueListItem">
            <summary>
            The ValueListItem that will be drawn
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListChangedEventArgs">
            <summary>
            ListChangedEventArgs empty for now
            </summary>
        </member>
        <member name="T:Infragistics.Win.MeasureValueListItemEventArgs">
            <summary>
            MeasureValueListItemEventArgs
            </summary>
        </member>
        <member name="M:Infragistics.Win.MeasureValueListItemEventArgs.#ctor(System.Windows.Forms.MeasureItemEventArgs,Infragistics.Win.ValueListItem,Infragistics.Win.AppearanceData)">
            <summary>
            Creates a new instance of the MeasureValueListItemEventArgs class
            </summary>
            <param name="measureItemEventArgs">Measure item event arguments</param>
            <param name="valueListItem">The ValueListItem to be drawn</param>
            <param name="resolvedAppearance">The resolved Appearance to apply to the ValueListItem</param>
        </member>
        <member name="P:Infragistics.Win.MeasureValueListItemEventArgs.DoDefaultMeasuring">
            <summary>
            Gets/sets whether the ValueListItem is being custom measured
            </summary>
            <remarks>
            <p class="body">
            When the MeasureValueListItem event fires, the DoDefaultMeasuring parameter of the event arguments is true. If it is set to false, default drawing will not occur, and the listener will be able to draw the item.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.MeasureValueListItemEventArgs.ResolvedAppearance">
            <summary>
            Gets/sets the resolved Appearance that will be applied to the ValueListItem when it is custom drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Win.MeasureValueListItemEventArgs.MeasureItemEventArgs">
            <summary>
            The DrawItemEventArgs associated with this draw operation
            </summary>
        </member>
        <member name="P:Infragistics.Win.MeasureValueListItemEventArgs.ValueListItem">
            <summary>
            The ValueListItem that will be drawn
            </summary>
        </member>
        <member name="T:Infragistics.Win.IFilterableValueList">
            <summary>
            Interface used to genericize access to a class that supplies list items with Filtering.
            </summary>
            <seealso cref="T:Infragistics.Win.ValueList"/>
            <seealso cref="T:Infragistics.Win.IValueListOwner"/>
        </member>
        <member name="M:Infragistics.Win.IFilterableValueList.IsItemVisible(System.Int32)">
            <summary>
            Returns whether an item in the list is visible (not filtered out or hidden) for the purposes of AutoEdit functionality. 
            </summary>
            <param name="index">The index of the item.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.ValueListItem">
            <summary>
            ValueListItem type objects are stored in ValueList to represent
            the itmes in the ValueList
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.#ctor">
            <summary>
            Constructor used to add a valuelistitem within the properties
            window
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ShouldSerializeDataValue">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ResetDataValue">
            <summary>
            Resets DataValue to its default setting (null).
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ShouldSerializeDisplayText">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ResetDisplayText">
            <summary>
            Resets DisplayText to its default value (null).
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ShouldSerializeAppearance">
            <summary>
            Returns true if this property is not set to its default value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ResetAppearance">
            <summary>
            Resets appearance
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ShouldSerialize">
            <summary>
            Always returns true for groups
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            overridden method that is called whenever a sub object property changes that		
            </summary>
            <param name="propChange"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.OnDispose">
            <summary>
            Called when the Item is disposed
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ToString">
            <summary>
            Overridden to facilitate easy lookup of items (when finding a
            match for a text)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:Infragistics.Win.ValueListItem.ValueList">
            <summary>
            Returns a reference to a ValueList object containing the list of values used by a column. This property is read-only at run-time. This property is not available at design-time.
            </summary>
            <remarks>
            <p class="body">This property returns a reference to a ValueList object that can be used to set properties of, and invoke methods on, the valuelist that is associated with a column. You can use this reference to access any of the returned valuelist's properties or methods.</p>
            <p class="body">This property is also used to assign a particular ValueList object to a column. Once assigned, the valuelist enables a column to use the dropdown list styles and intelligent data entry, specified by the <b>Style</b> and <b>AutoEdit</b> properties, respectively, of the column for which this property is set.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ValueListItem.DisplayText">
            <summary>
            Returns or sets a value that determines the text to be displayed instead of the cell data.
            </summary>
            <remarks>
            <p class="body">This property, in conjunction with the <b>DataValue</b> property, provides a way to store one value in the data source while displaying another. In this manner, the user can be presented with a list of states, for example, and if he or she selects "New York," the value "NY" could be stored in the data source. In this example, this property is set to "New York" while "NY" is the value of the <b>DataValue</b> property.</p>
            <p class="body">Values for this property do not have to be unique within the ValueListItems collection.</p>
            <p class="body">The <b>Find</b> method can be invoked to search for a valuelistitem by its display text.</p>
            <p class="note"><b>Note</b>: When the <b>DisplayText</b> property is not explicity set, a <b>ValueListItem</b> will display the string representation of its <see cref="P:Infragistics.Win.ValueListItem.DataValue"/> property.<br></br>
            Also note that it is possible for a <b>ValueListItem</b> to have its <b>DisplayText</b> property set while no value has been specified for the <see cref="P:Infragistics.Win.ValueListItem.DataValue"/> property; it this scenario, the <b>DataValue</b> will <b>not</b> be set, as it is possible that specifying a null <b>DataValue</b> for the item was intentional.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ValueListItem.DataValue"/>
        </member>
        <member name="P:Infragistics.Win.ValueListItem.DataValue">
            <summary>
            Returns or sets the data value associated with this item.
            </summary>
            <remarks>
            <p class="body">This property, in conjunction with the <b>DisplayText</b> property, provides a way to store one value in the datasource while displaying another. In this manner, the user can be presented with a list of states, for example, and if he or she selects "New York," the value "NY" could be stored in the data source. In this example, "New York" is the value of the <b>DisplayText</b> property while "NY" is the value of the <b>DataValue</b> property.</p>
            <p class="body">When data from the data source matches the data value for a particular valuelistitem, that valuelistitem's display text will be shown in the cell.</p>
            <p class="body">Values for this property do not have to be unique within the ValueListItems collection.</p>
            <p class="body">The <b>Find</b> method can be invoked to search for a valuelistitem by its data value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.ValueListItem.Appearance">
            <summary>  
            Returns or sets the Appearance object that controls the object's formatting.
            </summary>  
            <remarks>
            <p class="body">The <b>Appearance</b> property of an object is used to associate the object with an Appearance object that will determine its appearance. The Appearance object has properties that control settings such as color, borders, font, transparency, etc. For many of the objects in the UltraWinGrid, you do not set formatting properties directly. Instead, you set the properties of an Appearance object, which controls the formatting of the object it is attached to.</p>
            <p class="body">There are two ways of working with the <b>Appearance</b> property and assigning the attributes of an SSAppearance object to other objects. One way is to create a new Appearance object, adding it directly to the Appearances collection. Then you assign the new Appearance object  to the <b>Appearance</b> property of the object you want to format. This method uses a "named" Appearance object that you must explicitly create (and to which you must assign property settings) before it can be used. For instance, you could create an object in the grid's Appearances collection and assign it some values as follows:</p>
            <p class="code">UltraWinGrid1.Appearances.Add "New1"</p>
            <p class="code">UltraWinGrid1.Appearances("New1").BorderColor = vbBlue</p>
            <p class="code">UltraWinGrid1.Appearances("New1").ForeColor = vbRed</p>
            <p class="body">Creating the object in this way does not apply formatting to any visible part of the grid. The object simply exists in the collection with its property values, waiting to be used. To actually use the object, you must assign it to the grid's (or another object's) <b>Appearance</b> property:</p>
            <p class="code">UltraWinGrid1.Appearance = UltraWinGrid1.Appearances("New1")</p>
            <p class="body">In this case, only one Appearance object exists. The grid's appearance is governed by the settings of the "New1" object in the collection. Any changes you make to the object in the collection will immediately be reflected in the grid.</p>
            <p class="body">The second way of working with the <b>Appearance</b> property is to use it to set property values directly, such as:</p>
            <p class="code">UltraWinGrid1.Appearance.ForeColor = vbBlue</p>
            <p class="body">In this case, an Appearance object is automatically created by the control. This Appearance object is not a member of an Appearances collection and it does not have a name. It is specific to the object for which it was created; it is an "intrinsic" Appearance object. Changes to the properties of an intrinsic Appearance object are reflected only in the object to which it is attached.</p>
            <p class="body">Note that you can assign properties from a named Appearance object to an intrinsic Appearance object without creating a dependency relationship. For example, the following code...</p>
            <p class="code">UltraWinGrid1.Appearance.ForeColor = UltraWinGrid1.Appearances("New1").ForeColor</p>
            <p class="body">...does <i>not</i> establish a relationship between the foreground color of the intrinsic object and that of the named object. It is simply a one-time assignment of the named object's value to that of the intrinsic object. In this case, two Appearance objects exist - one in the collection and one attached to the grid - and they operate independently of one another.</p>
            <p class="body">If you wish to assign all the properties of a named object to an intrinsic object at once without creating a dependency relationship, you can use the <b>Clone</b> method of the Appearance object to duplicate its settings and apply them. So if you wanted to apply all the property settings of the named Appearance object "New1" to the grid's intrinsic Appearance object, but you did not want changes made to "New1" automatically reflected in the grid, you would use the following code:</p>
            <p class="code">UltraWinGrid1.Appearance = UltraWinGrid1.Appearances("New1").Clone</p>
            <p class="body">Note that the properties of an Appearance object can also operate in a hierarchical fashion. Certain properties can be set to a "use default" value, which indicates to the control that the property should take its setting from the object's parent. This functionality is enabled by default, so that unless you specify otherwise, child objects resemble their parents, and formatting set at higher levels of the grid hierarchy is inherited by objects lower in the hierarchy.</p>
            </remarks> 
        </member>
        <member name="P:Infragistics.Win.ValueListItem.HasAppearance">
            <summary>
            returns true if an appearance object has been allocated for this ValueListItem
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListItem.ValueListItemTypeConverter">
            <summary>
            ValueListItem type converter.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ValueListItemTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItem.ValueListItemTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListItemsCollection">
            <summary>
            value list items collection calss
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds a valuelist item to the collection
            </summary>
            <param name="value">must be a valuelist item object</param>
            <returns>Index in collection</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Contains(Infragistics.Win.ValueListItem)">
            <summary>
            Sees if the item is in the collection.
            </summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Add(Infragistics.Win.ValueListItem)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Insert(System.Int32,Infragistics.Win.ValueListItem)">
            <summary>
            Inserts an item into the collection
            </summary>
            <param name="index">Index in collection</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a value list item to the collection
            </summary>
            <param name="index">Index in collection</param>
            <param name="value">Must be a value list item object</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Remove(System.Object)">
            <summary>
            Remove a value list item from the collection
            </summary>
            <param name="value">Must be a value list item object</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a value list item from the collection
            </summary>
            <param name="index">Index to be removed</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.OnDispose">
            <summary>
            called when the object is being disposed. 
            disposes of any allocated resources
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.CopyTo(Infragistics.Win.ValueListItem[],System.Int32)">
            <summary>
            Copies the items of the collection into the array.
            </summary>
            <param name="array">The array to receive the items.</param>
            <param name="arrayIndex">The array index to begin inserting the items.</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property has changed on a sub object
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.OnRemoveItem(Infragistics.Win.ValueListItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when an item is removed.
            </summary>
            <param name="item"></param>
            <param name="isInternal"></param>
            <param name="isInDestructor"></param>
            <param name="fInClear"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Add(System.Object,System.String)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="dataValue">The value to compare</param>
            <param name="displayText">The display text</param>
            <returns>The newly added item</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Add(System.Object)">
            <summary>
             Adds an item to the collection
            </summary>
            <param name="dataValue">The value to compare and the display text.</param>
            <returns>The newly added item</returns>
            <remarks>
            <p class="note"><b>Note</b>: When ValueListItems are added via this overload, the item's <see cref="P:Infragistics.Win.ValueListItem.DisplayText"/> property will be automatically set to the string representation of the <i>dataValue</i> parameter.
            Also note that if the <i>dataValue</i> parameter contains a <see cref="T:Infragistics.Win.ValueListItem"/>, and the item's <see cref="P:Infragistics.Win.ValueListItem.DataValue"/> property was not explitly set, it will remain null. If two or more items have the same <see cref="P:Infragistics.Win.ValueListItem.DataValue"/>, your application may behave unexpectedly, since the items are not unique.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.ValueListItem.DisplayText"/>
            <seealso cref="P:Infragistics.Win.ValueListItem.DataValue"/>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Insert(System.Int32,System.Object,System.String)">
            <summary>
            Insert an item into the collection
            </summary>
            <param name="index">Where to insert the item</param>
            <param name="dataValue">The value to compare</param>
            <param name="displayText">The display text</param>
            <returns>The newly inserted item</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Remove(System.Int32)">
            <summary>
            Remove valuelist at specified index from collection
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Remove(Infragistics.Win.ValueListItem)">
            <summary>
            Remove valueList from collection
            </summary>
            <param name="valueListItem"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.IndexOf(System.Object)">
            <summary>
            returns the index of valueListItem in the collection
            </summary>
            <param name="valueListItem"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.IndexOf(Infragistics.Win.ValueListItem)">
            <summary>
            Returns the index of the valueListItem in the collection
            </summary>
            <param name="valueListItem"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            value list items collection calss
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListItemsCollection.IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListItemsCollection.IsReadOnly">
            <summary>
            overriden property that indicates whether the collection can
            be modified by adding or removing items
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListItemsCollection.Item(System.Int32)">
            <summary>
            indexer
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListItemsCollection.InitialCapacity">
            <summary>
            Abstract property that specifies the initial capacity
            of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListItemsCollection.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemsCollection.ValueListComparer.Compare(System.Object,System.Object)">
            <summary>
            Callback method called by qsort. Comapres the items based on
            their respective display text strings
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.ValueListItemEnumerator">
            <summary>
            Enumerator for the ValueListCollection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListItemEnumerator.#ctor(Infragistics.Win.ValueListItemsCollection)">
            <summary>
            constructor
            </summary>
            <param name="valueListItems"></param>
        </member>
        <member name="P:Infragistics.Win.ValueListItemEnumerator.Current">
            <summary>
            Type-safe version of Current
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListsCollection">
            <summary>
            Collection of ValueLists
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.#ctor(Infragistics.Win.AppearancesCollection)">
            <summary>
            constructor
            </summary>
            <param name="appearances"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.OnDispose">
            <summary>
            overridden method that is called whenever the object is disposed
            It does the necessary cleanup of allocated resources
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Add(System.Object)">
            <summary>
            Adds a valuelist to the collection
            </summary>
            <param name="value">must be a valuelist object</param>
            <returns>Index in collection</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.AddRange(Infragistics.Win.ValueList[])">
            <summary>
            For use in design time serialization/deserialization.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.IndexOf(Infragistics.Win.ValueList)">
            <summary>
            Gets the index of the value list in the collection.
            </summary>
            <param name="valueList">The valuelist to check.</param>
            <returns>The zero-based index into the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Contains(Infragistics.Win.ValueList)">
            <summary>
            Sees if the valuelist is in the collection.
            </summary>
            <param name="valueList">The valuelist to check.</param>
            <returns>True if the valuelist is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Insert(System.Int32,Infragistics.Win.ValueList)">
            <summary>
            Insert a value list into the collection
            </summary>
            <param name="index">Index in collection</param>
            <param name="valueList">The valuelist to insert.</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a value list to the collection
            </summary>
            <param name="index">Index in collection</param>
            <param name="value">Must be a value list object</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Remove(Infragistics.Win.ValueList)">
            <summary>
            Remove a value list from the collection
            </summary>
            <param name="valueList">The valuelist to remove.</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove a value list from the collection
            </summary>
            <param name="valueList">Must be a value list object</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a value list from the collection
            </summary>
            <param name="index">Index to be removed</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.InitAppearances(Infragistics.Win.AppearancesCollection)">
            <summary>
            When using the Serialization constructor, appearances is set to null, so set
            it here after calling this constructor
            </summary>
            <param name="appearances"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property has changed on a sub object
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Add">
            <summary>
               <para>
                  Adds a <see cref="T:Infragistics.Win.ValueList"/>
                  to the collection.
               </para>
            </summary>
            <exception cref="T:System.ArgumentNullException">
               The <paramref name="ValueList"/>argument was <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Add(System.String)">
            <summary>
            Creates a new ValueList object with specified key and adds it to
            the collection
            </summary>
            <param name="key"></param>
            <returns>returns the new value list </returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Remove(System.Int32)">
            <summary>
            Remove valuelist at specified index from collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Remove(System.String)">
            <summary>
            Remove valueList with specified key from collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.OnRemoveItem(Infragistics.Win.ValueList,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called when an item is removed.
            </summary>
            <param name="item"></param>
            <param name="isInternal"></param>
            <param name="isInDestructor"></param>
            <param name="isInClear"></param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.InitializeFrom(Infragistics.Win.ValueListsCollection)">
            <summary>
            Initializes the state of this object from a source object of
            the same type
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.InitAppearanceHolders">
            <summary>
            Sets the appearance holders collection references to 
            the layout's appearances collection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.GetValueListFromInternalID(System.Int32)">
            <summary>
            Finds the valuelist object with an id
            </summary>
            <param name="id">The id to match</param>
            <returns>The ValueList object with the id</returns>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked during the serialization of the object.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Win.ValueListsCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Collection of ValueLists
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.IsReadOnly">
            <summary>
            overriden property that indicates whether the collection can
            be modified by adding or removeing items
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.Item(System.Int32)">
            <summary>
            indexer
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.Item(System.String)">
            <summary>
            indexer by string
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.InitialCapacity">
            <summary>
            Abstract property that specifies the initial capacity
            of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.ValueListsCollection.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="T:Infragistics.Win.ValueListEnumerator">
            <summary>
            Enumerator for the ValueListCollection
            </summary>
        </member>
        <member name="M:Infragistics.Win.ValueListEnumerator.#ctor(Infragistics.Win.ValueListsCollection)">
            <summary>
            constructor
            </summary>
            <param name="valueLists"></param>
        </member>
        <member name="P:Infragistics.Win.ValueListEnumerator.Current">
            <summary>
            Type-safe version of Current
            </summary>
        </member>
        <member name="T:Infragistics.Win.XPThemes">
            <summary>
            XPThemes
            </summary>
        </member>
        <member name="E:Infragistics.Win.XPThemes.ThemeChanged">
            <summary>
            Event that fires when the system's theme has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.ThemesSupported">
            <summary>
            Indicates if the themes are supported by the operating system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.IsAppThemed">
            <summary>
            Indicates if the current application supports themes.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.IsThemeActive">
            <summary>
            Indicates if a system theme is active.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.IsAppThemeActive">
            <summary>
            Indicates if the current application has an active theme.
            </summary>
            <remarks>This checks to see if the system supports themes <see cref="P:Infragistics.Win.XPThemes.IsThemeActive"/>and if the
            current application supports themes<see cref="P:Infragistics.Win.XPThemes.IsAppThemed"/>.</remarks>
        </member>
        <member name="P:Infragistics.Win.XPThemes.NonClientAreaThemed">
            <summary>
            Determines if the non client area of the application is themed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.AppControlsThemeThemed">
            <summary>
            Determines if the controls of the application are themed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.AppWebContentThemed">
            <summary>
            Determines if the web content of an application is themed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.ComboBox">
            <summary>
            ComboBox
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.ScrollBar">
            <summary>
            ScrollBar
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.SpinButton">
            <summary>
            SpinButton
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.TreeView">
            <summary>
            TreeView
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.ProgressBar">
            <summary>
            Progress
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Window">
            <summary>
            Window
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Rebar">
            <summary>
            Rebar
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.StatusBar">
            <summary>
            ThemedStatusBar
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Tab">
            <summary>
            ThemedTab
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Page">
            <summary>
            ThemedPage
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Explorer">
            <summary>
            ThemedExplorer
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.Edit">
            <summary>
            ThemedEdit
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.ToolBar">
            <summary>
            ThemedToolbar
            </summary>
        </member>
        <member name="P:Infragistics.Win.XPThemes.CurrentThemeName">
            <summary>
            Returns the name of the current color scheme.
            </summary>
        </member>
        <member name="M:Infragistics.Win.XPThemes.ThemeManagerForm.OnNotifyMessage(System.Windows.Forms.Message)">
            <summary>
            Used to receive notifications about windows messages.
            </summary>
            <param name="m">Message information</param>
        </member>
        <member name="M:Infragistics.Win.XPThemes.ThemeManagerForm.OnThemeChanged(System.EventArgs)">
            <summary>
            Invokes a notification when the XP theme changes.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="T:Infragistics.Win.XPThemes.NativeWindowMethods">
            <summary>
            NativeWindowMethods
            </summary>
        </member>
        <member name="T:Infragistics.Win.XPThemes.NativeWindowMethods.RECT">
            <summary>
            Rectangle structure
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="M:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left</param>
            <param name="top">Top</param>
            <param name="right">Right</param>
            <param name="bottom">Bottom</param>
        </member>
        <member name="M:Infragistics.Win.XPThemes.NativeWindowMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructor
            </summary>
            <param name="rectangle">Rectangle</param>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.AppPropertyParts.STAP_ALLOW_NONCLIENT">
            <summary>
             Specifies that the nonclient areas of application windows have visual styles applied.
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.AppPropertyParts.STAP_ALLOW_CONTROLS">
            <summary>
            Specifies that controls in application windows have visual styles applied.
            </summary>
        </member>
        <member name="F:Infragistics.Win.XPThemes.NativeWindowMethods.AppPropertyParts.STAP_ALLOW_WEBCONTENT">
            <summary>
            Specifies that all web content displayed in an application is rendered using visual styles.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemeItemBase">
            <summary>
            ThemeItemBase
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemeItemBase.className">
            <summary>
            Class name used to obtain the theme handle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemeItemBase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="classList">ClassList used to obtain the theme handle</param>
        </member>
        <member name="M:Infragistics.Win.ThemeItemBase.GetThemeSystemColor(Infragistics.Win.SystemColor)">
            <summary>
            Returns a <see cref="T:System.Drawing.Color"/> representing the themed system color for the specified <see cref="T:Infragistics.Win.SystemColor"/>
            </summary>
            <param name="systemColor">SystemColor</param>
            <returns>A <b>Color</b> structure representing the themed system color or if the theme information is not available, the current system color.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemeItemBase.ThemeHandleReset">
            <summary>
            Invoked when the theme has been changed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedScrollBar">
            <summary>
            ThemedScrollBar
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedScrollBar.DrawScrollButton(System.Windows.Forms.ScrollButton,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Renders a themed scroll button if the os supports it.
            </summary>
            <param name="direction">Direction of the scroll button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the scroll button.</param>
            <param name="clipRect">Cliprect</param>
            <param name="buttonState">State of the scroll button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedScrollBar.DrawScrollThumb(System.Windows.Forms.Orientation,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Draws a themed scroll thumb.
            </summary>
            <param name="orientation">Orientation of the scroll bar the thumb belongs to.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">State of the thumb.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedScrollBar.DrawScrollThumb(System.Windows.Forms.Orientation,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState,System.Boolean)">
            <summary>
            Draws a themed scroll thumb.
            </summary>
            <param name="orientation">Orientation of the scroll bar the thumb belongs to.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">State of the thumb.</param>
            <param name="drawThumbGrip">True if the thumb grip should be rendered if space allows.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedScrollBar.DrawScrollTrack(System.Windows.Forms.Orientation,System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Draws the scroll track area for a ScrollBar.
            </summary>
            <param name="orientation">Orientation of the ScrollBar.</param>
            <param name="topLeft">Boolean indicating if the top/left part of the scroll track is being rendered or the bottom/right.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">State of the scroll track.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedScrollBar.DrawSizeBox(System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draw the size box.
            </summary>
            <param name="left">Boolean indicating whether the size box is aligned to the left.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle</param>
            <param name="clipRect">Clip rect</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="P:Infragistics.Win.ThemedScrollBar.MinimumThumbGripSize">
            <summary>
            Minimum size of the scroll thumb before the grip is no longer rendered.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedButton">
            <summary>
            ThemedButton
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawPushButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Renders a themed push button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the button.</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">Button state.</param>
            <param name="isDefault">Boolean indicating if this is the default button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawPushButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState,System.Boolean)">
            <summary>
            Renders a themed push button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the button.</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">Button state.</param>
            <param name="isDefault">Boolean indicating if this is the default button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawRadioButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a themed radio button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the radio button.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">Button state.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawRadioButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Renders a themed radio button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the radio button.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">Button state.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawCheckBox(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <summary>
            Renders a themed checkbox.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the checkbox.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">Button state.</param>
            <param name="checkState">State of the checkbox.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawCheckBox(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState,System.Windows.Forms.CheckState)">
            <summary>
            Renders a themed checkbox.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the checkbox.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">Button state.</param>
            <param name="checkState">State of the checkbox.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedButton.DrawGroupByBox(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Renders the frame for a group by box.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle</param>
            <param name="clipRect">Clip rect.</param>
            <param name="enabled">Boolean indicating if the element is enabled.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="P:Infragistics.Win.ThemedButton.ButtonAccentColor">
            <summary>
            Color used to display the interior highlight on a button.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedButton.GroupBoxTextColor">
            <summary>
            Color used to display the caption of a group box.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedButton.GroupBoxBorderColor">
            <summary>
            Color used to display the border of a group box.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedComboBox">
            <summary>
            ThemedComboBox
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedComboBox.DrawComboButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a themed ComboBox button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the element.</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">State of the dropdown button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedComboBox.DrawComboButton(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Renders a themed ComboBox button.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect for the element.</param>
            <param name="clipRect">Clip rect</param>
            <param name="buttonState">State of the dropdown button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedTreeView">
            <summary>
            ThemedTreeView
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedTreeView.DrawExpansionIndicator(System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws an expansion indicator.
            </summary>
            <param name="open">Boolean indicating if the indicator is rendered as opened or closed.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedTreeView.DrawBackground(System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders the themed treeview border.
            </summary>
            <param name="borderOnly">True to render only the border area. Otherwise the backcolor and border are rendered.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="P:Infragistics.Win.ThemedTreeView.BorderColor">
            <summary>
            Returns the themed tree border color or the system window frame color if 
            themes are not supported and active.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedTreeView.BackColor">
            <summary>
            Returns the themed tree backcolor or the system Window color if 
            themes are not supported and active.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedSpinButton">
            <summary>
            ThemedSpinButton
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedSpinButton.DrawSpinButton(System.Windows.Forms.ScrollButton,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Renders a themed spin button.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the spin button.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">State of the button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedSpinButton.DrawSpinButton(System.Windows.Forms.ScrollButton,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Renders a themed spin button.
            </summary>
            <param name="direction">Direction of the spin button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the spin button.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="buttonState">State of the button.</param>
            <returns>A boolean indicating whether the method was able to render the theme item.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedHeader">
            <summary>
            ThemedHeader
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedHeader.DrawHeaderItem(Infragistics.Win.ThemedHeader.HeaderItemType,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UIElementButtonState)">
            <summary>
            Renders a themed header element.
            </summary>
            <param name="type">Type of header item.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle</param>
            <param name="clipRect">Clip rect.</param>
            <param name="state">State of the header item.</param>
            <returns>A boolean indicating if the theme could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedHeader.DrawSortArrow(System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a themed sort arrow indicator.
            </summary>
            <param name="up">True if ascending, false is descending.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed item could be rendered.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedHeader.HeaderItemType">
            <summary>
            Enumeration of header types.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedHeader.HeaderItemType.HeaderItem">
            <summary>
            HeaderItem
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedHeader.HeaderItemType.HeaderItemLeft">
            <summary>
            HeaderItemLeft
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedHeader.HeaderItemType.HeaderItemRight">
            <summary>
            HeaderItemRight
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedProgress">
            <summary>
            ThemedProgress
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedProgress.DrawProgressBar(System.Windows.Forms.Orientation,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Renders a themed progress bar.
            </summary>
            <param name="orientation">Orientation of the progress bar.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="percent">A value from 0 to 100 indicating the percentage filled.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedProgress.DrawProgressBarBorder(System.Windows.Forms.Orientation,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed progress bar border.
            </summary>
            <param name="orientation">Orientation of the progress bar.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedProgress.DrawProgressBarFill(System.Windows.Forms.Orientation,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            Renders the filled area of a themed progress bar.
            </summary>
            <param name="orientation">Orientation of the progress bar.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="percent">A value from 0 to 100 indicating the percentage filled.</param>
            <param name="adjustRect">A boolean indicating if the rect supplied is that of the progress bar itself. When set to true, the rect to which
            the fill is rendered is offset based on the space needed to render the progress bar border.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedWindow">
            <summary>
            ThemedWindow
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedWindow.DrawButton(Infragistics.Win.ThemedWindow.SystemButtonType,System.Windows.Forms.ButtonState,System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a themed window button.
            </summary>
            <param name="buttonType">Type of system button to render</param>
            <param name="buttonState">State of the button.</param>
            <param name="isMaximizedMdiChild">True if the button is for a maximized mdi child window.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedWindow.DrawButton(Infragistics.Win.ThemedWindow.SystemButtonType,Infragistics.Win.UIElementButtonState,System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a themed window button.
            </summary>
            <param name="buttonType">Type of system button to render</param>
            <param name="buttonState">State of the button.</param>
            <param name="isMaximizedMdiChild">True if the button is for a maximized mdi child window.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedWindow.DrawWindowCaption(System.Boolean,Infragistics.Win.ThemedWindow.WindowState,Infragistics.Win.ThemedWindow.WindowEnabledState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed window caption background.
            </summary>
            <param name="smallCaption">True if this is a small caption - e.g. ToolWindow</param>
            <param name="windowState">State of the window.</param>
            <param name="enabledState">Enabled state of the window.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rectangle</param>
            <returns>A boolean indicating if the themed element was rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedWindow.DrawWindowFrame(System.Boolean,Infragistics.Win.ThemedWindow.FramePart,System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed window frame area.
            </summary>
            <param name="smallCaption">True if this is the frame for a small caption window - e.g. ToolWindow.</param>
            <param name="framePart">Which area of the frame to render.</param>
            <param name="active">True if the frame is for an active window.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the frame element.</param>
            <param name="clipRect">Clip rectangle</param>
            <returns>A boolean indicating if the themed element was rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedWindow.DrawSmallCloseButton(Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed close button for a small window caption.
            </summary>
            <param name="buttonState">State of the button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed item could be rendered.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedWindow.SystemButtonType">
            <summary>
            Enumeration of System button types.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.SystemButton">
            <summary>
            SystemButton
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.Minimize">
            <summary>
            Minimize
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.Maximize">
            <summary>
            Maximize
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.Restore">
            <summary>
            Restore
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.SystemButtonType.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedWindow.WindowState">
            <summary>
            Enumeration of window state.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowState.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowState.Minimized">
            <summary>
            Minimized
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowState.Maximized">
            <summary>
            Maximized
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedWindow.WindowEnabledState">
            <summary>
            Enabled state of a window.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowEnabledState.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowEnabledState.Inactive">
            <summary>
            Inactive
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.WindowEnabledState.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedWindow.FramePart">
            <summary>
            Enumeration of frame parts.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.FramePart.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.FramePart.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedWindow.FramePart.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedRebar">
            <summary>
            ThemedRebar
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedRebar.DrawGripper(System.Boolean,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders the grip area of a rebar band.
            </summary>
            <param name="vertical">True if a vertical gripper is to be rendered.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>True if the themed element was able to be rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedRebar.DrawChevron(System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed chevron button.
            </summary>
            <param name="vertical">True if a vertical chevron is to be rendered.</param>
            <param name="buttonState">State of the button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>True if the themed element was rendered.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedRebar.DrawBand(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed band background.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>A boolean indicating if the themed element could be rendered.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedStatusBar">
            <summary>
            ThemedStatusBar
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedStatusBar.DrawStatusBarItem(Infragistics.Win.ThemedStatusBar.StatusBarItem,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed status bar item.
            </summary>
            <param name="item">Type of item to render.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>True if the themed element was able to be rendered.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedStatusBar.StatusBarItem">
            <summary>
            Enumeration of status bar items.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedStatusBar.StatusBarItem.Pane">
            <summary>
            Pane
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedStatusBar.StatusBarItem.GripperPane">
            <summary>
            GripperPane
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedStatusBar.StatusBarItem.Gripper">
            <summary>
            Gripper
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedStatusBar.StatusBarItem.Background">
            <summary>
            StatusBar background
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedStatusBar.StatusBarItem.GripperLeft">
            <summary>
            Left aligned gripper
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedTab">
            <summary>
            ThemedTab
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedTab.DrawTabPane(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders the themed tab pane.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element could be rendered using the system theme.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedTab.DrawTabBody(Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders the themed tab body.
            </summary>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element could be rendered using the system theme.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedTab.DrawTabItem(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed tab item.
            </summary>
            <param name="leftEdge">True if the tab item has a complete left edge.</param>
            <param name="rightEdge">True if the tab item has a complete right edge.</param>
            <param name="focused">True if the tab item has focus.</param>
            <param name="selected">True if the tab item is selected.</param>
            <param name="tabState">State of the tab item.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <returns>True if the element could be rendered using themes.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedTab.DrawTabItem(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,Infragistics.Win.UltraWinTabs.TabLocation)">
            <summary>
            Renders a themed tab item.
            </summary>
            <param name="leftEdge">True if the tab item has a complete left edge.</param>
            <param name="rightEdge">True if the tab item has a complete right edge.</param>
            <param name="focused">True if the tab item has focus.</param>
            <param name="selected">True if the tab item is selected.</param>
            <param name="tabState">State of the tab item.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rect of the element.</param>
            <param name="clipRect">Clip rect.</param>
            <param name="tabLocation">Alignment of the tab items</param>
            <returns>True if the element could be rendered using themes.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedPage">
            <summary>
            ThemedPage
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedPage.DrawThemedPageArrow(System.Windows.Forms.Orientation,System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed page arrow.
            </summary>
            <param name="orientation">Orientation of the element.</param>
            <param name="upLeft">True if the element is the up (vertical) or left (horizontal) element.</param>
            <param name="buttonState">State of the button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
        <member name="T:Infragistics.Win.ThemedExplorer">
            <summary>
            ThemedExplorer
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.DrawPinButton(System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Renders a themed pin button.
            </summary>
            <param name="pinned">True if the pin button is set.</param>
            <param name="buttonState">State of the button.</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <param name="scale">True to scale the image based on the specified rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.DrawButton(Infragistics.Win.ThemedExplorer.ExplorerButtonType,Infragistics.Win.ThemedExplorer.ExplorerButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed explorer button.
            </summary>
            <param name="buttonType">Type of button to render</param>
            <param name="buttonState">State of the button</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.GetButtonSize(Infragistics.Win.ThemedExplorer.ExplorerButtonType,Infragistics.Win.ThemedExplorer.ExplorerButtonState,Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Returns the preferred size for the specified button
            </summary>
            <param name="buttonType">Button type</param>
            <param name="buttonState">Button state</param>
            <param name="drawParams">Draw params structure</param>
            <returns>The preferred size of the button</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.GetButtonSize(Infragistics.Win.ThemedExplorer.ExplorerButtonType,Infragistics.Win.ThemedExplorer.ExplorerButtonState,System.Drawing.Graphics)">
            <summary>
            Returns the preferred size for the specified button
            </summary>
            <param name="buttonType">Button type</param>
            <param name="buttonState">Button state</param>
            <param name="g">Graphics object whose hdc is used to determine the size of the button</param>
            <returns>The preferred size of the button</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.DrawBackground(Infragistics.Win.ThemedExplorer.BackgroundType,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed explorer background area.
            </summary>
            <param name="type">Type of background to render</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
        <member name="M:Infragistics.Win.ThemedExplorer.ThemeHandleReset">
            <summary>
            Invoked when the theme has been changed.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.GroupHeaderColor">
            <summary>
            Color used to display the text for an explorer bar header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.ActiveGroupHeaderColor">
            <summary>
            Color used to display the text for an explorer bar header when the mouse is over the header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.SpecialGroupHeaderColor">
            <summary>
            Color used to display the text for a "special" explorer bar header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.ActiveSpecialGroupHeaderColor">
            <summary>
            Color used to display the text for a "special" explorer bar header when the mouse is over the header.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.BackgroundGradient">
            <summary>
            The primary color used to fill the background
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.BackgroundGradient2">
            <summary>
            The second color used in a gradient fill of the background.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.GroupFillColor">
            <summary>
            The color used to render the background of a standard explorer bar group.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedExplorer.GroupBorderColor">
            <summary>
            Color used to display the border color for an explorer bar group.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedExplorer.ExplorerButtonState">
            <summary>
            Enumeration of the button state for an explorer style button
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonState.Normal">
            <summary>
            The button is displayed in its normal state
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonState.Hot">
            <summary>
            The mouse is over the button
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonState.Pressed">
            <summary>
            The button is pressed
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedExplorer.ExplorerButtonType">
            <summary>
            Enumeration of explorer button style
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.HeaderClose">
            <summary>
            Close button
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.NormalGroupExpand">
            <summary>
            Group button displayed when the group is closed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.NormalGroupCollapse">
            <summary>
            Group button displayed when the group is opened/expanded
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.SpecialGroupExpand">
            <summary>
            Group button displayed when a special group is closed
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.SpecialGroupCollapse">
            <summary>
            Group button displayed when a special group is opened/expanded
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.ExplorerButtonType.IEBarMenu">
            <summary>
            IE menu arrow
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedExplorer.BackgroundType">
            <summary>
            BackgroundType
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.BackgroundType.Header">
            <summary>
            Header background
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.BackgroundType.NormalGroup">
            <summary>
            Normal explorer group
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.BackgroundType.SpecialGroup">
            <summary>
            Special explorer group
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.BackgroundType.NormalGroupHeader">
            <summary>
            Normal explorer group header
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedExplorer.BackgroundType.SpecialGroupHeader">
            <summary>
            Special explorer group header
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedEdit">
            <summary>
            ThemedEdit
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedEdit.DrawEditArea(Infragistics.Win.ThemedEdit.EditState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed edit area
            </summary>
            <param name="editState">State of the edit area</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
        <member name="P:Infragistics.Win.ThemedEdit.EditFillColor">
            <summary>
            Color used to display the fill color for edit controls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedEdit.EditFillColorReadOnly">
            <summary>
            Color used to display the fill color for read-only edit controls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedEdit.EditTextColor">
            <summary>
            Color used to display the text color for edit controls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.ThemedEdit.EditTextColorReadOnly">
            <summary>
            Color used to display the text color for read-only edit controls.
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedEdit.EditState">
            <summary>
            XPThemes Edit control states
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Normal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Hot">
            <summary>
            The mouse is over the edit area
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Selected">
            <summary>
            Selected - Undocumented windows theme setting
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Disabled">
            <summary>
            The edit control is disabled
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Focused">
            <summary>
            The edit control has focus.
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.ReadOnly">
            <summary>
            The edit control is read-only
            </summary>
        </member>
        <member name="F:Infragistics.Win.ThemedEdit.EditState.Assist">
            <summary>
            Assist - Undocumented windows theme setting
            </summary>
        </member>
        <member name="T:Infragistics.Win.ThemedToolbar">
            <summary>
            ThemedToolbar
            </summary>
        </member>
        <member name="M:Infragistics.Win.ThemedToolbar.DrawToolbarButton(System.Boolean,System.Boolean,Infragistics.Win.UIElementButtonState,Infragistics.Win.UIElementDrawParams@,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Renders a themed toolbar button
            </summary>
            <param name="splitButton">True if the button is split button</param>
            <param name="dropDownButton">True if the button is a dropdown button</param>
            <param name="buttonState">State of the button</param>
            <param name="drawParams">UIElementDrawParams struct containing information regarding the element being rendered, including the Graphics object to render into.</param>
            <param name="rect">Rectangle of the element.</param>
            <param name="clipRect">Clip rect</param>
            <returns>True if the element is able to render the themed item.</returns>
        </member>
    </members>
</doc>
